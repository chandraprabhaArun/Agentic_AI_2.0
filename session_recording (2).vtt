WEBVTT

1
00:07:52.790 --> 00:07:54.790
Sunny Savita: Hi, everyone, I'm audible.

2
00:07:54.900 --> 00:07:58.300
Sunny Savita: Can you confirm the chat? If you can hear me, then?

3
00:08:29.550 --> 00:08:35.809
Sunny Savita: Okay, so let's start with the session.

4
00:09:30.600 --> 00:09:35.400
Sunny Savita: yeah, perfect guys. So can you hear me? Am I audible and visible?

5
00:09:37.310 --> 00:09:39.250
Sunny Savita: Okay, thank you. Good morning.

6
00:09:39.470 --> 00:09:45.790
Sunny Savita: So let's begin. Let's start with the session. 1st of all. Okay? Just give me a second.

7
00:09:54.110 --> 00:09:56.820
Sunny Savita: Yeah, can you see my screen guys?

8
00:10:06.940 --> 00:10:08.130
Sunny Savita: Yes or not?

9
00:10:26.930 --> 00:10:32.740
Sunny Savita: Yeah, perfect. So I think the screen is visible.

10
00:10:34.340 --> 00:10:35.986
Sunny Savita: Yeah, great.

11
00:10:49.350 --> 00:11:00.039
Sunny Savita: So yesterday's class excel was not attached. So yeah, so I shared this one later on with my team today, most probably you will find out this entire notes. Okay?

12
00:11:00.240 --> 00:11:11.170
Sunny Savita: So I written some sort of a thing over the Excel row. And don't worry, guys. This entire notes and all everything would be available inside the resource section I already share with my team.

13
00:11:11.400 --> 00:11:25.346
Sunny Savita: Even I share the recline dot txt, and in the recline dot txt there was like nothing, Major. Modules. Okay, even I share in the chat as well, but required dot txt is also available. So 1st of all, let me show you the

14
00:11:26.070 --> 00:11:28.260
Sunny Savita: let me show you guys the

15
00:11:28.910 --> 00:11:33.439
Sunny Savita: resources. Okay? So I'm opening my resource. I'm opening my dashboard.

16
00:11:33.650 --> 00:11:35.210
Sunny Savita: Give me a moment. Okay.

17
00:12:06.520 --> 00:12:20.509
Sunny Savita: you can change that couple that setting. Now, like how to modify the zoom and all. See it is not in my hand. It is only in your system while you are opening a zoom inside your system for watching a lecture. Okay?

18
00:12:22.670 --> 00:12:29.669
Sunny Savita: Still, it is loading for me. Give me a moment. Let me open it again. Okay.

19
00:12:37.440 --> 00:12:40.990
Sunny Savita: guys for me only, or it is taking time for everyone.

20
00:12:46.310 --> 00:12:47.730
Sunny Savita: Hmm.

21
00:12:50.100 --> 00:13:00.559
Sunny Savita: yeah, it's taking time now. Means I think it is down. I hope, yeah. Now I'm I can open it so I can check with the preview.

22
00:13:00.930 --> 00:13:05.220
Sunny Savita: And this is the one.

23
00:13:06.640 --> 00:13:13.020
Sunny Savita: Yeah, this was the last lecture guys. So inside the the resource section.

24
00:13:16.170 --> 00:13:18.300
Sunny Savita: Recondo, tht, is there?

25
00:13:18.520 --> 00:13:24.629
Sunny Savita: Okay, vector, database guys required or txt is available. Now, here, see this one

26
00:13:25.190 --> 00:13:33.019
Sunny Savita: who was asking about the recurrent dot txt. I think I already shared the requirement. Dot txt. Can you see over here? Yes or no, this one.

27
00:13:33.390 --> 00:13:36.450
Sunny Savita: and along with the requirement of txt. All that.

28
00:13:36.810 --> 00:13:41.440
Sunny Savita: along with the Recondo txt, all the file and folder is available.

29
00:13:42.000 --> 00:14:03.230
Sunny Savita: and even the Transcript and all everything. So, guys, please download the resources from here and this would be available. I already share with my team this excited raw canva. So this would be available inside the resource section. Okay, don't worry about it perfect. Now. It is clear how you will get the resources and all

30
00:14:04.090 --> 00:14:29.580
Sunny Savita: Vaishna be saying, I cannot see Vaishnabi. Please check out with the dashboard. Okay, I think you get it. I I think you got a access of the dashboard. Just check inside the resource section of it. Open the dashboard and you will find out this kind of layout, this kind of a ui. Just go and check with your session. Okay, the last session and then resource section inside the last session of the last session. Okay, you will get all the resources

31
00:14:31.110 --> 00:14:36.809
Sunny Savita: guys. Can you give me a quick confirmation, if everything is fine from the previous session. Yes or no.

32
00:14:37.550 --> 00:14:41.199
Sunny Savita: please do let me know in the chat.

33
00:14:41.830 --> 00:14:49.380
Sunny Savita: Yes, and I believe everyone is having access of the dashboard. Right?

34
00:14:50.060 --> 00:15:11.330
Sunny Savita: If you don't have access of dashboard, see? It's not possible. If you will enroll in the course, if you will enroll in the course, you will get access of the dashboard. Okay, so please check out with the website. Learn dot case 9 dot academy in the live courses. You will find out your course, and you can navigate to the dashboard, and you can check all the resources and all everything

35
00:15:11.750 --> 00:15:29.750
Sunny Savita: understood. Good. Now, so let me talk about the agent now, because yesterday I started with the vector database crystal was discussing some sort of a land chain concept. And then I started with a vector database. And yesterday I completed one vector database. That was the files.

36
00:15:29.840 --> 00:15:53.369
Sunny Savita: If you have attended my previous session there, I already discuss about the files. Okay? So I written a code in my Vs code itself. And I hope so, you all have this entire code and file everything. So guys this was the code, right? Regarding the files and all. And we have created a rag. Okay, we have designed the complete rag pipeline.

37
00:15:53.370 --> 00:16:15.290
Sunny Savita: Now in today's class. We're gonna discuss about one more database. And we'll try to discuss couple of theoretical concept. With respect to this vector, database like, what is a in a memory database. What is a cloud based database? What is the advantage and the disadvantage of it each and everything. We'll try to discuss over here inside this particular session. Okay?

38
00:16:15.410 --> 00:16:31.160
Sunny Savita: So let me show you the agenda. Let me write the agenda. Okay? And sameer, what's your doubt, Samir? Just a second. I'm giving you the access. You can talk with me. I cannot understand where you are lagging. Just a second Samir Kumar.

39
00:16:33.470 --> 00:16:46.369
Sunny Savita: And guys see whatever doubts and all you have. Okay? So all the doubts I'll be taking in between means after completing the topic or at the end of the session. Okay.

40
00:16:46.650 --> 00:16:48.420
Sunny Savita: yeah. Sameer, what's your doubt?

41
00:16:50.620 --> 00:16:55.500
sameer kumar: Where is this dashboard? I'm not able to see. Where is this? I've been asking for this link since last.

42
00:16:55.500 --> 00:16:58.629
Sunny Savita: Which what you are not able to see, the dashboard and all everything right.

43
00:16:58.630 --> 00:17:00.700
sameer kumar: Right. That's the course.

44
00:17:00.700 --> 00:17:13.379
Sunny Savita: I'm adding in a panelist, Okay, share your screen quickly, I'll I'll show you that. Okay, guys, please give me 2 min. I think sameer is in very big trouble. So let me fix that. Yes, sameer, I'm adding in a panelist, okay.

45
00:17:15.359 --> 00:17:16.420
Sunny Savita: just a second

46
00:17:18.480 --> 00:17:23.069
Sunny Savita: guys, just 2 min. Okay, I required only 2 min. Let me fix that issue. Okay, wait.

47
00:17:23.934 --> 00:17:29.259
Sunny Savita: Yes. Okay. Please share your screen. I I stopped my sharing. Okay, you guys should.

48
00:17:34.650 --> 00:17:38.739
Sunny Savita: You can adjust the screen. Now, yeah, I think you can do that.

49
00:17:44.270 --> 00:17:48.189
Sunny Savita: Yeah, open your dashboard, go with the courses. Click on the course.

50
00:17:48.640 --> 00:17:49.210
sameer kumar: Right.

51
00:17:50.620 --> 00:17:52.250
Sunny Savita: Click on the port, sir. Ports?

52
00:17:54.240 --> 00:17:56.180
Sunny Savita: Yeah, open this course.

53
00:17:57.800 --> 00:17:59.820
Sunny Savita: Hmm! Now continue.

54
00:18:04.010 --> 00:18:05.520
Sunny Savita: Hmm! Scroll down.

55
00:18:05.780 --> 00:18:07.480
sameer kumar: Okay, got you.

56
00:18:07.480 --> 00:18:09.269
Sunny Savita: Now, what is the issue, sir? Here, tell me.

57
00:18:09.270 --> 00:18:10.150
sameer kumar: Nothing.

58
00:18:10.410 --> 00:18:14.799
sameer kumar: I was asking for the URL where to go. I was not able to find this.

59
00:18:14.800 --> 00:18:23.530
Sunny Savita: It's very easy, like, simply, you can navigate to the dashboard and all everything right. What I told you I just shown you that like 2 to 3 like click. Only right?

60
00:18:23.730 --> 00:18:28.220
Sunny Savita: If you're not able to do this much of things, or how you will develop a code in the application.

61
00:18:28.220 --> 00:18:30.209
sameer kumar: Sorry, sorry, sir. Sorry, sorry.

62
00:18:30.990 --> 00:18:38.280
Sunny Savita: Okay, fine, good guys. So now let's start. Let's begin. So I am going to share my screen.

63
00:18:38.400 --> 00:18:40.099
Sunny Savita: Give me a moment, guys.

64
00:18:40.810 --> 00:18:58.299
Sunny Savita: great, perfect, and I think Chris has already shown you this entire thing right in the demo session. In the 1st session itself, Chris and the Mona, and even Paul has shown the entire ecosystem. I don't know guys, what you are doing. Why you are asking this solicitly doubts and question and

65
00:18:58.880 --> 00:19:04.560
Sunny Savita: disturbing a session perfect. So now, without wasting your time, let's begin.

66
00:19:05.450 --> 00:19:06.640
Sunny Savita: So

67
00:19:06.960 --> 00:19:33.390
Sunny Savita: I think yesterday I discussed the files. Now let me create one more folder inside this vector database folder itself. Okay, so guys, I'm going to create one more folder, folder name is going to be pine code. So we'll discuss one more database, and the database name would be pine code. Okay? And I want a confirmation, the chat. How many people are doing along with me? Tell me.

68
00:19:36.390 --> 00:19:37.559
Sunny Savita: yes or no.

69
00:19:39.900 --> 00:20:09.040
Sunny Savita: Okay. If you are able to match a speed, then you can write. Otherwise you can wait. Once I will share the code. Once I will share the file then you can take that code, and you can like, execute inside your own system right now. So, guys, I created one more folder over here, and the folder name is what find code. Now, inside this particular folder, I'm going to create one more file, and the file name is going to be code dot, IP, bin, okay.

70
00:20:09.260 --> 00:20:14.650
Sunny Savita: support door. IP, 1, b.

71
00:20:15.190 --> 00:20:21.790
Sunny Savita: so here, guys, what I did, I created this code dot. Ipynb, let it create.

72
00:20:22.070 --> 00:20:37.700
Sunny Savita: Yeah. Now, guys, after creating a file, what I will do, what is my 1st job after creating any Ipmb file to select a kernel? Okay? And always guys, you have to select the right kernel and see how you will get a right kernel.

73
00:20:38.156 --> 00:21:01.669
Sunny Savita: You already have created an environment inside your local folder. Okay? So you always always have to select this particular kernel, the kernel from this folder. Okay, now, once you will click on the select automatically, this path will pop up at the 1st place itself. Okay, so please, right, please choose a right kernel. Otherwise you might guess you might get a dependency issues.

74
00:21:01.850 --> 00:21:13.139
Sunny Savita: So once I will select the kernel. Okay, then, what I will do. I'll open my code cell and we'll check everything is working fine or not. So I will write my printed statement. And then, okay.

75
00:21:13.380 --> 00:21:24.030
Sunny Savita: no sequence. If everything is fine, I'll be able to get my answer. So guys create a new file inside this file itself. We are going to write a further code for the pine cone and all.

76
00:21:25.310 --> 00:21:38.370
Sunny Savita: And guys again, I'm saying, whatever doubts you have. You can ask me later on, because it is very difficult to answer a doubt while I'm teaching. So 1st let me teach my concept, and then I can clarify your doubts. Fine or not.

77
00:21:43.180 --> 00:22:03.199
Sunny Savita: Yeah. I close the chat. Okay, no one can talk with each other as of now. I disable the chat. Okay, you can only discuss with me. Great now. Here you can see the output. Means my code file is working fine. But before starting with the session. Guys, I would like to discuss the architecture of the rag. Do you know the architecture of the rag? Yes or no?

78
00:22:03.540 --> 00:22:18.980
Sunny Savita: Yesterday I showed you the architecture of the right. Okay, let's try to revise that architecture. So here, guys, for all of you, I created the architecture. Okay, so let me open it over here. Can you see this architecture, guys, is it visible to all of you?

79
00:22:20.130 --> 00:22:21.140
Sunny Savita: This one?

80
00:22:36.040 --> 00:22:37.100
Sunny Savita: Okay, perfect.

81
00:22:45.240 --> 00:22:46.120
Sunny Savita: Good.

82
00:22:46.270 --> 00:22:54.999
Sunny Savita: So whenever we're talking about the rag. Okay? So inside the rag guys what we do, we have a 3 stages of the rag. Okay?

83
00:22:55.000 --> 00:23:18.130
Sunny Savita: So the 1st stage of the rag itself is called the data ingestion. So in the data ingestion, what we do, we collect our data from the variety of the sources. Okay, so this, our sources could be anything the sources could be any document. The sources could be any database. Okay, the sources, any could be any web page. It could be anything. So here, guys, this is my data source. As you can see, right?

84
00:23:18.130 --> 00:23:32.129
Sunny Savita: So after collecting a data, what we do after collecting a data, we always store our data inside the vector database. Now, why we use vector database? Can anyone answer for this question, why we store the why we use the vector database

85
00:23:32.420 --> 00:23:48.390
Sunny Savita: so that we can perform the vector related operation. Okay, so whenever we talk about the vector database guys, so we always discuss the vector database with respect to the vector based operation. Now, the very important vector based operation

86
00:23:48.850 --> 00:23:54.349
Sunny Savita: vector based operation is what the very important vector based operation is the

87
00:23:54.690 --> 00:23:58.199
Sunny Savita: tell me, guys, what is, what is that? It is a

88
00:23:58.430 --> 00:24:06.639
Sunny Savita: similarity search to find out a similarity search between 2. Vector, okay, so let me write over here, vector

89
00:24:07.730 --> 00:24:10.670
Sunny Savita: based operation.

90
00:24:14.040 --> 00:24:21.199
Sunny Savita: right? So we always collect the data from the different different data sources. Now, did this data source could be anything

91
00:24:21.720 --> 00:24:28.690
Sunny Savita: anything. Okay? And after collecting, if required, we perform the chunking.

92
00:24:28.950 --> 00:24:31.060
Sunny Savita: You know the chunking strategy.

93
00:24:31.980 --> 00:24:36.779
Sunny Savita: yes or no. Tell me we have shown you the chunking strategy using the link

94
00:24:36.900 --> 00:24:49.800
Sunny Savita: already discussed, the checking strategy, using the link chain, the different different checking strategy we have shown you after the checking guys, what we do, we perform the embedding. So have we discussed about the embedding.

95
00:24:50.050 --> 00:24:54.890
Sunny Savita: Did we discuss about the embedding? Yes or no? Tell me, yes.

96
00:24:55.020 --> 00:25:22.199
Sunny Savita: yes, we perform the embedding right? So once we'll collect the data. So once we collect the data different from the different different document. After that, we perform the chunky. Okay? And after the chunky we collect, we create the embedding, but sometimes chunking is not required. In that case we can skip the chunking part. We can directly embed the data, we can directly embed the our document. Okay? And we can store inside the vector database.

97
00:25:22.200 --> 00:25:29.070
Sunny Savita: So tell me, guys, yesterday, I discussed about the vector database. So do we have a different different type of vector database, yes, or

98
00:25:29.370 --> 00:25:40.199
Sunny Savita: different different type, if different. Different type means some of some database. They only support in the local. Okay, some database. They only support over the cloud.

99
00:25:40.560 --> 00:26:01.159
Sunny Savita: Right? Some database are good for the multimodal data. Some database are good for the text data, right? So there is a different different vendor. You will find out vendors. You will find out with respect to the database, or I would say there is a different different organization you will get with respect to the different different database. So should we learn all the databases.

100
00:26:01.360 --> 00:26:12.410
Sunny Savita: Should we go through with each and every databases guys. No, it is even not possible for us right? It is not possible for us. So how we how to select a best database.

101
00:26:12.410 --> 00:26:32.860
Sunny Savita: So first, st we can learn some fundamental regarding the vector, databases and all why it is being used and where it is being used. And then, basically based on the requirement. Okay, based on the some research analysis and all, we can figure out the best database. I will discuss couple of name in today's session so that you will get a more clarity over here. Okay.

102
00:26:32.860 --> 00:26:48.420
Sunny Savita: so we have a different different database. Some of the database support of the local, some some of the database only support in the local, some of the for the cloud. Okay, there is a different different vendor and the organization. You will find out regarding the databases, I hope, till here, everything is fine. Now.

103
00:26:48.670 --> 00:27:07.640
Sunny Savita: so guys, the next thing is, once we store the data inside the vector database. Okay, from any sort of a data resource. So this stage is called, what can anyone tell me yesterday? Only I discuss about that. The 1st stage is called what the 1st stage itself is called the data

104
00:27:07.840 --> 00:27:08.740
Sunny Savita: ingestion.

105
00:27:09.820 --> 00:27:19.549
Sunny Savita: Okay. So the 1st stage is called data ingestion in the data ingestion. What we do, we store the data.

106
00:27:19.780 --> 00:27:33.490
Sunny Savita: we store the data inside the vector, database. Now, after the data ingestion, what happens? Tell me. So after the data ingestion guys, the retriever happens. Okay, so let's let's assume if there is a user.

107
00:27:33.560 --> 00:27:47.929
Sunny Savita: See here, you can see the user if the user is asking any query, okay. So instead of asking, instead of asking Llm, instead of going through this query directly to the Llm, first, st it will go through the vector, database.

108
00:27:47.930 --> 00:28:05.080
Sunny Savita: Right? So here my user is asking a query, this query is going through the embedding. Okay? And then this embedding will come to the vector database. Now, here, what will happen? Guys tell me, once the embedding will come to the vector. Database here, vector. Operation will be performed. Agree or not.

109
00:28:05.760 --> 00:28:21.787
Sunny Savita: Agree or not. Tell me here, vector operation will be performed. So guys, once, we'll perform the vector operations like the similarity search. And all, okay, then we'll retrieve the data. Agree, guys, do we retrieve the data? Now, here, we can retrieve

110
00:28:22.160 --> 00:28:47.920
Sunny Savita: K number of chunks. Okay, so K, is equal to KK. Is equal to could be anything. 3, 4, 5, 1015. Yesterday I shown you the value of the K. It is a hyper parameter. Well, it is a hyper parameter. Only so once my user will ask the question, this question will go through with a vector database. It will perform some vector operation like the similarity search. Okay, ss, means, what guys tell me, ss, means, similarity search. Right?

111
00:28:47.920 --> 00:28:55.879
Sunny Savita: After performing a similarity search, we'll get the data, the relevant data. Okay. Now, this relevant data. This retrieve data

112
00:28:55.880 --> 00:29:00.239
Sunny Savita: along with the query and the prompt will pass to the Llm.

113
00:29:00.370 --> 00:29:27.779
Sunny Savita: Okay. Now, after passing it to the Llm. Llm. Will think about it. Okay, what have been asked inside the question, what is the prompt? Okay, what have been written inside the prompt? What is the retrieve data? Okay. It will try to understand each and every context on each and every context. Okay, so from the given retrieve data and all, okay, the query have been asked, and the prompt have been written and based on the analysis, it will generate the final output.

114
00:29:28.280 --> 00:29:30.530
Sunny Savita: final output.

115
00:29:30.710 --> 00:29:35.570
Sunny Savita: Now, tell me, guys, is this clear? The rag architecture is clear or not.

116
00:29:36.110 --> 00:29:37.610
Sunny Savita: Yes or no.

117
00:29:38.100 --> 00:29:42.790
Sunny Savita: Did you like are you able to understand the complete drag architecture

118
00:29:43.210 --> 00:29:48.679
Sunny Savita: in my previous session? Also I discussed that. Now here, I just given you the quick refreshment.

119
00:29:49.110 --> 00:29:50.140
Sunny Savita: Got it?

120
00:29:50.630 --> 00:30:15.480
Sunny Savita: Yeah, good. Please explain the Llm part again. So llm what it will. It will do. Llm, basically, it will take the retrieve data from the vector. Database. It will take a query, and it will take a prompt okay and based on that, it will generate the answer if you don't know about it. Who is asking this question? So please check out with my previous session there I already discuss in terms of practical as well. Okay.

121
00:30:16.390 --> 00:30:36.430
Sunny Savita: this is clear. Great. Thank you. What does Llm. Do? Llm. Actually generate the answer right? So Llm will generate the final answer based on the given input, so whatever input is being given to the Llm based on that particular, input it's being, it is going to be. Generate the final answer. That's why you like role of the Llm. Okay.

122
00:30:38.470 --> 00:30:41.150
Sunny Savita: great, perfect, it is clear.

123
00:30:41.520 --> 00:30:51.280
Sunny Savita: Like, does no, here we are not doing a here. We are just providing some context to the Llm.

124
00:30:53.830 --> 00:31:17.169
Sunny Savita: Great guys perfect. I think this is already clear. And yesterday also, I discuss about it, and even I shown you the practical. If you haven't attended the previous session, guys, I would suggest you please go and check with the previous session. Most of the thing is going to be clear. Okay, regarding this rag architecture. Now, so guys, one question, okay, one question to all of you. Why we use the vector, database.

125
00:31:18.490 --> 00:31:20.429
Sunny Savita: Why, we use the vector, database

126
00:31:23.770 --> 00:31:33.850
Sunny Savita: to retrieve the data correct. Now, you are able to answer a question. You are able to answer my question. Okay, so tell me, guys, where we use the vector, database

127
00:31:34.470 --> 00:31:36.640
Sunny Savita: where we use the vector, database.

128
00:31:36.760 --> 00:31:44.819
Sunny Savita: do we use the vector database in a rag architecture while we are retrieving a data or while we are ingesting a data, yes or no

129
00:31:45.200 --> 00:32:12.630
Sunny Savita: during the injection and during the retrieval. We use the vector database. Okay? So I will share this architecture with all of you in the resource section itself. Later on you can go through with this entire architecture. Okay? Or else you can try to like you. You can try. You try to draw it from yourself as well, so it will give you the more clear cut understanding. Now, guys, there is couple of more concept which I capped over here.

130
00:32:12.927 --> 00:32:19.769
Sunny Savita: Okay, can you see this one? Is it visible this, entire notes and all. So we'll discuss each and everything today. Okay.

131
00:32:21.030 --> 00:32:40.529
Sunny Savita: see? Guys, I am not ignoring anyone's message. Please, guys, please, okay, please understand, there are lots of message. Okay, if I am going to take your each and every message, it is very difficult for me to teach. Please understand guys. Right? So first, st let me teach. That's why we kept a separate doubt session.

132
00:32:40.530 --> 00:33:05.210
Sunny Savita: Okay, so while I'm teaching, I cannot answer even no one can answer. Even Chris, sir, cannot answer. Okay, so upfront guys, I'm telling to you, please don't offend. Whenever, like I'm teaching, let me teach later on. I'll take a question if I'm not able to take. In that case you can ask me in a doubt session. We kept the separate doubt session for all of you. Okay, I'm here till 2, 2 o'clock till 3 o'clock.

133
00:33:05.210 --> 00:33:15.079
Sunny Savita: even till 4 o'clock, until unless I'm not going to solve your doubt. So please, guys, please let me teach in my flow. Later on I'll take your doubts. Okay, please.

134
00:33:15.440 --> 00:33:30.300
Sunny Savita: So guys here, I capped a couple of things. But before coming to that. Okay, let's try to set up the fine phone database how to do that. Let me show you that part. So I believe, guys, you all have this code and all everything, yes or no. This one

135
00:33:31.450 --> 00:33:49.719
Sunny Savita: previous code. I hope you have downloaded inside your folder. Okay, so couple of thing would be required from the previous code itself. What would be required? We required the embedding model. Okay, so let me do one thing, guys, let me take a embedding model from my previous code itself.

136
00:33:50.020 --> 00:34:03.370
Sunny Savita: So, guys, open your previous file. The file files this one. The file from the files did file file from the files. Folder. Okay, and copy this embedding model from there. So let me do one thing.

137
00:34:03.490 --> 00:34:04.900
Sunny Savita: So let me

138
00:34:05.070 --> 00:34:28.990
Sunny Savita: copy this embedding model. So in the previous class, I was using this hugging face embedding model. You can utilize anyone any any model whether it's a Google embedding, hugging face, embedding or open a embedding like. We have shown you all the ways how to configure the different different embedding model. Right? So what I'm doing guys. I'm going to take this code. And I'm going to paste inside

139
00:34:28.989 --> 00:34:38.150
Sunny Savita: my file. Okay, so this is my pinecone file. And here I'm going to paste. Now along with it, guys, I'm going to paste couple of more things. So I'm going to paste this

140
00:34:38.440 --> 00:34:42.739
Sunny Savita: this import statement as well. Okay.

141
00:34:42.889 --> 00:34:46.259
Sunny Savita: and what I will do, guys, I'll load the variable.

142
00:34:46.409 --> 00:34:55.010
Sunny Savita: So so load the dot. Nv variable. I'm pasting over here. And then, guys, what I'm doing here, I'm going to take this Hf token.

143
00:34:55.420 --> 00:35:22.710
Sunny Savita: So this code would be required to me for running the today's code as well. Okay, because the embedding model is required. We are going to store the embedding inside the vector database. And yes, for sure, this embedding would be required from anywhere, either from the hugging face or from the open AI or from any other platform. Okay, so have you taken this code? Yes or no. May I know in the chat.

144
00:35:26.690 --> 00:35:33.690
Sunny Savita: Yes. User query also will be sent over there. If you if you will check with my previous session, then you will get that. Okay.

145
00:35:35.150 --> 00:35:38.340
Sunny Savita: perfect guys. So tell me.

146
00:35:38.993 --> 00:35:51.830
Sunny Savita: you have copied the code. That's fine. Now let me do one thing. Let me load the model at the 1st place. So I already capped my all the keys and all everything. Guys. See here my Openai key, Google, Api key, Grock Key, Hf. Token.

147
00:35:51.830 --> 00:36:11.550
Sunny Savita: And I believe you all have this key inside the dot env file. Okay, if you don't have guys, please generate a key and please keep inside your dot. Env file. Otherwise you won't be able to execute your code. So here I kept my all, the all the keys and all. Now let me do one thing, let me

148
00:36:11.690 --> 00:36:20.920
Sunny Savita: load my embedding model at least so once I will execute this code. Okay, so after executing this code, I'll get my embedding model.

149
00:36:24.540 --> 00:36:34.489
Sunny Savita: So check your bill tonight. You have shown all our key. Yeah. Later on I'll delete that. Okay, so even that Openai key I'll delete after the session itself.

150
00:36:35.530 --> 00:36:37.009
Sunny Savita: No worries about that.

151
00:36:40.250 --> 00:36:46.020
Sunny Savita: No, guys. Don't worry about me. I'll delete all the key, whatever key have shown you now over here.

152
00:36:47.300 --> 00:36:49.349
Sunny Savita: But yeah, I'm not going to share that

153
00:36:56.940 --> 00:37:11.900
Sunny Savita: copy the code. Great great guys, can we save embedding model the local as we don't have to load all the time? Yes, see, whenever you are going to be load a model from the hugging face. Now, automatically, it's going to be saved inside the cache itself.

154
00:37:11.990 --> 00:37:30.599
Sunny Savita: or we can load, using the hugging face. Api as well. That is also possible. Maybe in the upcoming session I'll show you. But if you are saying like to save it over here. That is also doable. Okay, you can save it. Using the hugging face. A snapshot. Just run the command, hugging face snapshot, and you will be able to save your model.

155
00:37:47.430 --> 00:37:52.179
Sunny Savita: Yes, you can use any embedding model. If you have open a embedding, you can use that.

156
00:37:53.560 --> 00:37:57.839
Sunny Savita: Agniba. Whatever doubts you have, we can discuss it later on. Okay.

157
00:38:02.390 --> 00:38:14.530
Sunny Savita: great, great. So I caught my embedding model here. You can see I'm able to load my embedding model. Now, what I will do. I'll take this embedding model. Okay? And I'll call one method on top of it. So embedding dot

158
00:38:14.550 --> 00:38:39.220
Sunny Savita: ambit query, so this the code or the entire code, basically regarding the embedding and all, we are already written inside the previous file itself. So let me open that. Okay, so here, guys, there was a method embed query. So whenever I'll give any sort of a query to this particular method, it will give me a embedding. So here I'm simply writing this. Hello, AI, let's see whether it is working or not.

159
00:38:40.460 --> 00:38:53.949
Sunny Savita: Yes, guys. So I'm able to generate my embedding. So this is a redundant step. I already did it in my previous session. Now let me check the length of this embedding. So guys tell me what was the length of this hugging face embedding model.

160
00:38:54.770 --> 00:38:56.580
Sunny Savita: Can anyone ping in the chat.

161
00:38:57.000 --> 00:39:02.769
Sunny Savita: I think? Yesterday we have already discussed about it. So the length of it is

162
00:39:03.310 --> 00:39:13.999
Sunny Savita: 3 84. Okay, so let me execute it and see the length is 384. So, guys would you like to configure the Google embedding? Also, should I shown you that.

163
00:39:15.260 --> 00:39:17.370
Sunny Savita: apart from this hugging face?

164
00:39:20.070 --> 00:39:20.990
Sunny Savita: Yes.

165
00:39:23.980 --> 00:39:35.440
Sunny Savita: okay, let me do one thing. Let me configure the Google Embedding also. So I'm giving you the code for that, and to configure the Google Embedding. Okay.

166
00:39:36.221 --> 00:39:38.639
Sunny Savita: what you will have to do. Let me show you.

167
00:39:38.780 --> 00:39:59.730
Sunny Savita: So I already kept the code with me, I can share inside the chat. Okay, if you can copy copy. Otherwise, do one thing, try to ride along with me. So, guys, I can give you 1 min of time. You can write this one from a Langchain Google generative, AI Google generative AI embedding and use this model.

168
00:40:00.220 --> 00:40:17.249
Sunny Savita: Okay, use this model. Now for this one also, you require the Api key. Now, which Api key is required. You require the Google, Jimny Api key or Google Api key. Okay, so let me show you how you can get the Google Api key. 1st of all, tell me, guys, is this clear or not.

169
00:40:20.240 --> 00:40:21.740
Sunny Savita: Is this one clear?

170
00:40:23.500 --> 00:40:32.720
Sunny Savita: If you're not able to call a copy from the chat as of now, forget about it. Do one thing. Try to write from here. Try to write from the cell itself. Okay.

171
00:40:45.150 --> 00:40:48.620
Sunny Savita: Ty will show you how to get the Api key from the Google itself.

172
00:40:48.920 --> 00:40:51.449
Sunny Savita: I already generated mine. Let me show you that

173
00:41:09.120 --> 00:41:14.040
Sunny Savita: this is mine. Google Api Key, I'll show you how to generate this Google Api key. Okay?

174
00:41:26.480 --> 00:41:30.520
Sunny Savita: Is it done? Can you give me a quick confirmation on the chat? If you are done, then.

175
00:41:31.250 --> 00:41:39.470
Sunny Savita: sir, your open. A key is being exposed. It is a longer text. Okay, so whatever you can see over here now, it is a half of the key only.

176
00:41:40.013 --> 00:41:46.170
Sunny Savita: so you cannot copy. If you are going to be copy this night is not going to work at all.

177
00:41:48.370 --> 00:41:49.070
Sunny Savita: Oh.

178
00:41:55.470 --> 00:41:57.730
Sunny Savita: once you are done, please do let me know.

179
00:41:59.970 --> 00:42:14.289
Sunny Savita: Okay, great. Now I hope everyone is able to write it. So let me show you the dimension of this embedding model. So how to check the dimension of this embedding model? Simply, I will write embed query, okay, and I'll give the same sentence.

180
00:42:14.590 --> 00:42:35.150
Sunny Savita: So let me write. Hello, AI over here. Hello, AI! So it will give me the dimension. Let me check. Yes, it is giving me that. It is giving me a vector. Actually. Now let me check the dimension of it. So how to do that I simply need to check out the length of it. So I can give this particular like the embed query inside the length function.

181
00:42:35.380 --> 00:42:47.129
Sunny Savita: and let's check out the length. So the length of it, guys, it is 7, 68. Okay, so this model is generating a embedding with a 7, 68 of dimension.

182
00:42:48.230 --> 00:43:17.459
Sunny Savita: How many numbers is there inside this particular list? Tell me, 7, 68 numbers. So this this particular sentence is being shown as a 7, 68 dimension. Okay, there is a 7, 68 feature which is representing to this particular. Tell me sentence, it is a sentence embedding. Now, tell me, guys, yesterday, when we were playing with the open AI, right? So what was the size of the dimension? What was the size of the vector

183
00:43:18.090 --> 00:43:35.050
Sunny Savita: the size of the vector was 1 0 2, 4, okay, up to the 3,000. If you will go and check with our open AI large embedding model. The size will be around 3 k, okay, more than that. 3, 0 6, 8 or 3 0 2, 4. You can check out the exact size.

184
00:43:35.160 --> 00:43:44.889
Sunny Savita: Now, this is clear how to load the Google model. So one more thing is spending. Let me show you how to generate a Google Api key. Okay, so we're generating a Google Api key.

185
00:43:45.496 --> 00:43:48.359
Sunny Savita: You need to search 1st of all, open your Google.

186
00:43:51.590 --> 00:43:53.110
Sunny Savita: open your Google days.

187
00:43:54.710 --> 00:43:59.790
Sunny Savita: Have you opened a browser. Yes or no. No. Right over the browser Google.

188
00:44:00.370 --> 00:44:02.240
Sunny Savita: Api, T.

189
00:44:02.420 --> 00:44:28.360
Sunny Savita: The once you will write this Google Api key. Okay, automatically, it will give you the option for generating that. See this, this is the website. So what you can do you can go through with this website if you're not able to figure out by writing this Google Api key, you can write Google AI studio. Okay? With that, also. With that, also, you will be getting a same platform. Now, once you will get it. Now just click on this console page. Go to the

190
00:44:28.700 --> 00:44:33.850
Sunny Savita: credential page or this console page. Okay. Now, once you will go through with this page.

191
00:44:34.760 --> 00:44:36.129
Sunny Savita: So let it open.

192
00:44:36.450 --> 00:44:47.170
Sunny Savita: Now, over here, guys, see my 1st project. Project. You can see this project and all. Now just click on. Okay, let me do one thing, I think it is directly redirecting to me.

193
00:44:47.910 --> 00:44:49.130
Sunny Savita: To the

194
00:44:49.490 --> 00:44:59.809
Sunny Savita: Google, comes this one Gcp itself. So let me write Google AI studio instead of that. So here, I'm writing Google AI studio.

195
00:45:02.220 --> 00:45:04.220
Sunny Savita: Just a second, wait. Yeah.

196
00:45:05.660 --> 00:45:14.832
Sunny Savita: Guys, instead of the Google Api keynote, right? Google, AI studio or wait. I'm giving you the link of it. Yeah. So, guys, here, you can see

197
00:45:15.850 --> 00:45:22.020
Sunny Savita: here, I can generate my Google Api, I'm giving you the link instead of the chat. Once you got it, please let me know.

198
00:45:22.330 --> 00:45:25.939
Sunny Savita: Did you get it? Did you get the key? Sorry did you hit a link.

199
00:45:26.240 --> 00:45:27.630
Sunny Savita: See over here.

200
00:45:28.207 --> 00:45:36.249
Sunny Savita: What it is showing to you. Google AI studio. It is a Google AI studio guys. Okay, through the Google AI studio. You can generate a key.

201
00:45:37.410 --> 00:45:42.669
Sunny Savita: Did you get it or not? Please give me a quick confirmation, so that I can show you the further process.

202
00:45:44.160 --> 00:45:54.870
Sunny Savita: Great. Now, after opening this one, you just need to click on this create Api key. Okay, so once you will click on this, create Api key, it will ask you about the project.

203
00:45:55.180 --> 00:46:03.110
Sunny Savita: So once you go click on this search. Now, automatically, you will find out one project. Okay, automatically, you'll find out one project.

204
00:46:03.340 --> 00:46:28.080
Sunny Savita: Now select the project, if the project is not available, create the new one. Right? So this is my project. Generative links in client. Let's say I'm going to select this particular project, the existing project itself, and then click on this, create Api key in the existing project. If the project is not available. In that case what you can do, you can create a 1, and then you can generate. See? Can you see my key? Yes or no? Is it visible to all of you.

205
00:46:29.090 --> 00:46:35.430
Sunny Savita: Now, using this particular key, using this particular key, what you can do, you can access the

206
00:46:35.530 --> 00:46:37.480
Sunny Savita: Gemini based model.

207
00:46:38.250 --> 00:46:59.769
Sunny Savita: But, guys, again, it is not free. This will this will give you only 15 days of access, I think 10 to 15 days of access. You can check it out. But this is this could be one of the option. We don't want to use those open source model like Llama deep seek and all. So Google could be one of the choice for you. Okay, it will generate a better answer compared

208
00:46:59.940 --> 00:47:01.489
Sunny Savita: open source model.

209
00:47:05.760 --> 00:47:10.529
Sunny Savita: great, perfect. Now let's do one thing, guys, let's try to

210
00:47:10.810 --> 00:47:35.660
Sunny Savita: start with the pinecone setup. I hope you got the key and all everything. So 1st of all, if we want to like configure the pinecone. We required couple of more thing. Okay? So we'll have to create a pinecone client. So for creating a pinecone client, let me import the pine cone. If you don't have pinecone guys inside your system, you will have to download that. Okay. So here I'm writing

211
00:47:35.860 --> 00:47:47.520
Sunny Savita: from okay guys right along with me, I'm writing today. I'm going very, very slow. Okay, you can do along with me. So here I'm going to write from pine cone. Okay.

212
00:47:47.760 --> 00:47:49.040
Sunny Savita: import

213
00:47:51.130 --> 00:48:04.610
Sunny Savita: PIN code right and then execute it. Guys, if you don't have this particular package, so you will have to install that right. See? It is saying pine cone is not available inside my

214
00:48:05.130 --> 00:48:33.269
Sunny Savita: environment. Okay, so how to install this pine code? It is very, very easy. So let me give you a couple of package. Which sorry. Let me give you the name. The 1st name, basically guys Langchin. The second name is Langchin Pine Cone. Okay, this both you will have to be installed. There's both package Langchin and the lengthen pine cone. So what I'm doing I'm just going to keep this particular package where inside my requirement txt.

215
00:48:33.280 --> 00:48:52.280
Sunny Savita: So here, let me keep it, guys inside my recontxt. I think you already have a link chain. So land chain is not required to you, which I believe so just required one package. That is link chain, hyphen, pinecone. Okay, so guys here, what I'm doing. I'm going to write. Pip installed.

216
00:48:53.030 --> 00:48:54.570
Sunny Savita: hit, install.

217
00:48:55.530 --> 00:49:16.680
Sunny Savita: And then copy this link, chain, pinecone. Okay, as of now don't run again the requirement txt. It will take a time again to recheck the entire package and all. So better, you can download the package individually. Okay, that would be a great choice. So if you're going to install the single package, you can download it individually, also through the console itself.

218
00:49:16.720 --> 00:49:28.530
Sunny Savita: So right click, install PIN code and then run it, guys. So after doing it, see, my PIN code is getting installed inside the current virtual environment. Are you doing this thing or not? Tell me, yes or no.

219
00:49:29.820 --> 00:49:31.780
Sunny Savita: and how the session is going on?

220
00:49:33.020 --> 00:49:41.999
Sunny Savita: Do? Are. Are you liking the session, guys? Yes or no? Tell me you you can mention the chat. If you are able to install the package and all everything.

221
00:49:45.480 --> 00:49:50.679
Sunny Savita: You haven't enabled the virtual environment it was already enabled for me. Here, see this one

222
00:50:01.410 --> 00:50:03.100
Sunny Savita: great, perfect. Okay.

223
00:50:05.290 --> 00:50:14.340
Sunny Savita: So here, guys, what I did. I installed the pinecone package. Now, after installing pinecone, I can again check whether I'm able to import it or not.

224
00:50:14.450 --> 00:50:16.979
Sunny Savita: So here, just a second.

225
00:50:18.630 --> 00:50:21.679
Sunny Savita: Let me re-execute this one.

226
00:50:28.060 --> 00:50:30.399
Sunny Savita: Okay, so I'm able to import it.

227
00:50:32.230 --> 00:50:37.049
Sunny Savita: Tell me, guys, is it fine for all of you? Are you able to import this one or not

228
00:50:38.490 --> 00:50:42.859
Sunny Savita: check out with the correct this one environment.

229
00:50:42.990 --> 00:50:47.570
Sunny Savita: Are you installing in a current environment or not? Sarat Kumar, Saratkar? Okay.

230
00:50:48.460 --> 00:51:15.080
Sunny Savita: great. So we are able to import the pinecone. And I hope so. This is clear to all of you. Now what we have to do after installing the pinecone guys. So, after installing a pinecone, we have to create a client. Okay, we have to create a client for the pinecone. So how to do that. Let me show you that part as well. Now for creating a client guys, we require the Api key. Okay, so first, st I'm going to do one thing I'm going to write over here. PC. Equal to.

231
00:51:15.130 --> 00:51:34.169
Sunny Savita: And here I will write pinecone. Okay? And what I will provide. I'll provide my Api key over here. Which Api key pinecone Api key. Now, how I will get this pinecone Api key. So for that, guys what I will do. I'll take this pinecone Api key from the dot env itself. So here I'm writing. OS, dot

232
00:51:34.280 --> 00:51:41.970
Sunny Savita: get env, and I'm going to write Mike key name pine corn.

233
00:51:42.260 --> 00:51:44.160
Sunny Savita: Underscore Api

234
00:51:44.580 --> 00:52:10.289
Sunny Savita: underscore key. Okay, so guys tell me once I will execute this one. Will I be able to get my Api key? Tell me, yes or no? No, I will not be able to get my Api key because I haven't capped inside the dot env file. So 1st of all, what I will have to do, guys tell me so I will have to keep my Api key inside the dot env. So let me show you how to generate a key Api key from the pine cone itself.

235
00:52:10.430 --> 00:52:17.591
Sunny Savita: So for that. You will have to open your browser guys and over the browser again open your

236
00:52:18.220 --> 00:52:23.500
Sunny Savita: search engine. And right over here. Pinecone. Api key. Okay. Pinecone.

237
00:52:23.660 --> 00:52:33.969
Sunny Savita: Api key. Now, once you will write this fine cone Api key. Okay, you will get an option for generating a key. So let me do one thing. Let me open that

238
00:52:34.350 --> 00:52:57.870
Sunny Savita: this is the link, guys, this one for the pinecone. And don't worry. I'll come to each and everything, each and every theoretical like doubts and all everything. So this is the like URL guys, you can go through with this particular URL, and you can generate an Api key from here. So how you will get the Api key click on this one pinecone console. Now, once you will click on this pinecone console guys. Just click on this pinecone console.

239
00:52:58.010 --> 00:53:02.279
Sunny Savita: You will get an option for generating Api key. Okay, wait. It is coming.

240
00:53:03.870 --> 00:53:07.699
Sunny Savita: or maybe left hand side somewhere they have given here. Only.

241
00:53:08.222 --> 00:53:37.369
Sunny Savita: wait, guys, I'm going to open the pinecone console. Pinecone is free and paid. Both option is available free as well as the paid. Yeah guys. So once you will click on the pinecone console. Now, it will ask you for the login. So better, guys, if you can log if you can log in with your Gmail Id. Now, just click on this. Continue with the Google. Okay. Now select any of the Id. Whatever. Gmail id you have now, once you will click the Gmail click on the Gmail Id automatically it will redirect into you or the dashboard itself. Okay.

242
00:53:39.930 --> 00:53:43.030
Sunny Savita: how many of you you are doing along with me? Guys tell me.

243
00:53:48.150 --> 00:53:59.309
Sunny Savita: okay, now, guys, after after clicking on that sorry after logging in after the sign in what you have to do, you will get this kind of page. Are you getting this page or not?

244
00:54:00.580 --> 00:54:02.299
Sunny Savita: Are you getting this page or not?

245
00:54:02.970 --> 00:54:23.499
Sunny Savita: So pinecone is not completely free. It will give you the Enterprise version. Also, it will give you the enterprise. Variant also. Okay. But the freely, actually, we can create at one project. And we can create couple of indexes inside the project. Okay, so we are just testing it as of now. Just try to learn the thing. So yeah, it will give you the one project

246
00:54:23.550 --> 00:54:40.690
Sunny Savita: freely. Now, what I can do, I can click, click on this default, and once I will click on this default project so left hand side. Here you can see this Api key option. Now click on this Api key, and you will be able to generate your Api key guys. So how many of you you are able to navigate to this page?

247
00:54:44.400 --> 00:54:45.370
Sunny Savita: Done?

248
00:54:47.170 --> 00:54:56.559
Sunny Savita: Okay, what I will do, guys. So here, I'll create the Api key. I'll click on this. Create Api key, and I will write a name. So my name is going to be. Let's say, Agentic

249
00:54:57.010 --> 00:54:59.430
Sunny Savita: AI, 2 point. O,

250
00:54:59.620 --> 00:55:26.100
Sunny Savita: so this is the name. 2.0 or agent ticket. Now, once I'll write a name and I'll click on this create Api key. So see, guys, this is my Api key. If I want to check I can simply click on this. So key value, I will get my value, or else directly I can copy from here. So once I will copy guys the call, the key will be with me, and what I can do, guys, I can paste it inside my dot env

251
00:55:26.320 --> 00:55:34.420
Sunny Savita: fine. Okay, so here, what I'm doing, I'm just going to paste it inside a dot env file just a second. Let me keep it over here.

252
00:55:35.090 --> 00:55:47.960
Sunny Savita: And, guys, I'll give the name. The name is going to what the name is going to pine cone. Api key. Okay, this would be the name of the variable. So here, what I did, I just created Api Key and I captured inside the variable.

253
00:55:48.530 --> 00:55:54.579
Sunny Savita: Okay, now, if I will execute this one now, if I will execute this code, I'll see you guys.

254
00:55:56.020 --> 00:56:00.240
Sunny Savita: I'm getting my key or not. Okay. So 1st of all, I will have to load my variable again.

255
00:56:00.540 --> 00:56:10.809
Sunny Savita: Load the variable just a second. Let me reload the variable. Okay, wait yeah, this way.

256
00:56:11.420 --> 00:56:18.009
Sunny Savita: So after reloading the variable, if I'll execute this this code now, okay, get Api key.

257
00:56:20.240 --> 00:56:27.330
Sunny Savita: Can you see the key or not? Is it visible to all of you thermigrants.

258
00:56:28.760 --> 00:56:30.220
Sunny Savita: Is it perfect?

259
00:56:35.310 --> 00:56:46.550
Sunny Savita: Okay. Now, I'm giving you 1 min of time so that you can take this key. Okay, you can. You can generate this key. And then, basically, we'll write a further code. Okay.

260
00:56:55.860 --> 00:57:05.559
Sunny Savita: if you're getting this pinecone error that please install langchain pine cone package sumit. And please make sure if you are going to be, install it inside a current virtual, the correct virtual environment.

261
00:57:08.020 --> 00:57:12.590
Sunny Savita: Please clear the output. Yes, that is a good. That's a good idea. I can delete this one

262
00:57:12.820 --> 00:57:27.299
Sunny Savita: now, I can simply take this fine cone key, and I can paste it over here. Now, guys, what I created, I created my pinpoint client. Okay, once I will execute it. Guys. Here, see what I created. I created my pinecone client.

263
00:57:27.490 --> 00:57:31.319
Sunny Savita: Is it a perfect. Are you able to create it or not?

264
00:57:46.950 --> 00:57:47.880
Sunny Savita: Okay.

265
00:57:53.400 --> 00:57:58.589
Sunny Savita: no worries. I'll you can share the screen like in a doubt. Slide. Doubt session. Okay.

266
00:57:59.850 --> 00:58:01.669
Sunny Savita: organ, dot txt, please.

267
00:58:02.480 --> 00:58:09.220
Sunny Savita: Here, we just need to mention this length in pine call. I'm giving you the package inside the

268
00:58:10.140 --> 00:58:13.670
Sunny Savita: chat itself. Okay, all the packages you can check

269
00:58:14.000 --> 00:58:18.829
Sunny Savita: with your recon dot txt dot env also. Yes, here is a dot env.

270
00:58:19.730 --> 00:58:29.220
Sunny Savita: So if you want to access the Google model, you will have to mention the Google Api key. If you want to like connect with the pinecone, you will have to mention the Pinecone Api key.

271
00:58:29.820 --> 00:58:39.810
Sunny Savita: Now, guys, once you are done with the pinecone client creation, this client PC, this one this with this particular code, please. Okay, I'll proceed further.

272
00:58:41.070 --> 00:58:44.800
Sunny Savita: Yeah, I'm giving you 1 min of time. Then I will go ahead.

273
00:58:50.620 --> 00:58:55.580
Sunny Savita: Ravi, please. Okay, guys. So let me teach in my pace. And I think I'm going? Well.

274
00:58:56.050 --> 00:59:04.160
Sunny Savita: okay, so do this thing. Do that thing. Someone is saying. So do that. Do this, do that. See? Like this, the class is not going to be happen. Okay.

275
00:59:04.380 --> 00:59:09.540
Sunny Savita: let me teach in my flow at the end everything you will get whatever you require.

276
00:59:19.870 --> 00:59:23.850
Sunny Savita: Yeah, I know, Robb, you are very intelligent. Okay, you know everything. I know this thing.

277
00:59:24.580 --> 00:59:35.109
Sunny Savita: If you know, then in that case, later on you can revise with the live sessions and all while watching the live session, recording each and every OP. Like, option is available for all of you guys. Right?

278
01:00:08.830 --> 01:00:12.250
Sunny Savita: Okay, why, this client is required. We'll come to that.

279
01:00:12.410 --> 01:00:21.329
Sunny Savita: So once you are done, guys let me know. Okay, I think everyone is done. So let's try to discuss some theoretical points. And then again, I will come to this fine call. Okay?

280
01:00:21.420 --> 01:00:45.269
Sunny Savita: So I kept some theoretical point for all of you, so that your concept could be revised from the previous class as well as you can understand the couple of more names with respect to the databases, and we can discuss something about the multi modality and all. Okay, so is my screen visible. Can you can you tell me, guys, if you can see this black canva? Yes or no?

281
01:00:45.700 --> 01:01:11.349
Sunny Savita: Is it visible? Right? Okay? So let's try to discuss couple of theoretical points over here. The 1st thing. Let's try to understand the differences between the different different type of databases. Okay? In how many ways, actually, we can configure the database. So the 1st thing is the local one, I think you know. Local. Yes, in the previous session itself. I discuss about that. Okay, give me a moment.

282
01:01:14.440 --> 01:01:15.330
Sunny Savita: Yeah.

283
01:01:15.550 --> 01:01:18.150
Sunny Savita: So where it went.

284
01:01:20.920 --> 01:01:44.630
Sunny Savita: So the previous session itself I discuss about it the local, how you can like, create a local one which can be done inside your server. Okay, or via Docker. Also, you can execute that. And we have seen the example of the files means in memory itself. We can run it in memory means we can run inside our RAM, we can load it inside our memory itself.

285
01:01:45.170 --> 01:01:46.220
Sunny Savita: Okay.

286
01:01:46.280 --> 01:01:56.920
Sunny Savita: but the drawback of it, the drawback is the whenever we are going to be lost the memory. Okay? Are all the record is going to be destroyed. The second thing was the inner memory in memory means what

287
01:01:56.920 --> 01:02:23.579
Sunny Savita: in memory means store the data, not only in the RAM data will be available on your disk. As sorry a local means it will be available on your disk in memory means it will be available only inside your RAM. So whenever the system is going to be stopped, in that case the data is going to be lost. Okay? And local means. You can purchase the file, the physical file inside your like the inside, the physical location

288
01:02:23.877 --> 01:02:46.219
Sunny Savita: yesterday I created the files index. If you remember that. Okay, now, the next one is the cloud host. So guys today, actually, what we are going to learn, we are going to learn about this cloud host. So cloud host means, we are not going to be configure this thing inside the local our data. Basically, it won't be available inside the local system. Rather it will be available somewhere over the cloud.

289
01:02:46.220 --> 01:03:08.789
Sunny Savita: Okay? So rather it will be available somewhere. The cloud. Now, if you're talking about the cloud hosted database. So, guys there are so many vendors. Pine cone, is there? Quadrant, is there? Is there millers? Is there even the different different other clouds like aws, azure, vertex, or sorry. This Google. Okay, they provide you the different different platform for keeping the data over the cloud.

290
01:03:09.010 --> 01:03:35.319
Sunny Savita: I hope you are getting my point now. Why, why this cloud database is required? We can configure this vector database in our local right? What's the need of. What is the need of this cloud? One? Why, we need to like, keep the data data over the cloud. So let me give you that answer as well. So here I written couple of points, if if you will like a read this particular points, so maybe most of the thing is going to be clear.

291
01:03:35.350 --> 01:03:46.379
Sunny Savita: The 1st thing is, it is useful for the experiment. See, whenever we are talking about the local vector database where you are going to be. So the database, basically, which you are going to keep in your local

292
01:03:46.800 --> 01:04:01.190
Sunny Savita: local means on your local server. This could be anything right. It could be a local system, or anywhere whatever local system you are going to be used. So it is just for the experiment. It is just for the development or just to create a prototype

293
01:04:01.290 --> 01:04:10.939
Sunny Savita: that said guys, right? Nothing apart from that. But guys, whenever you have to create a production grid system, in that case you cannot create that local database.

294
01:04:10.940 --> 01:04:35.739
Sunny Savita: You cannot just keep the data inside your local on onto your local server. In that case you will have to keep your data over the cloud itself. Okay, so needed for production system. If you are going to talk about the cloud if you are going to be configured. The database any vector database over the cloud like pinecone web aws, open search as your AI search. Right? So in that case, guys, we are going to be create a production

295
01:04:35.740 --> 01:04:57.160
Sunny Savita: grid system. Okay? Then, only it is required. I written couple of points over here like scalability, high availability. Okay, Multi user. And the team access real time updates monitoring and backup. Right? So these are some points basically which we need to consider. While we are going to be host our database over the cloud.

296
01:04:57.160 --> 01:05:22.029
Sunny Savita: Maybe they can ask you the interview that why we have to keep our data, why we have to configure any cloud based or vector database. So you can discuss a couple of points over here. Right? So you can simply say, whenever we are talking about the local one. So that is just for the experiment of the dev. Okay, and just to create a prototype. But whenever we have to create a production gate and the scalable system. In that case we'll have to configure our database like either of the cloud

297
01:05:22.030 --> 01:05:30.500
Sunny Savita: using either of the cloud, or whether it's aws azure or well, or it's a 3rd party vendor like Pinecone baby 8. Quadrant, and all

298
01:05:30.500 --> 01:05:33.690
Sunny Savita: understood. Is this thing clear or not? Tell me

299
01:05:35.460 --> 01:05:37.999
Sunny Savita: this theoretical point is clear. Yes.

300
01:05:38.680 --> 01:05:58.069
Sunny Savita: okay. So you can read out this one from your end, and you will get a more clarity. Now, coming to the next one over here. So guys, whenever we talking about the different different type of data, okay, the different different type of configuration. So whether it's a in memory configuration, or it's a local persistence.

301
01:05:58.160 --> 01:06:12.450
Sunny Savita: or it's a cloud hosted one. Right? So let's try to discuss couple of more point. And with that maybe you might get get some clear idea. So if talking about the data survive while we are going to be restart. So in memory, it's going to be lost.

302
01:06:12.470 --> 01:06:33.239
Sunny Savita: Okay, in local persistence, whenever we are going to be saved, that our database is a local file, physical file, it would be there over the cloud. It would be there now, if you're talking about the scale scale across the node scaling part. So in memory we cannot scale local, persistent. It is a limited one. But over the cloud we can scale that.

303
01:06:33.240 --> 01:06:54.509
Sunny Savita: Okay? So that's why we need to use any dedicated cloud or or host, right? Whether it's the aws or azure, or even the Gcp database is also there, the vertex, a vector database, or we can use any 3rd party vendor like pinecone, as I told you. Okay, coordinate is also there. Millbus is also there.

304
01:06:54.740 --> 01:07:04.279
Sunny Savita: That is a different different name you will find out. And even some of the no SQL databases, also providing you the support of the vector storage and all

305
01:07:04.280 --> 01:07:31.219
Sunny Savita: like Mongodb and the data stack and all. Now, our team access, I think, it will be in your local. So we cannot do it. But yeah, over the cloud. Your other team member can also access the one database. Okay, easy integration. How to integrate that. So yes, in the lunch, and everything is possible whatever, in whatever way you want to configure. So for this one in memory, local one, you will have to simple, install the module, the required module, like files we have installed yesterday.

306
01:07:31.320 --> 01:07:59.830
Sunny Savita: You can install the chroma. dB for chromadb. And we're talking about the cloud hosted guys. So some more thing will be required along with the SDK, so we have installed the pinecone. And along with that we have a configure, the Pinecone Api key also. Okay. So whenever we have to configure the database over the cloud, we required some additional configuration. Now use case fit. It is for the small. Okay, it is for the dev and the poc, and whenever we are talking about the cloud hosted one. So it is, for the production is scale

307
01:08:00.070 --> 01:08:07.210
Sunny Savita: clear guys, are you able to understand this particular points or not? Tell me, yes or no, it's getting clear to all of you.

308
01:08:09.280 --> 01:08:29.550
Sunny Savita: Yeah. See, in some cases you can configure the files. Chroma. dB, means in memory, and the local persistent database. Also for any sort of a production like, the environment, okay for any production get application. But again, guys, I'm saying, generally, we prefer the cloud ecosystem. The cloud hosted databases only right

309
01:08:29.960 --> 01:08:43.430
Sunny Savita: if it is going to be clear guys all these 3 points the 1, st one, second one, the 3rd one. You can let me know. I can proceed further, and I can discuss couple of more thing. So this all the points why I capped so that you can talk in an interview.

310
01:08:43.950 --> 01:08:55.329
Sunny Savita: We can discuss these all the thing in an interview. Okay. Now, coming to the next part. So over here, guys, we're talking about the next one. So

311
01:08:55.550 --> 01:09:02.369
Sunny Savita: I kept couple of name. We have a files. So files guys tell me, files gives you the local support.

312
01:09:02.600 --> 01:09:08.120
Sunny Savita: Tell me, yes or no files gives you the local support. Right? Yes, cloud hosted

313
01:09:08.640 --> 01:09:25.910
Sunny Savita: files is available over the cloud as well. No files is not available over the cloud. Okay, now, we're talking about the Quadrant guys. Quadrant, is there? Local as well as the cloud? Okay, Vb is available. Yes, local as well as the cloud. Now tell me, guys, pinecone

314
01:09:26.930 --> 01:09:56.100
Sunny Savita: pinecone is don't provide you the local support. Okay, pinecone is only available over the cloud. Pinecone does not provide you the local support. Now, talking about the Milwauce Milwauce. Yes, local and cloud variant is also available. Chroma guys. It is similar to the files. You cannot configure it over the cloud. It is only available inside the local itself. So there is a couple of name. Okay? But guys there are so many databases.

315
01:09:56.550 --> 01:10:02.710
Sunny Savita: Let me show you one page. Okay. Here, we can check the comparison between the different different databases.

316
01:10:07.110 --> 01:10:13.609
Sunny Savita: Guys tell me, is, this, notes is helpful or not. If we are going to be show you this the well structured notes.

317
01:10:14.070 --> 01:10:23.440
Sunny Savita: So maybe like with that easily. You can revise the concepts and all. But tell me, guys, can you see this particular page? Yes or no?

318
01:10:27.230 --> 01:10:28.510
Sunny Savita: Is it visible?

319
01:10:30.410 --> 01:10:31.879
Sunny Savita: Give me a second guys. Okay.

320
01:11:21.260 --> 01:11:25.519
Sunny Savita: okay, perfect guys. So Ca, can you, the can you see this particular page

321
01:11:25.830 --> 01:11:40.539
Sunny Savita: here? They have given you the com, the comparison of the different different databases. So it's a website name superlink.com. And they have given you the comparison of the different different vector databases. So you can see all the vector database name over here

322
01:11:40.820 --> 01:12:03.400
Sunny Savita: and there is around 50 to 60 name. And they have compared this vector databases. Okay, based on the different different parameter. So guys see, there are lots, many vector, database. And it is not possible to teach each and every vector, database. But whenever we have to see the comparison like, which database is capable for what? Easily we can look over here. Okay, so what you can do, guys.

323
01:12:03.550 --> 01:12:31.789
Sunny Savita: you can check out with this particular page you can look into the different different parameter of it. Right oss license, and then dev language the Vss launch. Then, regarding the search, you can see the filter hybrid search facet is there. Geo, search. Multi, vector, okay. And there are lots, many parameter. Bm, 25 is one of the algorithm. It's updated version of the Tfidf algorithm. Okay, so it is, it is for the token based filtering.

324
01:12:31.790 --> 01:12:54.460
Sunny Savita: So we use this vm, 25 for the token based filtering. If you want to know about it now, you can simply check out with my Youtube channel. I already created a video about this. Vm, 25 re-ranking retriever. And all right, oss means where? Basically, it could be operate. Right? So code base is open source and use can user can self hosted it for free

325
01:12:54.460 --> 01:13:11.340
Sunny Savita: right means can you call? You can configure in local or as well as over the cloud, or at both places it is available. So it is regarding the availability. Now, part is, you will find out some other parameter. Also. Let me show you the other parameter. There is a model also. Okay, so

326
01:13:11.490 --> 01:13:32.199
Sunny Savita: model is also there. So what our model and the different different model is basically being supported okay by the databases. So here they have given you that particular section as well. And let me show you that one once you will scroll. Once you will slightly like, move the mouse, you will find out the different other option.

327
01:13:32.250 --> 01:13:56.569
Sunny Savita: So model wise, you can see image, model or image text model. And the different other model. Api, wise. Okay, what? All in what all framework is being supported by by which vector databases? Right? So let's take example of this chroma. So chroma, chroma, chroma, just check. See, link and support is there, and lama index support is also there for this Api for this chroma. Database

328
01:13:56.570 --> 01:14:20.579
Sunny Savita: ops part basically means where you can deploy the pricing and all everything. Right? So here you can see this different other parameter manage pricing in process, multi tents disk index. So, guys, you can just go through with this particular page, and you can take one like the high level overview of all the vector databases. And you can, basically compare it based on the different different parameter.

329
01:14:20.580 --> 01:14:34.569
Sunny Savita: Okay? And if you have any sort of a doubt further. You can discuss with me. We can talk about it now. Once you will scroll down, you will get around. See? I think most of the vendor over here. So chroma is there. See? Us

330
01:14:34.570 --> 01:14:59.280
Sunny Savita: is also here. Okay, elastic search is here. Data stack is here. Now, apart from see Gcp vector, database. Vertex vector, database is here. Lens. Database is here. Okay. Mongodb is also here. Neo forge is here. Pg, is here. Even this Westfa is there with it? Is there pine cone? Is there? Okay? So every sort of a database you will get over here.

331
01:14:59.720 --> 01:15:00.810
Sunny Savita: Understood.

332
01:15:01.120 --> 01:15:02.250
Sunny Savita: Yes or no.

333
01:15:02.420 --> 01:15:05.410
Sunny Savita: Will you go through with this particular comparison or not?

334
01:15:06.200 --> 01:15:29.950
Sunny Savita: Great guys now coming to the next part? So let me discuss all the theoretical point. Then I'll give you the break. And finally, we'll start with the further practical implementation and all. Okay, so could you copy, paste the link to the Pdf notes. Yes, I kept it over here. By you, or you can directly access from this page itself. Okay, once I will share this thing as a entire Pdf, you can access all the link and all.

335
01:15:29.950 --> 01:15:51.700
Sunny Savita: I think, vector, database comparison. Yesterday, we have shown you this link vector, database comparison. So lengthen also gives you the comparison like table. But it is not in a very detailed manner. Okay, so this link over this particular page, you will find out, like a most of the vector, database, along with the detailed comparison, got it now, coming to the next part.

336
01:15:51.760 --> 01:16:16.210
Sunny Savita: So over here, guys whenever we talk about the different different databases. Okay? So we can simply check out whether it's supposed to local, or it is all. Only over the cloud hosted. And all right. So everything, basically, we can check. And we can see now, guys, one more thing I capped over here in the table itself. I think yesterday someone was asking to me this particular question in the doubt.

337
01:16:16.210 --> 01:16:27.539
Sunny Savita: So that's why this thing came in my mind. Okay, and I kept it over here. You know, guys, yesterday we discussed about the exact match and the appropriate, approximate nearest neighbor.

338
01:16:27.670 --> 01:16:28.730
Sunny Savita: Yes or no.

339
01:16:29.300 --> 01:16:39.650
Sunny Savita: Yes, yesterday we discuss about this thing. So guys see? Let let me explain you this part. So I'm going to open my blackboard. Okay.

340
01:16:42.390 --> 01:16:44.640
Sunny Savita: let me revise this concept also.

341
01:16:45.960 --> 01:16:52.679
Sunny Savita: So whenever we talk about the vector database guys for storing your data, let's say, we have a data over here.

342
01:16:53.140 --> 01:16:58.970
Sunny Savita: Okay, now, this data will store where

343
01:17:00.330 --> 01:17:07.439
Sunny Savita: this data are basically will store instead of vector data bills. Okay? So we'll do the chunking of it

344
01:17:08.270 --> 01:17:14.309
Sunny Savita: if required, then only we'll do the chunking. Otherwise we'll skip it and then we'll do the embedding.

345
01:17:16.360 --> 01:17:17.280
Sunny Savita: Okay?

346
01:17:17.890 --> 01:17:22.759
Sunny Savita: And after doing it, guys see, once we'll do the embedding now.

347
01:17:22.950 --> 01:17:27.030
Sunny Savita: So we'll store this thing in the form of document.

348
01:17:29.950 --> 01:17:33.730
Sunny Savita: Okay, now, instead of document, there will be a page content.

349
01:17:37.380 --> 01:17:39.550
Sunny Savita: Then there will be a metadata.

350
01:17:41.990 --> 01:17:44.419
Sunny Savita: and my embedding will be available

351
01:17:45.230 --> 01:17:48.679
Sunny Savita: embedding regarding what embedding regarding the

352
01:17:49.560 --> 01:17:57.350
Sunny Savita: page content. Okay, now, guys, this document would be available here. This document would be available inside the

353
01:17:57.860 --> 01:18:06.749
Sunny Savita: vector database. Okay, so for storing this data inside the vector database, what we do, we create a m, we create an index.

354
01:18:07.180 --> 01:18:10.080
Sunny Savita: Okay, so this is my index guys.

355
01:18:11.040 --> 01:18:14.509
Sunny Savita: You can see you can assume this is my intent.

356
01:18:17.270 --> 01:18:20.430
Sunny Savita: Now, this index could be anything right.

357
01:18:20.590 --> 01:18:24.840
Sunny Savita: This index could be flat index.

358
01:18:26.280 --> 01:18:27.820
Sunny Savita: Let me write over here.

359
01:18:29.030 --> 01:18:31.240
Sunny Savita: This index could be flat index.

360
01:18:38.400 --> 01:18:39.990
Sunny Savita: Give me a moment. Yeah.

361
01:18:40.300 --> 01:18:46.390
Sunny Savita: So this index could be flat index. This index could be Hnsw.

362
01:18:46.640 --> 01:18:51.250
Sunny Savita: Which is the graph based index, or it could be the cluster base index, the Ivr. One.

363
01:18:51.440 --> 01:18:59.969
Sunny Savita: And there is a different different variant inside the Ivf and the Hn. SW. And all. Now we're talking about the flat index. So there we do the exact search.

364
01:19:02.890 --> 01:19:03.760
Sunny Savita: Okay?

365
01:19:03.870 --> 01:19:10.310
Sunny Savita: And if we're talking about these 2 indexes. So there we do the approximate search.

366
01:19:16.960 --> 01:19:24.470
Sunny Savita: Okay. Now, guys, my data is all available over here. My document is available inside my index. Okay.

367
01:19:24.800 --> 01:19:28.970
Sunny Savita: here I have a document that could be multiple document and number of document.

368
01:19:29.700 --> 01:19:33.560
Sunny Savita: Now, whenever the query will come to this vector database.

369
01:19:39.040 --> 01:19:44.120
Sunny Savita: okay, we'll perform the similarity search. We'll convert this query into the embedding.

370
01:19:48.110 --> 01:19:52.550
Sunny Savita: Okay? And we'll perform the similarity. Search right?

371
01:19:52.980 --> 01:19:54.220
Sunny Savita: Similarty

372
01:19:57.440 --> 01:19:58.280
Sunny Savita: suck.

373
01:19:59.040 --> 01:20:03.730
Sunny Savita: Now, this similarity, such technique could be anything. It could be cosine similarity.

374
01:20:04.250 --> 01:20:07.620
Sunny Savita: It could be dot product, simple dot product.

375
01:20:07.970 --> 01:20:10.010
Sunny Savita: It could be. L, 2 distance.

376
01:20:10.720 --> 01:20:22.280
Sunny Savita: right? And guys will match with. See? Whenever we discuss whenever we talk about the X flat one in the flat one. Actually, we navigate to each and every document.

377
01:20:25.770 --> 01:20:33.510
Sunny Savita: Okay, and whenever we navigate to each and every document we try to find out. We try to fetch some K top K document.

378
01:20:34.560 --> 01:20:39.120
Sunny Savita: yes or no. So I told you this case. Nothing. It's a hyper parameter.

379
01:20:43.740 --> 01:20:44.660
Sunny Savita: Okay.

380
01:20:44.800 --> 01:21:05.129
Sunny Savita: so this K is nothing. It's a hyper parameter. So, guys, this K could be anything. This K could be 2, this K could be 3. This K could be 4, 5, 1020, 50. Whatever number you want to write. Okay. Now, guys, whenever we perform the similarity search and we go through with each and every document.

381
01:21:05.790 --> 01:21:11.680
Sunny Savita: Okay, and we find out the top K value top K number. So this is called K, and n.

382
01:21:13.170 --> 01:21:19.659
Sunny Savita: okay, that is a specific term for this was Kn. I yesterday I missed that part. That's why I'm revising it today. Okay.

383
01:21:20.000 --> 01:21:26.980
Sunny Savita: now, whenever guys see now my just assume with the different flow. Let's say my query came, okay.

384
01:21:27.320 --> 01:21:31.029
Sunny Savita: we perform the similarity search between document.

385
01:21:31.170 --> 01:21:40.169
Sunny Savita: Now, this time I don't. I haven't created a flat index, either. I created a Hnsw index or I created the Ivf index.

386
01:21:40.560 --> 01:21:53.210
Sunny Savita: Okay, now, what will happen? Guys? See, we are not going through with each and every document. No, we are not doing it. We are not doing it either. We are taking a graph based approach. So here, actually, we take a graph based approach.

387
01:21:54.420 --> 01:21:57.170
Sunny Savita: And here we take the cluster based approach.

388
01:21:58.740 --> 01:21:59.660
Sunny Savita: Right?

389
01:22:00.510 --> 01:22:04.450
Sunny Savita: Got it? Okay? Means we have a query.

390
01:22:04.650 --> 01:22:07.400
Sunny Savita: We are going to be embed. This particular query

391
01:22:07.700 --> 01:22:17.580
Sunny Savita: we are going to perform the similarity search. But this time it is not a flat index. We are not doing a exact match. What we are doing. We are doing a approximate match

392
01:22:17.980 --> 01:22:44.180
Sunny Savita: means we are not going through with each and every document we are creating. We are using some shortcut, we are using some shortcut technique or some enhance technique like graph based and cluster. Right? And what we are doing, we are doing a approximate search. Okay? And after the search. Also, guys, we'll get some K document. This K number could be anything, anything. K, 1, 2, 3, 4, 5, something. Right? So in that case, guys, this is called Ann.

393
01:22:44.920 --> 01:22:45.900
Sunny Savita: Okay.

394
01:22:46.320 --> 01:23:05.160
Sunny Savita: so one is Knn. It is with respect to this flat index mean the exact match, and whenever we are going to be, use this approximate in match index, right? This Hnsw. Or Ibf. In that case, this K. Number, whatever K value we are going to be retrieved, that is called that is called like through the Ann itself.

395
01:23:05.160 --> 01:23:17.870
Sunny Savita: We are going to be a fetch this particular value, using the can. Sorry using the Ann. Okay. So let me revise this particular thing. So, guys, we have 2 type of index. One is the flat index.

396
01:23:18.750 --> 01:23:22.069
Sunny Savita: Okay, there we do the exact match.

397
01:23:22.790 --> 01:23:24.110
Sunny Savita: Exact match.

398
01:23:24.820 --> 01:23:32.630
Sunny Savita: Okay? And the second type of index is called Hnsw or Ivf and text.

399
01:23:32.890 --> 01:23:38.319
Sunny Savita: There we do the matching, using the graph technique.

400
01:23:39.010 --> 01:23:43.190
Sunny Savita: And here we do using the cluster technique.

401
01:23:45.730 --> 01:23:55.519
Sunny Savita: Okay, now, in both cases, we are going to fetch K document after the similarity search. Okay.

402
01:23:55.770 --> 01:23:57.250
Sunny Savita: K, is equal to N,

403
01:23:57.610 --> 01:24:16.249
Sunny Savita: and this and could be anything. This and could be 1, 2, 3 up to anything. Here also, in this particular technique, also, we are going to fetch the and number of document. Okay, so this K is equal to. And here also, if we are going to use this particular indexing here also, we are going to fetch the

404
01:24:17.560 --> 01:24:24.469
Sunny Savita: and document. Okay? And this item could be anything. Again, I'm saying it could be like 1, 2, 3,

405
01:24:25.010 --> 01:24:35.499
Sunny Savita: 1, 2, 3 up to whatever. Okay. So guys this technique, this flow right? It's called Knn. There is a specific name for it.

406
01:24:35.910 --> 01:24:45.369
Sunny Savita: K, nearest neighbor with the exact match. And this particular flow, guys, this is called Ann, approximate, nearest neighbor.

407
01:24:45.680 --> 01:24:49.269
Sunny Savita: Now, did you understand the difference between this Knn and Ann?

408
01:24:49.510 --> 01:24:55.400
Sunny Savita: Yes or no? Is it clear or not? Yes, yes.

409
01:24:57.060 --> 01:25:07.189
Sunny Savita: I want yes or no inside the chat guys. So how the session is going on. Whatever I'm teaching, whatever I'm explaining. Are you able to understand or not that particular part.

410
01:25:07.740 --> 01:25:20.929
Sunny Savita: because I'm trying to discuss each and every detail so that you won't face any sort of like the problem in an interview while you are giving an interview and all.

411
01:25:21.200 --> 01:25:44.270
Sunny Savita: Okay, now, if you are having a issue while understanding this entire thing and all. Maybe you're not aligned with the session. You are just waking up and coming into the live session without revising the concept. So I will. I would highly advise to you. Please revise the previous concept whatever we are teaching to you. Okay? And then, if you'll come into the session, that would be great, for you got it

412
01:25:44.530 --> 01:26:06.519
Sunny Savita: great. Now, if you have any sort of a doubt going forward you can like discuss with me in a doubt session. Right now, let's try to discuss couple of more point, and then I'll give you the break, and we can all have a break pass guys. Okay? So here. I hope this Knn term and this Knn term is clear. What's the full form of it? It's a k nearest neighbor.

413
01:26:06.560 --> 01:26:30.960
Sunny Savita: and the full form of this, Ann is a approximate nearest neighbor. This term, guys, you are going to be used a lot while you are going to be create indexes and all. And believe me, guys, it will bother you a lot. Okay, you will do, chat, gpt this, that whatever again and again. But I explain you over here itself. Maybe you won't. You won't find any issue now. Okay, now, coming to the next part.

414
01:26:31.320 --> 01:26:48.939
Sunny Savita: So Knn is there and is there, and here. You can read the complete detail of it. I I just kept in my notes. Okay, each and everything is there. So once you will go through with this particular part maybe. You will be able to understand everything right great.

415
01:26:48.940 --> 01:27:02.139
Sunny Savita: Now, coming to the next one. So, guys, I have to discuss couple of more point yesterday. Few people were asking regarding the multi modality, also multimodal data and all. So I kept the point regarding that as well.

416
01:27:02.420 --> 01:27:06.250
Sunny Savita: so as we know, we have a different different type of data in your real time.

417
01:27:06.711 --> 01:27:28.539
Sunny Savita: We always don't get a data basically in the text format. Okay, we, we have a different different type of data like the chart. Okay, we have sometime flow diagrams. We have some time the different different kind of Pdf, with the images, tables, and all. Okay, so guys here, I return. See, whenever we talk about the text.

418
01:27:29.240 --> 01:27:40.120
Sunny Savita: So text means what plain sentences or paragraph. Okay. Now, whenever we talk about the images. So in the images, guys photograph diagrams, chart, there could be anything

419
01:27:40.410 --> 01:27:42.209
Sunny Savita: inside the given image.

420
01:27:43.260 --> 01:27:44.170
Sunny Savita: Okay?

421
01:27:44.330 --> 01:27:51.139
Sunny Savita: So whenever talking about the different other type of data, so their audio also will come. So there we have a voice.

422
01:27:51.330 --> 01:27:52.629
Sunny Savita: His speeches.

423
01:27:53.050 --> 01:27:58.089
Sunny Savita: We have a music, right? So this type of data, actually, it comes inside the audio

424
01:27:59.970 --> 01:28:09.690
Sunny Savita: whenever we talk about the videos guys. So in the videos, actually mute moving visuals with the audio. Okay, as you know, right? So there will be frames

425
01:28:11.110 --> 01:28:12.500
Sunny Savita: plus audio.

426
01:28:14.860 --> 01:28:15.720
Sunny Savita: Okay?

427
01:28:16.150 --> 01:28:24.069
Sunny Savita: Then documents. I think you know. Right? What is the document, the different different type of document. Let's say we have a Pdf.

428
01:28:24.360 --> 01:28:25.959
Sunny Savita: we have our Ppts.

429
01:28:27.000 --> 01:28:33.599
Sunny Savita: so there you will find out some combination of the data like text would be there. Images would be there. Some tables would be there

430
01:28:34.120 --> 01:28:41.679
Sunny Savita: right? So while you are working in a real time, guys, you might get any sort of a data. There is a different different type of data.

431
01:28:41.810 --> 01:28:44.319
Sunny Savita: Even the document there would be excel.

432
01:28:47.240 --> 01:28:51.559
Sunny Savita: Okay, now, there is a challenge to parse this data

433
01:28:55.470 --> 01:28:58.099
Sunny Savita: and store it inside the vector database.

434
01:28:58.670 --> 01:29:01.989
Sunny Savita: Yes or no. Guys tell me, that's the main challenge. Like

435
01:29:02.200 --> 01:29:06.058
Sunny Savita: everyone is facing. Everyone is asking in a like doubt, session, right?

436
01:29:06.550 --> 01:29:16.389
Sunny Savita: How to pass this data, that data, how to store this data. That data, sir, I have images. I have. Pdf, I have a table. I'm not able to understand the flow. And all

437
01:29:16.410 --> 01:29:36.220
Sunny Savita: right. So here, I'm just giving you some clarity with respect to the vector, database as I like, took the initiative to explain this vector database. That's why I'm going through with this different different type of modality. Okay, so here we have a modality. And now let me show you a couple of use cases. So I just cap a couple of use cases.

438
01:29:36.220 --> 01:29:47.520
Sunny Savita: So if talking about the chat gpt the current version of the Chat gpt there you will find out we can pass the images and text right even. It can generate the images and tags. In Youtube guys.

439
01:29:48.747 --> 01:29:59.209
Sunny Savita: There is a video audio and text, right? So here running resume screen resume screening from the Pdf and portfolio. So this type of data you will get

440
01:29:59.390 --> 01:30:03.929
Sunny Savita: over there. So this is the example, the couple of examples I cap.

441
01:30:04.630 --> 01:30:08.110
Sunny Savita: So you can go through with this type of Pdf as a document.

442
01:30:08.350 --> 01:30:12.549
Sunny Savita: And fore, should, you will get this modality.

443
01:30:12.670 --> 01:30:30.069
Sunny Savita: Okay. Now, whenever we have to store this type of data inside the vector database. Now, which vector database we can use for the multimodal data. That's my main aim. Okay, to discuss. So here I capped couple of name which you can consider.

444
01:30:30.200 --> 01:30:32.199
Sunny Savita: So whenever we're talking about the

445
01:30:32.966 --> 01:30:36.059
Sunny Savita: multimodal data guys, let me write over here.

446
01:30:38.100 --> 01:30:46.190
Sunny Savita: So whenever we talk about the multi model data.

447
01:30:48.000 --> 01:30:50.990
Sunny Savita: So, as we have seen in a multimodal data.

448
01:30:51.770 --> 01:30:57.349
Sunny Savita: there could be anything, not only the text, there could be text, there could be images.

449
01:30:58.190 --> 01:31:03.620
Sunny Savita: Now, this images could be anything. Okay, there could be. Audio.

450
01:31:04.510 --> 01:31:12.549
Sunny Savita: They could be video, okay, different, different type of data. Now, whenever we talk about the Llm skies.

451
01:31:13.110 --> 01:31:18.549
Sunny Savita: So we just see wherever we talk about the Llm. So we know that Llm. Only takes the text

452
01:31:20.040 --> 01:31:22.610
Sunny Savita: at it. Generator text.

453
01:31:24.550 --> 01:31:26.450
Sunny Savita: This is not a multimodality.

454
01:31:27.320 --> 01:31:31.150
Sunny Savita: Okay? So if Llm. Can take the audio.

455
01:31:33.050 --> 01:31:36.010
Sunny Savita: if Llm. Can take the images

456
01:31:39.060 --> 01:31:40.229
Sunny Savita: just a second.

457
01:31:42.020 --> 01:31:47.600
Sunny Savita: Yeah. So if Llm can take the audio. If Llm. Can take the images.

458
01:31:49.900 --> 01:31:53.249
Sunny Savita: Okay, and if Llm can generate the audio.

459
01:31:54.650 --> 01:31:57.600
Sunny Savita: and if Llm. Can generate the images.

460
01:31:59.980 --> 01:32:03.710
Sunny Savita: so that's the this is called a multimodel capability.

461
01:32:03.960 --> 01:32:05.550
Sunny Savita: Multimodal means.

462
01:32:05.680 --> 01:32:09.119
Sunny Savita: This Llm is not only able to handle this text data

463
01:32:09.310 --> 01:32:17.479
Sunny Savita: as well as it can handle the different other type of data like audio and images. I'll ask you one question whenever talking about the chat. Gpt

464
01:32:18.190 --> 01:32:26.990
Sunny Savita: guys tell me it's a multimodal application, or it's a single model application. It's a homogeneous application. It's a heterogeneous application.

465
01:32:27.540 --> 01:32:31.459
Sunny Savita: this chat Gpt. Actually, it's a multi-model application.

466
01:32:31.900 --> 01:32:36.630
Sunny Savita: Why, it is multimodal application, because it could take care the text.

467
01:32:38.500 --> 01:32:40.310
Sunny Savita: it can take care of the audio.

468
01:32:40.860 --> 01:32:42.769
Sunny Savita: it can take care of the images.

469
01:32:43.530 --> 01:32:45.199
Sunny Savita: Can it generate the text?

470
01:32:46.350 --> 01:33:05.920
Sunny Savita: And how many of you you have generated that gibal art Ghibli or Gibal? Right? So something like that. There's a cartoon characters. Actually, right? So yeah. So text is, can gible art right then. It can generate the images. And with some extension, actually, we audio also.

471
01:33:06.570 --> 01:33:11.660
Sunny Savita: So guys tell me, we're talking about the chat Gpt, it is using the model

472
01:33:12.190 --> 01:33:22.300
Sunny Savita: which is capable to handle the different different type of data. Or else, if this model is not able to handle the data, chat Gpt.

473
01:33:22.410 --> 01:33:29.930
Sunny Savita: making that easy with their coding, programming logic. Okay, let's try to make that easy

474
01:33:30.440 --> 01:33:33.430
Sunny Savita: getting my point. Yes or no, there'll be. Yes.

475
01:33:33.780 --> 01:33:35.839
Sunny Savita: Is it getting clear to all of you.

476
01:33:36.020 --> 01:33:43.589
Sunny Savita: Okay, that's the meaning of the multi modality now coming to the next part. So, guys, whenever we talk about the rag pipeline.

477
01:33:46.250 --> 01:33:49.190
Sunny Savita: So in rag pipeline. Also, we have a data.

478
01:33:50.570 --> 01:33:54.030
Sunny Savita: Now, this data. Also, we're gonna store inside the vector, database.

479
01:33:56.380 --> 01:34:01.070
Sunny Savita: Okay, now, as I told you, this data could be anything.

480
01:34:02.900 --> 01:34:05.819
Sunny Savita: This data could be anything multimodel data.

481
01:34:06.900 --> 01:34:14.709
Sunny Savita: Now, guys tell me, we require the vector, database with some additional functionality.

482
01:34:14.840 --> 01:34:22.699
Sunny Savita: so it can handle the multi-model data, is it guys tell me, are you able to understand the context? Now, why I'm discussing all this thing.

483
01:34:23.750 --> 01:34:27.800
Sunny Savita: we have a data. This data could be anything. It could be images.

484
01:34:28.370 --> 01:34:30.060
Sunny Savita: It could be videos.

485
01:34:30.770 --> 01:34:32.340
Sunny Savita: It could be text.

486
01:34:32.960 --> 01:34:36.780
Sunny Savita: It could be audio right

487
01:34:37.080 --> 01:34:44.100
Sunny Savita: now, we required a vector, database. So this vector, database could be anything. Let's say, it's an open search.

488
01:34:46.310 --> 01:34:48.350
Sunny Savita: It's a azure. AI search.

489
01:34:51.490 --> 01:35:02.419
Sunny Savita: Okay, it's a what vector vertex. AI, vector okay, vertex, AI, vector, or it's a pine cone.

490
01:35:04.100 --> 01:35:05.479
Sunny Savita: It's a baby 8.

491
01:35:06.940 --> 01:35:08.859
Sunny Savita: Or let's say, it's a millbus.

492
01:35:11.140 --> 01:35:17.780
Sunny Savita: Okay, it's a quadrant. So this vector database could be anything. But guys, if we have

493
01:35:17.940 --> 01:35:29.329
Sunny Savita: different kind of data like audio images. Video, okay, so we required those databases which can handle which can handle the different different type of modality.

494
01:35:30.160 --> 01:35:32.580
Sunny Savita: Getting my point, not the.

495
01:35:33.210 --> 01:35:38.500
Sunny Savita: Now, are you able to understand like, why, I'm trying to discuss this entire thing and all.

496
01:35:38.810 --> 01:35:42.929
Sunny Savita: Okay. So you get you, you can get some idea, some overview

497
01:35:43.480 --> 01:35:50.550
Sunny Savita: right now. Here, I cap, couple of name, let's try to go through with those name. Okay.

498
01:35:50.770 --> 01:35:53.670
Sunny Savita: so here, guys, if you will look into this name. See?

499
01:35:54.030 --> 01:36:03.270
Sunny Savita: Whenever we talk about any database. Okay? Sorry whenever we talk about any sort of a modality. So let's say, we're talking about the text.

500
01:36:04.940 --> 01:36:11.800
Sunny Savita: So using this particular model like board, Gpt, mini, lm, and all at the end, we are going to convert into the vector

501
01:36:12.220 --> 01:36:14.469
Sunny Savita: if you're talking about the images guys.

502
01:36:14.940 --> 01:36:18.619
Sunny Savita: So using this clip or blade model, we are going to convert into the vector

503
01:36:19.830 --> 01:36:30.760
Sunny Savita: if we're talking about the other modality like audio video. Okay, even the table. Also at the end. What we are going to do. See table, you can generate a summary out of that.

504
01:36:31.160 --> 01:36:39.069
Sunny Savita: and after converting into the text means it is a text, eterna. Then you can handle it in a same way. This one

505
01:36:39.160 --> 01:36:46.330
Sunny Savita: or there is some direct model also for the text data like this, layout, Lm, tap, taps or

506
01:36:46.350 --> 01:37:09.849
Sunny Savita: purpose. And all right, you can check it out. I just saw going through with the hugging face, and I try to figure out over there how we can handle the direct text table data. And I get got some model. But you could take this particular way. Okay, now, text data image data, audio data, video data or table, right? So what we are doing guys at the end directly we are going to convert this data into the vectors

507
01:37:10.700 --> 01:37:14.569
Sunny Savita: and number main name to store inside the vector database.

508
01:37:16.670 --> 01:37:19.759
Sunny Savita: Okay, now, the question is over here.

509
01:37:20.120 --> 01:37:27.449
Sunny Savita: If we have a text, if we have a image, if we have a audio or video.

510
01:37:27.900 --> 01:37:34.199
Sunny Savita: or maybe table right at the end, everything is being converted into the vector

511
01:37:36.010 --> 01:37:39.590
Sunny Savita: okay? And we can store inside the vector database.

512
01:37:39.740 --> 01:37:43.079
Sunny Savita: Now, why, the different different type of database is required

513
01:37:44.180 --> 01:37:49.280
Sunny Savita: for multimodality. Maybe pine corn is not supporting. Maybe some other database is supporting

514
01:37:49.990 --> 01:38:00.360
Sunny Savita: right, maybe for the audio, maybe some other database is not supporting, or some different cloud based databases supporting. So the question is over. Here

515
01:38:00.530 --> 01:38:14.919
Sunny Savita: we have a text images, audio video, or whatever type of data at the end, we are going to be convert into the vector. And this vector. Could be hold by any of the database like the basic one only files. Then why we require the different different

516
01:38:15.200 --> 01:38:21.479
Sunny Savita: vector database from advanced database. So here, guys, I written a answer for that.

517
01:38:21.820 --> 01:38:24.080
Sunny Savita: So if you will check now this one.

518
01:38:24.260 --> 01:38:26.929
Sunny Savita: this one, just look into this particular line.

519
01:38:27.500 --> 01:38:28.490
Sunny Savita: Okay.

520
01:38:29.040 --> 01:38:38.790
Sunny Savita: the difference is not is creating into the database. The difference lies in the feature and the ecosystem of the vector database. I can give you the example.

521
01:38:39.420 --> 01:38:46.660
Sunny Savita: Whenever we are going to store our data into the pinecone guy, see? Pine cone database is only for the text

522
01:38:50.790 --> 01:38:54.000
Sunny Savita: means we can convert test into the vector.

523
01:38:54.720 --> 01:38:57.160
Sunny Savita: and we can store inside the pine cone.

524
01:38:58.190 --> 01:39:05.430
Sunny Savita: Okay, now, while we are storing the data into the pinecone, there will be a Id related to that related to the data. And there will be a

525
01:39:05.810 --> 01:39:14.380
Sunny Savita: vector okay. Now, there is no other way like we can keep the images or audio file

526
01:39:14.750 --> 01:39:16.680
Sunny Savita: or any video file.

527
01:39:18.380 --> 01:39:20.899
Sunny Savita: But guys, if we're talking about the Vp 8,

528
01:39:21.020 --> 01:39:26.910
Sunny Savita: okay? So the way be it guys, we can keep that images.

529
01:39:27.630 --> 01:39:34.039
Sunny Savita: Okay, means in the way. Bit. Actually, we can keep the see. There is a this is the waybit schema.

530
01:39:34.500 --> 01:39:41.510
Sunny Savita: And here you can see this particular schema. With respect to the tell me, guys, multimodal data

531
01:39:46.800 --> 01:39:49.639
Sunny Savita: means we can keep that.

532
01:39:49.910 --> 01:39:51.210
Sunny Savita: That is fine.

533
01:39:51.880 --> 01:39:55.089
Sunny Savita: But along with the embedding we can store the other.

534
01:39:55.560 --> 01:40:00.500
Sunny Savita: Tell me, guys, other property. Also of the data. Like we can store the image path.

535
01:40:00.870 --> 01:40:04.590
Sunny Savita: we can store the image in the form of vs. 4. Encoding

536
01:40:05.220 --> 01:40:16.140
Sunny Savita: base encoding format. Right? Base 64, okay? And we can store the other metadata also. So guys here, you can see the pine code, which is only supporting a text data

537
01:40:16.500 --> 01:40:29.050
Sunny Savita: here. We cannot handle the images, the image embedding. See image embedding we can store, but how? We'll store the other property of the images and all baby. 8. On the other hand, whenever we are going to create a schema inside the baby 8,

538
01:40:29.420 --> 01:40:33.310
Sunny Savita: it can take care the image embedding

539
01:40:33.560 --> 01:40:38.170
Sunny Savita: means the embedding part as well as the other property of the images.

540
01:40:38.270 --> 01:40:39.779
Sunny Savita: So that will make

541
01:40:40.590 --> 01:40:55.619
Sunny Savita: our system easiest. One means if you have to navigate to the images and all in that case. It's going to be easy for us. So, guys, I can give you the example of my use case, which I build in my app in my company, I use the open search.

542
01:40:57.720 --> 01:41:02.090
Sunny Savita: open search. Actually, it's a vector database which have been built on top of the elastic search.

543
01:41:08.310 --> 01:41:13.040
Sunny Savita: Okay? And who has created this open search? Aws has created this open search.

544
01:41:14.820 --> 01:41:20.540
Sunny Savita: and you will find out one specific cloud, native variant of the open source that is called Aws open source.

545
01:41:26.900 --> 01:41:29.790
Sunny Savita: Okay? And it is also supporting the multimodel data

546
01:41:34.920 --> 01:41:44.650
Sunny Savita: means we can store the embedding with respect to any sort of a data. But apart from that, we can store some other feature. Also, we can create one proper schema

547
01:41:45.260 --> 01:41:50.360
Sunny Savita: getting my point, guys, yes or no. Tell me, is this discussion is a fruitful or not

548
01:41:51.310 --> 01:42:12.499
Sunny Savita: just good. Now, coming to the different different names over here. So, guys here. I kept the different name which is good for the different different type of use cases. And force. Here you can test it out. So Millbus actually provide you one cloud variant that is called Zilla Zillies. Okay, it's a cloud variant of the Millbus.

549
01:42:12.500 --> 01:42:24.920
Sunny Savita: And guys, it is good for the multimodal. Okay, images. Text, video, any kind of data embedding you can store as well as the other feature of the data. Okay, Quadrant is there. It is available in local

550
01:42:26.230 --> 01:42:27.759
Sunny Savita: as well as cloud.

551
01:42:28.040 --> 01:42:47.680
Sunny Savita: I I'm not sure whether the free variant is available or not for the clock quadrant. But yeah, you can check it out there. It is a good for the like, the multi model. And you can handle the different different type of data. V, 8, is there good for the different type of data? Okay, pine cone. Actually, it's focus on the text, only it is not

552
01:42:47.860 --> 01:42:57.069
Sunny Savita: for the images. Okay? You can check out in the recent variant if they have added. But yeah, generally see PIN code we can use for the

553
01:42:58.184 --> 01:43:01.090
Sunny Savita: which one is text. Now.

554
01:43:01.310 --> 01:43:05.610
Sunny Savita: the cloud native database. If we're talking about the cloud guys.

555
01:43:06.590 --> 01:43:16.530
Sunny Savita: So that matter a lot. Okay? Because generally we are going to be build a cloud native application. So if we are going to be, use the aws, use the aws. Open search

556
01:43:17.250 --> 01:43:20.079
Sunny Savita: it is, see, open search.

557
01:43:21.630 --> 01:43:23.200
Sunny Savita: These are open source.

558
01:43:29.050 --> 01:43:32.050
Sunny Savita: And it has created on top of the elastic search.

559
01:43:36.420 --> 01:43:45.920
Sunny Savita: It's very good database vector database. Okay, guys, this open search. Actually, it is a open source data base under the Apache license.

560
01:43:48.820 --> 01:43:50.420
Sunny Savita: a partial license.

561
01:43:52.110 --> 01:43:58.579
Sunny Savita: Okay? But aws, has created their cloud native variant, also regarding the open search.

562
01:43:58.710 --> 01:44:05.450
Sunny Savita: So we talk about the Aws guys. So aws will provide you the cloud. Native aws, open search.

563
01:44:05.620 --> 01:44:12.690
Sunny Savita: And you can use it. Then as your AI search, it's a very good database. If you're going to use the azure guys very good vector, database

564
01:44:13.660 --> 01:44:20.869
Sunny Savita: for holding the vector data with respect to any modality. Okay, it can handle the embedding for any sort of a

565
01:44:21.690 --> 01:44:33.969
Sunny Savita: modality as well as guys. It will provide you the complete ecosystem for storing, for creating any sort of a schema along with the metadata, and all likewise this Gcp. Vertex AI. Also, it is also a very good one.

566
01:44:34.090 --> 01:44:38.599
Sunny Savita: So we have some 3rd party databases.

567
01:44:38.710 --> 01:44:44.180
Sunny Savita: Okay, we have some 3rd party databases like

568
01:44:45.500 --> 01:44:56.070
Sunny Savita: quadrant, is there? Millbus? Is there? Viviet? Is there Pinecone is there? whisper.ai is there, and we have some cloud. Native also means that dedicated the 3 major cloud. We have not. Aws.

569
01:44:56.720 --> 01:45:00.839
Sunny Savita: Gcp or 0, right?

570
01:45:01.710 --> 01:45:04.640
Sunny Savita: The Cloud native is also available.

571
01:45:05.300 --> 01:45:16.439
Sunny Savita: Guys tell me now, every doubt is clear or not with respect to the databases. Now, can we move ahead with the practical of the pine cone. And let's see how we can set up that. Yes or no.

572
01:45:17.960 --> 01:45:30.010
Sunny Savita: That's why, guys, I kept this notes for all of you, intentionally, so that like, you can go through with it, and you can understand the thing in a more clear way in a crisp manner. Right? Yeah.

573
01:45:31.420 --> 01:45:36.160
Sunny Savita: sir. What is the metadata? Search? If you don't know about it, please go and check with my previous session

574
01:45:36.830 --> 01:45:37.690
Sunny Savita: target.

575
01:45:37.790 --> 01:45:40.180
Sunny Savita: Here is an image of the rag, this one.

576
01:45:43.540 --> 01:45:45.730
Sunny Savita: Okay, guys, can we take a break? Now

577
01:45:46.050 --> 01:45:54.759
Sunny Savita: tell me, how's the session so far? Did you like the session. Did you like my everything, guys? If you like, you can let me know in the chat. Okay? And

578
01:45:54.910 --> 01:46:01.710
Sunny Savita: oh, just a second guys, we I can raise a poll. You can. Just a second.

579
01:46:08.280 --> 01:46:24.200
Sunny Savita: I'll launch the poll also, so you can. Give your detailed feedback over there as well. Okay. Now I'll give you the break the 15 min of break, and after that we'll go with the practical session. Okay? And then, after completing that, we'll go for the doubt and all, okay.

580
01:46:32.524 --> 01:46:38.290
Sunny Savita: Okay, there are so many question different different doubts and all. Don't worry, guys. I can take care of it

581
01:46:38.450 --> 01:46:55.129
Sunny Savita: and see sometimes it is not possible. See, I'm teaching you are getting a question in chat, right? So while you are learning, you are not able to look into the chat, agree or not, guys, so how it will be possible for me while teaching, and look into the chat and give the answer at the same time

582
01:46:55.360 --> 01:47:09.089
Sunny Savita: it is not very easy, so you can have some patience, and later on you can ask me your doubts or not, for sure I'll be clarifying. Okay, if you will ask to me, sir. Sit by 4 o'clock. I'll sit by 4 o'clock. Don't worry, guys. Okay.

583
01:47:16.900 --> 01:47:30.200
Sunny Savita: Okay. Great if you're taking Pdf. How to convert a maze text together, which no, we'll have to do the parsing regarding that the Pdf. And all in a proper way in a proper manner. We'll have to extract each and every component of that. Okay.

584
01:47:34.970 --> 01:47:52.639
Sunny Savita: so how you can remember how you remember all this thing. So this all the thing. Actually, it comes from the experience while you're working while you're looking with the bigger, bigger systems and all. Okay, so you will be having that envision? Right? So you can. You can think, okay. If that scenario, then what will happen if this scenario, then what will happen?

585
01:47:52.640 --> 01:48:06.629
Sunny Savita: And like whatever you can see over here, guys, whatever the notes and all it all from my experience only. And believe me, guys, whenever you will go in industry and 95%, you will be playing around to this

586
01:48:06.690 --> 01:48:08.989
Sunny Savita: 95%. Okay.

587
01:48:16.560 --> 01:48:24.850
Sunny Savita: great guys perfect. So let's do one thing. Let's take a break. Okay, let's have some breakfast and all.

588
01:48:25.190 --> 01:48:29.810
Sunny Savita: and I will meet after 15 min. Is it fine to all of you? Yes or no?

589
01:48:32.270 --> 01:48:35.510
Sunny Savita: Okay, okay.

590
01:48:38.170 --> 01:48:48.360
Sunny Savita: yeah. So I'm putting a timer for the 15 min, and then we'll start with, sorry yeah. 15 min. Only not 20 min. Someone is like, 30 min. Okay. Should I end the session now?

591
01:48:49.550 --> 01:48:52.710
Sunny Savita: 30 min by both. Are there? 30 min break?

592
01:48:52.880 --> 01:48:56.050
Sunny Savita: Let's take 4, 15 min. Only don't

593
01:48:56.580 --> 01:48:58.779
Sunny Savita: thank you, guys. I'm putting a timer. Yeah.

594
01:49:15.020 --> 01:49:16.099
Sunny Savita: thank you. Waste.

595
02:07:10.460 --> 02:07:13.210
Sunny Savita: Oh, you guys, so can we start once again?

596
02:07:14.150 --> 02:07:19.130
Sunny Savita: Can't hear. You can't hear you are. I return a message, and I hear, see? Give me 2 min. Got a call?

597
02:07:20.630 --> 02:07:23.780
Sunny Savita: Hmm, okay, perfect.

598
02:07:33.350 --> 02:07:58.229
Sunny Savita: Okay, guys. So let's start with the practical. I think we have a completed a theory we understood, like most of the concept now it's time to discuss about the practical. So let's do one thing. Let's try to do the practical of this pinecone. Okay? Like, we have created a rag system in the previous class itself. So let's create a rag in the same way. Okay, using the pinecone this time.

599
02:07:58.420 --> 02:08:07.819
Sunny Savita: So let me show you how to store the data over the cloud, and then I'll give you the couple of assignment you can. Do that during your practice. Okay?

600
02:08:07.980 --> 02:08:11.369
Sunny Savita: So 1st of all, guys, what is required. Just a second.

601
02:08:11.820 --> 02:08:12.590
Sunny Savita: Yeah.

602
02:08:12.910 --> 02:08:17.940
Sunny Savita: So here we have created a pinecone client. Have you generated a pinecone? Api key.

603
02:08:20.640 --> 02:08:26.990
Sunny Savita: sir, please create a new IP bin. It's a new IP bin only which I created under this pinecone folder.

604
02:08:27.340 --> 02:08:34.440
Sunny Savita: So have any. Has anyone created everyone created this pinecone? Api key? Do you have this pinecone Api key or not? Tell me.

605
02:08:36.000 --> 02:08:52.720
Sunny Savita: Okay, great. You have it correct. Now, after creating this pinecone Api key, we have to create an index. Okay, so last time we have created an index in the memory itself, or inside a local system itself. Okay, now, this time the index would be available over the cloud.

606
02:08:52.730 --> 02:09:07.229
Sunny Savita: So how to do that, how to create an index over the cloud. So let me write a code for that over here. So from the pinecone itself, guys, I'm going to import something. Please focus over here, and you can write along with me if you want to write. So from Pinecone

607
02:09:07.680 --> 02:09:17.680
Sunny Savita: Peel, I'm going to write import server, less. Okay.

608
02:09:17.880 --> 02:09:24.909
Sunny Savita: serverless spec. So, guys, I have to import this particular module. Now, can anyone tell me the meaning of the serverless?

609
02:09:25.390 --> 02:09:26.300
Sunny Savita: Tell me.

610
02:09:27.490 --> 02:09:39.510
Sunny Savita: is my message visible to the panelist and all see prashant. Don't worry about this message. And all focus over here. Focus of the session. Okay, everyone's message is visible. But focus over here. Guys. Okay.

611
02:09:39.650 --> 02:10:02.770
Sunny Savita: so here, what I'm doing, we are going to be import this serverless spec. Now, what is the meaning of the serverless, serverless means it doesn't mean that there is no server. No, it's not like that serverless means. You are not going to be manage the server. The Cloud Provider only will manage the server. Okay? So here I can write one comment, maybe it will help you.

612
02:10:02.770 --> 02:10:15.000
Sunny Savita: So here I can write a comment. Guys, the comment is, serverless means managed by the cloud provider. Okay, this, whatever server. Basically, you are getting server

613
02:10:15.730 --> 02:10:16.770
Sunny Savita: will be

614
02:10:17.480 --> 02:10:26.570
Sunny Savita: managed by the Cloud provider. I hope you got it now, coming to the next part. So once you will import the server like specs. So 1st of all.

615
02:10:30.950 --> 02:10:31.680
Sunny Savita: yeah.

616
02:10:31.860 --> 02:10:37.929
Sunny Savita: So you have to create an index how to create an index. Let me import it and simply write over here. PC, dot.

617
02:10:38.530 --> 02:10:40.010
Sunny Savita: create index.

618
02:10:41.990 --> 02:10:51.449
Sunny Savita: Okay, now, inside this create index. You're gonna write some detail. Okay? So the 1st thing is what the 1st thing you will write an index name

619
02:10:53.420 --> 02:10:55.430
Sunny Savita: index underscore name.

620
02:10:56.860 --> 02:11:03.110
Sunny Savita: The second thing you will write over here the dimension dimension.

621
02:11:04.120 --> 02:11:10.970
Sunny Savita: Okay, now tell me, guys, if if I'm going to use the hugging face based model, then what I will have to mention over here in the Dimension itself.

622
02:11:11.470 --> 02:11:17.900
Sunny Savita: 3 84. If I'm going to use the Google model, then what I will have to mention over here instead of dimension. Tell me.

623
02:11:18.380 --> 02:11:28.119
Sunny Savita: 7, 68. You are right guys. So here, what I'm doing, I'm going to use the Google Gemini model. So I'm going to write a dimension that is going to be 7, 68

624
02:11:28.360 --> 02:11:34.060
Sunny Savita: now coming to the next part. So, oh, okay, dimension perfect.

625
02:11:34.180 --> 02:11:46.209
Sunny Savita: Now, coming to the next part, the next variable that's going to be metric. Now tell me, guys, which metric I can use as of now. For the similarity search, because can I use the cosine? Is it fine to all of you?

626
02:11:47.030 --> 02:11:54.970
Sunny Savita: Tell me? Yes, okay, let's use the cosine now coming to the next part. So here, guys, I will have to mention the specification of the server.

627
02:11:55.810 --> 02:12:00.660
Sunny Savita: So going to copy this class name, and here I'm going to create an object of it.

628
02:12:01.420 --> 02:12:05.570
Sunny Savita: And I'll write a class name only this one. Okay?

629
02:12:06.200 --> 02:12:15.510
Sunny Savita: And after writing a class name inside this class name, I have to provide couple of parameter. 1st is a cloud name, and the second is what region?

630
02:12:16.150 --> 02:12:30.339
Sunny Savita: REGI, ON, okay, so I'm going to provide a cloud name. Now, on which cloud guys, I'm going to configure my database this database so I can use any sort of a cloud. I can use the Aws Gcp. Or azure.

631
02:12:30.340 --> 02:12:48.439
Sunny Savita: whatever is being provided by the Pinecone Provider. Okay, that vendor provider. So here I can mention the aws. You will have to navigate all this thing, guys, if you are working into a real time, the serverless specification and all everything. Okay. Now, here, I'm going to write this Us. East one.

632
02:12:48.780 --> 02:12:50.800
Sunny Savita: Us is

633
02:12:51.740 --> 02:13:10.179
Sunny Savita: one. Okay. So I have the index name dimension, metric and the specification. No, that is the only thing which is required, and what I will do here. I will write my index name in the 1st place. Okay, so I can write any sort of a name as of now. Let's write agent, tick, patch.

634
02:13:10.380 --> 02:13:16.549
Sunny Savita: cool agentic badge, BATC. H.

635
02:13:17.070 --> 02:13:44.379
Sunny Savita: 2. Okay, so this is my index name guys here. I mentioned the variable already, and once I will execute that I'll be able to create an index. Now you can put one if condition you can check. The index is already there or not. So if I'm going to check with my database, I will have to run this particular code. So here my code is what if sorry my condition is, what if not PC. Dot has index. Then, only I'm going to be create my index. Okay, if there is an index, then I no need to create an index.

636
02:13:44.450 --> 02:13:55.989
Sunny Savita: Getting my point, you can simply check whether the index is already available or not. So simply what you can do. You can run this pc.it has index. Okay? And once you will execute that, guys see?

637
02:13:57.155 --> 02:13:59.530
Sunny Savita: It is giving you the false.

638
02:14:00.130 --> 02:14:01.939
Sunny Savita: Do we have this index here?

639
02:14:02.670 --> 02:14:13.020
Sunny Savita: So what is what index? It is creating flat Hnsw or Ibm, it is as of now, it is just creating a flat index. Okay, so guys tell index available or not.

640
02:14:14.410 --> 02:14:22.190
Sunny Savita: So why is 7, 68, Dimension Conal Kunal, Conal? I think already I discuss what is the dimension of my model.

641
02:14:23.080 --> 02:14:32.480
Sunny Savita: The dimension of my model is the 7, 68. In that case I will have to mention, the dimension is 7, 68 guys. Okay.

642
02:14:34.440 --> 02:14:41.139
Sunny Savita: pinecone index is posted over the Aws. Yes, guys, pinecone is not having their own cloud. This is just a wrapper.

643
02:14:42.020 --> 02:14:48.730
Sunny Savita: Okay, this is just a wrapper on top of the different different other clouds, and all got it

644
02:14:49.840 --> 02:15:19.819
Sunny Savita: great. So here you can see the index is not available. Now let me navigate to my pine cone once, and let me check what are indexes are there. So if I'll check with my pine cone, and where is my pine cone? Here's my pine cone. Let's look into the databases. So trading board is already there which I created earlier. And here the link chain test index is also there. So, guys, what I'm doing I'm just checking with the trading board. What? I'm what I'll be getting right. So I'm just copying this name. This trading board.

645
02:15:20.750 --> 02:15:35.570
Sunny Savita: Where is a name? Where is a name? Here is a name. Okay? So I'm just copying this name, and I'm passing it inside my code. And let's see whether this index is present or not. Okay. So here is my code. Here is my index name.

646
02:15:35.790 --> 02:15:38.720
Sunny Savita: and let's check out with the pinecone client.

647
02:15:39.660 --> 02:15:44.050
Sunny Savita: and you can do along with me as well, because I'm going very, very slow, and I think you can

648
02:15:44.300 --> 02:15:55.079
Sunny Savita: copy and paste. Sorry you can write and everything along with me. Okay, so Training board is there. And let's do one thing, guys, let's keep it inside the double code.

649
02:15:55.850 --> 02:16:11.730
Sunny Savita: And here, if I'm going to execute that, it is giving me invalid syntax error. So let me keep in the double early and see this time it is giving me 2. So guys tell me if the index is already there. Do I need to create an index with the same name?

650
02:16:12.340 --> 02:16:14.270
Sunny Savita: Or do I need to create an index?

651
02:16:16.290 --> 02:16:22.810
Sunny Savita: Yes, aws is a paid. That's why they are, give just offering couple of a couple of instances as a free one.

652
02:16:22.940 --> 02:16:25.330
Sunny Savita: the rest of the paid. Okay?

653
02:16:25.440 --> 02:16:36.900
Sunny Savita: Why, if someone will create a database or some product for you as a free. Tell me, guys, they are just giving the free access just to test the functionality and all that said nothing apart from this one

654
02:16:37.910 --> 02:16:42.629
Sunny Savita: aws is paid. In that case pinecone is also paid. Okay.

655
02:16:43.389 --> 02:16:52.270
Sunny Savita: Great. No. Here you can see. We don't have this particular index agent batches. So we are going to be create that. So I create index guys, yes or no.

656
02:16:52.530 --> 02:17:05.280
Sunny Savita: I think we can create an index. Right? So here I am going to create an index and see guys, my index is getting created. Now, after creating an index, what I will do. So here I write. PC, dot index.

657
02:17:05.629 --> 02:17:10.289
Sunny Savita: And I will, I will guys what I will do. Guys, I'll

658
02:17:12.219 --> 02:17:29.759
Sunny Savita: configure that index. Okay? Means, first, st I created that. Okay. Now I have to load that now for install for importing sorry for for putting the data for uploading the data inside the debt inside. That is specific index. Right? So here I'm going to load that index. So index underscore name.

659
02:17:29.920 --> 02:17:32.949
Sunny Savita: And here, what I'll get, let me check it out.

660
02:17:33.570 --> 02:17:45.809
Sunny Savita: So let me create an object. So now I get my got my index. Now, inside this particular index, actually, we are going to store our database. So did you understand guys how to create an index and how to load that index.

661
02:17:46.299 --> 02:17:50.270
Sunny Savita: So let me write over here creating an index.

662
02:17:57.980 --> 02:18:01.130
Sunny Savita: And here I can write loading the index. Okay.

663
02:18:07.850 --> 02:18:14.550
Sunny Savita: Now, after creating and loading the index, what I will do, I'll store my data over here right? So

664
02:18:15.000 --> 02:18:35.439
Sunny Savita: if you want to check. Now, if you want to check whether the index is there or not over the pinecone, you can simply go and check it out. You can simply basically refresh. Okay once you will refresh over here. Now just do the hard refresh. So once you will refresh. Now, guys, you will get your index over here. And inside that particular index, we are going to be store our data.

665
02:18:35.650 --> 02:18:48.180
Sunny Savita: So yeah, I'll look into the error. Okay, 1st of all, let me do my work. Then I'll look into your errors and all. So, guys here, you can see, this is the index. And guys tell me, do we have any sort of a data inside this index.

666
02:18:48.750 --> 02:18:52.240
Sunny Savita: Do we have any sort of a data inside this index? Tell me fast.

667
02:18:53.510 --> 02:18:54.790
Sunny Savita: No, right?

668
02:18:55.379 --> 02:18:57.269
Sunny Savita: No, yes or no.

669
02:18:57.680 --> 02:18:58.650
Sunny Savita: Nope.

670
02:18:59.160 --> 02:19:21.630
Sunny Savita: okay. So we don't have any sort of a data inside the index. What I will do tell me. In that case, I'm going to be store the data. Okay, so let's store the data inside the index. And it is very, very easy. So first, st what I will do, I'll create my, I'll import something from the link chain. I have to. I'm going to use the link and wrapper as I told you, right? So we are going to be using. Only

671
02:19:24.540 --> 02:19:32.130
Sunny Savita: so here, guys, I'm going to write from link chain underscore pinecone.

672
02:19:33.240 --> 02:19:40.840
Sunny Savita: And what I'm going to import here, I'm going to import pine cone vector, store. Okay.

673
02:19:42.299 --> 02:19:59.200
Sunny Savita: Now, once I will run it, guys. So here, see, we are able to import the pine cone vector, if you are, if you are getting this error create Indice guys, please make sure you are running the code or the same code. Only, okay, if you are going to do any mistake, maybe you might get error, Rahul.

674
02:19:59.390 --> 02:20:10.180
Sunny Savita: So now, what I'm doing here, I'm going to create a pinecone vector, store. So for creating this pinecone vector, store. What I required guys, I required the pinecone index. So let me write the index over here.

675
02:20:10.410 --> 02:20:16.620
Sunny Savita: So what is my index name? My index name is this index, this one I already loaded the index.

676
02:20:16.760 --> 02:20:41.880
Sunny Savita: Now, after this one, guys, I'll mention the embedding model. Now tell me which embedding model I'm using. So let me write the embedding over here, and I'm going to use the Google Gemini embedding. Let me check the variable whether the variable is correct or not. So here my variable name is Embeddings. Okay, I'm going to take a same embedding. You can use any sort of embedding. I don't have any issue, but please make sure that you are going to put a correct dimension.

677
02:20:41.910 --> 02:20:53.339
Sunny Savita: Otherwise you will get an error guys. Okay, so here, I'm going to create a a vector store. Now, let me do one thing, let me write over here vector.

678
02:20:53.450 --> 02:21:09.299
Sunny Savita: underscore store. So I got my vector, store guys. Now, after getting a vector, store, what I'll do. I'll be storing a data over here. Okay, if you will check right now, if you will execute something on top of it, let's say I have a vector store

679
02:21:09.560 --> 02:21:11.609
Sunny Savita: and on top of it, if I'm going to run

680
02:21:12.840 --> 02:21:24.289
Sunny Savita: what I'm going to run guys tell me. So if I'm going to execute the method. The method name is going to be similarty underscore salt. But tell me, guys, will it work for me? Currently?

681
02:21:24.470 --> 02:21:44.119
Sunny Savita: Will it work for me? Currently? No, it's not going to work for me. Currently. Okay? So why? It's not going to work for me because we haven't stored our data. So once we'll store our data, and then only it's going to work. Now, let's say, if I'm going to ask what is the link chain again?

682
02:21:44.300 --> 02:21:45.500
Sunny Savita: Blank chain.

683
02:21:45.730 --> 02:21:47.219
Sunny Savita: So, guys here. See

684
02:21:47.597 --> 02:22:16.369
Sunny Savita: in the result. Maybe I won't get anything because I don't have any sort of a data. The result is an empty one. So once I'll store a data over there. In that case we are going to get a we are going to generate a result. So pine code is a license how we can get the free of version. So it just giving you the couple of instances just to test it, test the functionality and all rest of the pinecone is a paid one. Okay, so here, what I can do guys. So here

685
02:22:16.530 --> 02:22:42.489
Sunny Savita: I can store the data. And I'm going to store a data in the same way. So what I'm doing, I'm picking a last data itself, the last, the data basically, which I use in the last class. Only so just a second guys, I'm going to use the same data. Okay, I'm going to copy and paste. You can take it again from the same file from this files file itself. Now, over here, guys, what I'm doing. See? I created a document. My data will always be present in the form of this document.

686
02:22:42.620 --> 02:22:46.380
Sunny Savita: So I have a document. Now inside the document, guys, I have a page content.

687
02:22:48.130 --> 02:22:50.149
Sunny Savita: And here you can see the metadata.

688
02:22:50.280 --> 02:22:53.899
Sunny Savita: This metadata is nothing. Just a additional information.

689
02:22:56.270 --> 02:22:57.160
Sunny Savita: Okay?

690
02:22:57.330 --> 02:23:16.619
Sunny Savita: So metadata is nothing. It's just a additional information. So we have a page content. We have a metadata and similar to that. You can see we have a 10 document. Okay? Now, what I will do, guys, I'll create a list of document. List of document is required for storing our data. So let me do this thing. 1st of all, guys, what I can do.

691
02:23:16.790 --> 02:23:19.260
Sunny Savita: I can run this particular

692
02:23:19.700 --> 02:23:25.550
Sunny Savita: sell. Okay? Now, what I got guys, I got the list of documents. So let me show you the list of document

693
02:23:26.030 --> 02:23:31.970
Sunny Savita: this one. Okay, once I will execute it. Guys. Here, you can see the All the document.

694
02:23:32.780 --> 02:23:36.410
Sunny Savita: So Docu months. Okay.

695
02:23:36.570 --> 02:23:53.840
Sunny Savita: see how many documents we have. We have 10 documents, and in each and every document we have a metadata as well as the page. Content. Now, after that, guys what we'll do. So here, you can see, I have used one more functionality today. That is a uuid. Do you know about the uuid?

696
02:23:54.570 --> 02:23:58.099
Sunny Savita: Tell me, do you know about the uuid

697
02:23:58.450 --> 02:24:08.539
Sunny Savita: uuid means? You yeah, unique id, it's a like unique identification number. Or you can say, universal identification number, okay.

698
02:24:08.760 --> 02:24:12.470
Sunny Savita: universal identification

699
02:24:14.720 --> 02:24:40.560
Sunny Savita: number. So we have a universal identification number. So I can show you how this uuid looks like. For with respect to each and every document, we are going to be, generate their unique ids, okay, so if I'm going to be execute this particular code. So here, inside the list, you will be, find out the uuid with respect to each and every document. Yesterday, automatically it was being created, you know, while we were storing our data inside of files.

700
02:24:41.510 --> 02:24:51.160
Sunny Savita: yes or no guys. So automatically, it might be created. And we can create by ourselves as well. So to every document, guys, I'm going to be assigned one unique. Id.

701
02:24:51.400 --> 02:25:13.720
Sunny Savita: okay? And how we have created that. So using this simple function, if you don't know about it, I can show you that. So what I'm doing here I'm just going to be. See, this is a list comprehension. If you are not familiar with the python. You might get a difficulty while you are understanding this particular syntax, but it is not that much difficult. Once you will like, understand? In a proper way, it is not that much difficult. So here, what I'm doing, guys.

702
02:25:14.310 --> 02:25:21.280
Sunny Savita: I'm just going to be iterate on top of the document the length of the document. So what is the length of the document?

703
02:25:22.270 --> 02:25:32.409
Sunny Savita: So the length of the document is going to be 10. Okay. Now here, guys if I will write this range 10. So what I will get I'll get from 0 to 10.

704
02:25:32.860 --> 02:25:34.800
Sunny Savita: Okay, c.

705
02:25:34.960 --> 02:25:40.890
Sunny Savita: 0 to 10. Now, if I'm going to run the for loop on top of it. If I'm going to execute the for loop.

706
02:25:41.000 --> 02:25:54.800
Sunny Savita: and if I'm going to print that you will get from 0 to 9. So how many uuid I'm going to be generate. I'm going to generate a 9 uid. Okay, so let me remove this print or let me keep this one. And here I'm going to create the uuid using this particular function.

707
02:25:55.010 --> 02:25:57.220
Sunny Savita: this uuid function. Okay?

708
02:25:57.620 --> 02:26:07.640
Sunny Savita: So here, I'm going to create a function with the uuid function. Let me do one thing, let me print it. So with respect to every sort of a record, you will get one

709
02:26:07.930 --> 02:26:09.739
Sunny Savita: unique Uuidc.

710
02:26:10.080 --> 02:26:11.750
Sunny Savita: Can you see, guys, this one

711
02:26:12.210 --> 02:26:34.840
Sunny Savita: unique, uuid with respect to that? So here we are able to generate a uuid with respect to every sort of a document. Okay, it is nothing, just a unique identification number. Now. So I'm going to store the data. So vector, store dot, add document. And here is my document, and then there is a uuids. Okay. Now, once I will execute it, guys.

712
02:26:34.970 --> 02:26:38.150
Sunny Savita: so will I get my data inside the pine cone. Yes or no.

713
02:26:39.140 --> 02:26:46.550
Sunny Savita: for the uuid is same, sir, no, Praveen, it is not same. Just look into the last character. Last few. Character of the uuid.

714
02:26:47.060 --> 02:26:48.670
Sunny Savita: Okay, this one.

715
02:26:49.280 --> 02:27:04.079
Sunny Savita: No, actually, this is the giving me a function. See, it is also not the same one. Let me check. It is a function. Actually, okay, it is generating a function. But see what it will give me just a second. I think I haven't executed it properly. But

716
02:27:04.400 --> 02:27:05.380
Sunny Savita: no, see!

717
02:27:05.570 --> 02:27:12.340
Sunny Savita: So it is giving you the proper uuid. Okay, you just need to put the parenthesis over here. Got it. Now, Praveen.

718
02:27:18.620 --> 02:27:23.460
Sunny Savita: Okay. Now here you can see guys, we are able to store our data. Now, can can we check the data?

719
02:27:24.020 --> 02:27:37.319
Sunny Savita: The data, guys, yes or no. Can can I go through with the database now? Once I'll check with the database. Okay, here. Okay, let let me do one thing. See, let me open it. And how many records we have in total, we have 10 records.

720
02:27:37.430 --> 02:27:39.179
Sunny Savita: So this is my 1st record.

721
02:27:39.950 --> 02:27:42.310
Sunny Savita: Okay, here is my second record.

722
02:27:42.550 --> 02:27:55.590
Sunny Savita: Here is my 3rd record. Okay, here is my 4th record, and to every record one unique. Id is going to be associated. Now, if you want to check the embedding of this particular text and this metadata, will you able to check it. Guys

723
02:27:55.730 --> 02:27:56.980
Sunny Savita: tell me, yes or no.

724
02:27:57.270 --> 02:28:01.150
Sunny Savita: Yes, you can do it. So do one thing. Just click on this 3 dots.

725
02:28:01.280 --> 02:28:04.300
Sunny Savita: 3 horizontal dot and click on this fetch

726
02:28:04.500 --> 02:28:07.559
Sunny Savita: once we will click on this fetch. Now, see, here is our embedding.

727
02:28:07.850 --> 02:28:09.439
Sunny Savita: This is a unique Id.

728
02:28:10.820 --> 02:28:12.330
Sunny Savita: Here is a value.

729
02:28:12.850 --> 02:28:16.400
Sunny Savita: Here is a metadata in the metadata there will be a source.

730
02:28:16.610 --> 02:28:17.829
Sunny Savita: And the text.

731
02:28:18.540 --> 02:28:25.489
Sunny Savita: okay, so while we are going to be create, see? While the embedding is going to be create.

732
02:28:25.740 --> 02:28:31.539
Sunny Savita: Okay? So this text is coming inside the metadata automatically. See, this is my main thing. Value the embedding.

733
02:28:32.160 --> 02:28:37.370
Sunny Savita: Okay? And here you can see the metadata. Now, if you want to edit this record simply, you can click on this edit.

734
02:28:37.650 --> 02:28:43.769
Sunny Savita: and you will be able to edit this record whatever you want to edit. They are giving the option over here itself. You can

735
02:28:44.240 --> 02:28:48.970
Sunny Savita: simply edit those thing. And this is your dense. Vector.

736
02:28:49.840 --> 02:28:52.909
Sunny Savita: are you able to understand, guys, yes or no.

737
02:28:53.660 --> 02:28:56.100
Sunny Savita: Tell me, yes.

738
02:28:59.880 --> 02:29:22.219
Sunny Savita: Is it getting clear to all of you? This is the cosine similarity score. So once one by default score. They are associated with each and every document. But whenever you are going to fire the query, it's going to work in a same way. Okay? Means it is going to be trying. It will try to calculate the cosine similarity from scratch. Forget about this score. Don't focus on this score. Just focus on this record. So how to check the record. Just click on this 3 dots.

739
02:29:22.480 --> 02:29:32.060
Sunny Savita: Okay, just click on this fetch. So once you will click on this fetch. Now, guys, here, you will get a embedding. This is the embedding. Now tell me, guys, what will be the dimension of this embedding?

740
02:29:32.850 --> 02:29:36.020
Sunny Savita: What is the dimension of this embedding this one.

741
02:29:36.540 --> 02:29:50.670
Sunny Savita: The dimension of this embedding is going to be 7, 68. Okay, I hope it is clear. And here you can see the rest of the field. You can check out. Check out with your system as well, and I hope so you will be able to get. Now.

742
02:29:51.010 --> 02:30:13.460
Sunny Savita: if you are going to be now, if you are going to be like execute this vector, similarity, search with respect to any sort of a question, right? Whatever is there inside the document? For sure, you will get a similar data. Okay? Means the similar document from the vector, database itself. So let me do one thing. Let me call this function. Now, where where was that function? This one?

743
02:30:13.640 --> 02:30:22.809
Sunny Savita: So here I'm going to take this particular function the similarity search one on top of the vector store. Okay? And here, guys, I will.

744
02:30:23.560 --> 02:30:32.290
Sunny Savita: I will ask my question. So let's try to ask a question, the different question, okay, what length chain

745
02:30:32.580 --> 02:30:33.750
Sunny Savita: provide

746
02:30:35.610 --> 02:31:02.729
Sunny Savita: provides to us. Okay, a simple question. Let's see the the basically most near result. Okay, the nearest result of this particular sentence. Now tell me which what it is doing, which similarity score, it is calculating, guys here is going to be calculate the cosine similarities score. Right? So see, I'm scrolling a little slowly today. And I hope so. You can see my entire code and all everything. Okay.

747
02:31:02.730 --> 02:31:14.090
Sunny Savita: Now, if I'm going to be execute this part see here, you will get your results. So by default, how many? By default guys? How many documents we are able to generate? So by default, there will be a

748
02:31:14.180 --> 02:31:35.349
Sunny Savita: 4 document. Okay, can we regulate this behavior. Can we generate only 2 or 3, or 5 or 6? Yes, I can do that. So if I'm going to mention the K value, let's say, I'm going to mention the K is equal to 6. So how many records will be able to generate guys? So we'll be able to generate 6 record. Okay, if I'm going to mention K is equal to one. Now, how many record guys tell me

749
02:31:35.400 --> 02:31:47.389
Sunny Savita: one record? Okay, can we filter out based on the key, the metadata key, basically, yes or no. So let's say, instead of this one what I'm doing here, I'm just going to be.

750
02:31:47.560 --> 02:31:53.100
Sunny Savita: mention the filter value. Okay, so the filter value is going to be twit

751
02:31:53.270 --> 02:32:07.979
Sunny Savita: instead of metadata itself. I mentioned about that. So if the filter is going to be Tweet guys, let me run it and let me check out the result of it. So if I'm going to print the result and see guys, I'm just getting those document which is having a tweet

752
02:32:08.740 --> 02:32:15.750
Sunny Savita: understood. Guys. Now, did you understand the importance of the link chain over here? The link, chain

753
02:32:15.970 --> 02:32:35.149
Sunny Savita: length, chain keeping everything under the same functionality. So whatever functionality we were doing, whatever functionality we are able to apply on top of the files in the same way, after configuration of this index and all are we able to apply in the same way over the pine cone as well or not?

754
02:32:37.420 --> 02:32:41.990
Sunny Savita: Yes or no, Telby.

755
02:32:42.390 --> 02:32:48.829
Sunny Savita: In a same way we are able to do everything over the fine core, and that's the beauty of the length chain.

756
02:32:49.210 --> 02:33:08.199
Sunny Savita: So Lansing, keeping everything at a single roof inside the single roof under the single roof. Okay? So we just required the the dedicated configuration like this indexes and all. If it is a files, then different. If it is a chroma, then difference. If it is a fine cone, then different.

757
02:33:08.530 --> 02:33:14.610
Sunny Savita: and the rest of the functionality is going to be same over here, the storing and all. Don't tell me, guys, one thing.

758
02:33:14.750 --> 02:33:19.080
Sunny Savita: can I use this particular vector store, this particular vector store

759
02:33:19.790 --> 02:33:22.549
Sunny Savita: in my length in my rag chin.

760
02:33:23.590 --> 02:33:27.960
Sunny Savita: Can I use that in my Lcl chain? Can I use this one?

761
02:33:30.790 --> 02:33:33.020
Sunny Savita: Okay, I can use it. But how?

762
02:33:33.330 --> 02:33:40.240
Sunny Savita: How? What? I will have to call. If I want to use this vector. Store, tell me fast

763
02:33:40.840 --> 02:33:42.660
Sunny Savita: what I will have to call over here.

764
02:33:43.350 --> 02:33:45.770
Sunny Savita: So here I will have to call

765
02:33:47.000 --> 02:33:59.580
Sunny Savita: retriever as a retriever. Okay, right? You are right, guys. So what I'll be calling over here. I'll be calling as underscore retriever. Let me check whether this function available or not over here.

766
02:34:00.302 --> 02:34:13.709
Sunny Savita: As underscore retriever, let me take it from the files itself. Okay, and the rest of the code. Also, we can take from the files. And one more thing I would like to show you today. I think yesterday I missed that part. Can we mention the threshold value. Also.

767
02:34:14.870 --> 02:34:19.179
Sunny Savita: can we mention the threshold valuings while we are retrieving the data from the vector database?

768
02:34:20.420 --> 02:34:27.920
Sunny Savita: Yes, guys, that is also possible. We can mention the threshold value also. Okay, so just a second. 1st of all, let me

769
02:34:28.588 --> 02:34:33.640
Sunny Savita: take this as a retriever. Then I'll show you the threshold part. Okay.

770
02:34:34.330 --> 02:34:37.609
Sunny Savita: vector, that is there. Then, yes, here is the retrieval.

771
02:34:38.000 --> 02:35:03.480
Sunny Savita: So guys here, what I'm doing. I'm just going to be mentioned. I'm just going to be create this vector, database as a retriever. Okay, as a retriever. Now, I can put any sort of a number. While I'm going to be fetch the data. Let's say 3 only. Now, this is my retriever. Now, what I can do, guys on top of this retriever, can I run the invoke? Yes, for sure I can run the invoke. So once I will write anything, let's say link chain. So with respect to this link chain, only I'll be getting top 3 document.

772
02:35:03.640 --> 02:35:17.569
Sunny Savita: Okay, so here, guys, you can see we are getting top 3 document. Now, one more thing. So if you're talking about this basically similarity search and all that's fine guys, right? But can we mention the threshold also?

773
02:35:17.760 --> 02:35:25.439
Sunny Savita: Yes, we can mention the threshold. So guys, we have an accuracy. Right. So we have a range of the cosine similarity from minus one to one.

774
02:35:25.790 --> 02:35:35.410
Sunny Savita: So we can mention the threshold right up to which point you want your result, and if the accuracy is coming, less than that particular value the threshold.

775
02:35:35.550 --> 02:35:37.939
Sunny Savita: we are not going to be retriever data at all.

776
02:35:37.950 --> 02:36:07.760
Sunny Savita: So here itself, instead of search. Kwr, Gs, I'm going to mention about the threshold. Okay, so let's say, I'm going to mention the threshold as a 0 point 5. I'm saying, if the 50% document is getting match, then only return the data, then only return the reserve. Otherwise don't do it. So here I'm writing 0 point 5. And this is a hyper parameter. You can keep anything over here. Okay. Now, here, I'm going to create my retriever. This is fine. Now, if I'm going to run this chain with the length chain.

777
02:36:07.770 --> 02:36:13.489
Sunny Savita: Now, see, you guys, Pine goes in the physical going to expect your score threshold.

778
02:36:13.770 --> 02:36:15.640
Sunny Savita: is it not there, is it?

779
02:36:16.800 --> 02:36:24.580
Sunny Savita: Score threshold should be there now as a retriever. Okay, just a second, guys. I think I will have to mention the search type also wait.

780
02:36:27.312 --> 02:36:29.960
Sunny Savita: Score threshold is here.

781
02:36:30.230 --> 02:36:36.289
Sunny Savita: Let me mention the search time. Similar score threshold. Okay, let just a second guys. Let me check one more time.

782
02:36:38.250 --> 02:36:42.170
Sunny Savita: Retriever dot invoke. Fine.

783
02:36:47.900 --> 02:36:56.940
Sunny Savita: Okay, guys. So here, see whatever document you are seeing over here. Right? All this document, actually, which is having a similar T score more than 50%.

784
02:36:57.070 --> 02:37:05.970
Sunny Savita: If it is going to be less than 50%. In that case it's not going to be fetch. Those document understood. Guys tell me, yes or no.

785
02:37:06.140 --> 02:37:14.170
Sunny Savita: You can put some other word. Let's say, let let me check it out, guys, even I haven't checked. Let me check whether it is working or not. So instead of the lunch, and I'm writing sunny.

786
02:37:14.330 --> 02:37:26.739
Sunny Savita: so did we enter anything regarding the sunny inside the database. I don't think I have entered right there. So let me execute it. It was all invoke and see. It is giving to me. Okay.

787
02:37:26.850 --> 02:37:29.339
Sunny Savita: but, Page, content. Is there

788
02:37:30.850 --> 02:37:41.190
Sunny Savita: the weather forecast. Okay, it is relating with the weather forecast. I have bad feeling. I'm got into there. Okay, guys, I think we have mentioned 3 now, because of that, only it is giving to me.

789
02:37:42.065 --> 02:37:44.729
Sunny Savita: Let me mention something.

790
02:37:45.050 --> 02:37:50.550
Sunny Savita: Yeah, I think because of the key, only it is giving to me. Let me remove this key. Let's see what I will be getting now.

791
02:37:50.780 --> 02:37:54.660
Sunny Savita: retriever, is there? Line chain? Okay, I'm getting all the 4.

792
02:37:56.080 --> 02:37:58.710
Sunny Savita: Oh, here also I'm getting all the 4

793
02:37:59.150 --> 02:38:01.840
Sunny Savita: Tweet, Tweet, Tweet. Did I mention something else?

794
02:38:03.809 --> 02:38:11.549
Sunny Savita: Okay, guys, we'll have to check the threshold part. Okay, I'll be checking that one. How basically, this will, it will be working.

795
02:38:14.490 --> 02:38:16.799
Sunny Savita: We'll have to check the threshold part. Okay.

796
02:38:17.110 --> 02:38:24.640
Sunny Savita: something else, something else. Or let me put something. What I can put guys I can put. Let's say.

797
02:38:25.490 --> 02:38:29.250
Sunny Savita: hmm, okay, Google.

798
02:38:32.370 --> 02:38:40.030
Sunny Savita: It is giving to me. It is giving to me, how does it work?

799
02:38:43.830 --> 02:38:50.270
Sunny Savita: Maybe the score. With respect to each and every sentence. Now, I think it is more than point 5.

800
02:38:50.420 --> 02:38:52.099
Sunny Savita: That's why it is giving to me.

801
02:38:52.210 --> 02:38:59.139
Sunny Savita: Okay, no worries, guys, we'll we'll check it out. Okay? Or else you can check with this respect with respect to this goal threshold. And all right.

802
02:38:59.600 --> 02:39:04.930
Sunny Savita: make 0 point 2. Okay, let's do one thing. Let's keep it. 0 point 1 retriever is here invoke.

803
02:39:05.160 --> 02:39:06.100
Sunny Savita: Okay?

804
02:39:06.780 --> 02:39:09.900
Sunny Savita: Guys, I think it is using some different mechanism in back end.

805
02:39:10.060 --> 02:39:14.310
Sunny Savita: Maybe we'll have to check that 0 point 9.

806
02:39:17.480 --> 02:39:21.119
Sunny Savita: Oh, now, this time it is not giving. Hmm.

807
02:39:22.200 --> 02:39:28.730
Sunny Savita: 0 point 8 giving 2 0, not giving

808
02:39:29.110 --> 02:39:37.810
Sunny Savita: 0 point 7. Yeah, so keep threshold high. I think so. 0 with 0 point 1. It will give you everything, because at least 10% it will match now.

809
02:39:38.170 --> 02:39:41.199
Sunny Savita: So why you are saying 0 point 1 again.

810
02:39:41.330 --> 02:39:45.069
Sunny Savita: So it is giving me. Oh, this is for now let's see

811
02:39:45.507 --> 02:39:50.740
Sunny Savita: at least coming like a 70% of accuracy it is getting. Because of that.

812
02:39:51.680 --> 02:39:58.529
Sunny Savita: I think, guys, you you got now right how this threshold will work. Can you play with a different different value of it. Just keep it high

813
02:39:58.660 --> 02:40:14.190
Sunny Savita: to get the most relevant data from your vector database. Okay, keep keep it. Keep it high. Keep it high. I would suggest you keep it 90%, 85%, 80% at least right? Great. Now, what I will do. So

814
02:40:14.570 --> 02:40:20.749
Sunny Savita: on top of it, guys, we can build a rag. Guys, you know how to build a rag on top of it. Yes or no.

815
02:40:21.540 --> 02:40:28.190
Sunny Savita: Tell me we understood this thing right in a previous class itself. We have seen that.

816
02:40:28.770 --> 02:40:32.739
Sunny Savita: Okay, so what you can do, you can take a same code. Let me do it

817
02:40:34.080 --> 02:40:42.398
Sunny Savita: here will require the model. I'm going to use the Gemini model. Okay, let me do is do it, guys quickly. And

818
02:40:43.120 --> 02:40:45.879
Sunny Savita: then, basically, I can give you one assignment.

819
02:40:46.120 --> 02:40:49.490
Sunny Savita: So here is the Germany model.

820
02:40:49.620 --> 02:41:17.869
Sunny Savita: Now, after taking a gemini model. Okay, what I will do, guys, I'll pull the prompt. Now, this prompt. Actually, you can write in a custom way also. Okay, this could be a custom prompt as well, and you can take the code from the same previous file. Now, if you will print this particular prompt, you will find out the prompt in a very specific way, right in a beautiful manner over the console itself. So let me do one thing let me take this entire paper.

821
02:41:17.990 --> 02:41:31.609
Sunny Savita: I'm going to paste it over here and let me execute it. See, guys. So this is my prompt which I'm able to fetch. Okay, if you want to write a custom prompt, we can write a custom prompt also. Okay, I'll show you that custom prompt part. Wait.

822
02:41:31.720 --> 02:41:41.299
Sunny Savita: So let me take this run Ables and the output parser, and here is not enable or output parser, no data. Wise guys, I can take any sort of a data. Okay?

823
02:41:41.720 --> 02:41:55.480
Sunny Savita: So here I'm going to format the document and let me do one thing. This is my like document, whatever, I'll be fetching from the vector, database. Here is my rack chain guys already. I explained you this code in a proper way, in a proper manner.

824
02:41:55.580 --> 02:41:59.650
Sunny Savita: And now, after that, what I'll do.

825
02:41:59.770 --> 02:42:20.429
Sunny Savita: I will invoke this particular chain. Okay, so here is the invocation of it. That's it, guys. Now, one thing is missing over here. I think we haven't kept the data, the appropriate data. Okay, inside a vector database. So what you can do, you can take any sort of a data and you can keep it inside a vector database. And then you can

826
02:42:20.810 --> 02:42:27.079
Sunny Savita: build this rag pipeline, the further rag and all. Should I do it, guys, or will you do it? Tell me fast?

827
02:42:27.750 --> 02:42:33.570
Sunny Savita: Will you able to do this thing. With respect to any custom data, any any like a Pdf, and all

828
02:42:33.970 --> 02:42:38.350
Sunny Savita: here, I kept the data. Okay, you just need to like do it on the same way.

829
02:42:38.540 --> 02:42:56.220
Sunny Savita: Okay, now, one thing I'm doing over here. Just a second guys, someone was asking regarding the custom prompt. If you want to create our own custom. Prompt how? It is possible. Okay, let me show you that as well. I kept the custom prompt. Also, give me a moment, guys. Okay, I will take that.

830
02:43:00.730 --> 02:43:17.169
Sunny Savita: sir. Can you please show Rag long with a Pdf. With custom. Prompt. See with the Pdf. I shown you yesterday. Sanskar Sanka. Okay, you can go and check with my files. I took the same code. You just need to run that code, and you will be able to get custom prompt. I'm showing you that part. Okay, don't worry.

831
02:43:23.360 --> 02:43:25.920
Sunny Savita: I created one prompt template.

832
02:43:29.250 --> 02:43:33.819
Sunny Savita: Yeah, you can do the data cleaning. If your data is too much messy. It is a subjective question.

833
02:43:40.460 --> 02:43:45.200
Sunny Savita: Can we rewrite our own runnables? It is difficult. Use the link chain runnables. Only.

834
02:44:00.900 --> 02:44:11.709
Sunny Savita: you guys. So here I'm going to create my own prompt. So see this prompt. Actually, it's a we are pulling it from the hub. If you don't know about the hub link and Hub. Let me show you the link chain hub.

835
02:44:11.820 --> 02:44:16.230
Sunny Savita: Has anyone seen the luncheon hub? Anyone gone through the luncheon? Hub or not?

836
02:44:18.580 --> 02:44:20.090
Sunny Savita: Lantern hub?

837
02:44:21.000 --> 02:44:30.619
Sunny Savita: There you will find out a different, different type of prompt. You can take any sort of a prompt and you can. Basically take a reference of that a huge prompt okay.

838
02:44:31.101 --> 02:44:39.559
Sunny Savita: I still remember guys, in one of my project I written a thousand line of prompt for this gpt. 4 model. And it was able to take that.

839
02:44:39.620 --> 02:45:04.739
Sunny Savita: The the total prompt size was around 1,019, something rows. Okay? I returned. That much use prompt. So yeah, that kind of prompting. Also, you will find out in a real time. So this is the prompt guys like all the different different prompt you will find out. Let's say you want to build something, Chatbot. Just click on the chat. Bot! How you will get a prompt with respect to the Chatbot. Just click on it, guys all the prompt template and all everything.

840
02:45:04.790 --> 02:45:13.889
Sunny Savita: So you can. Analysis. See, this is the like, the way of defining a complete prompt and all. So how they are doing it in the same way. Actually, you can write

841
02:45:14.610 --> 02:45:15.529
Sunny Savita: this one.

842
02:45:16.110 --> 02:45:22.680
Sunny Savita: So I'm providing you this link, you can go through with it. And I hope so you will be able to understand it.

843
02:45:29.330 --> 02:45:38.340
Sunny Savita: Can we see the similarities code in the result? Yes, I think we can see, we'll have to check the the inner parameter and all of it we can print that forward. Okay.

844
02:45:40.740 --> 02:45:51.930
Sunny Savita: great. So did you get a link, guys, yes or no. Now let me do one thing. Let me create a custom prompt over here. So for creating a custom prompt, you will have to import something that is called the prompt template. So from the link change

845
02:45:53.120 --> 02:45:57.250
Sunny Savita: underscore core dot prompts.

846
02:45:59.840 --> 02:46:02.229
Sunny Savita: I'm going to import the prompt template.

847
02:46:03.420 --> 02:46:04.260
Sunny Savita: Okay.

848
02:46:05.310 --> 02:46:09.600
Sunny Savita: PRO. Pmt. Underscore template.

849
02:46:13.560 --> 02:46:16.280
Sunny Savita: Right? I hope the spelling is correct.

850
02:46:17.040 --> 02:46:18.900
Sunny Savita: It's a template. Okay.

851
02:46:19.130 --> 02:46:23.700
Sunny Savita: Now, after getting a prompt template after importing this prompt template, let me run it.

852
02:46:24.600 --> 02:46:33.120
Sunny Savita: So this spelling is also not correct. Length shield, CHAI, EN, okay, no.

853
02:46:33.820 --> 02:46:35.980
Sunny Savita: it's not going to be import.

854
02:46:37.010 --> 02:46:40.200
Sunny Savita: I think something is wrong. Just a second guys.

855
02:46:44.420 --> 02:46:45.140
Sunny Savita: Yeah.

856
02:46:45.260 --> 02:46:51.839
Sunny Savita: So now, perfect, we are able to import the prompt template. Now, after importing the prompt template to this particular class, I'll be passing 2 things.

857
02:46:52.180 --> 02:46:56.229
Sunny Savita: The 1st thing is going to be what the 1st thing is going to be, template itself.

858
02:46:56.470 --> 02:47:02.770
Sunny Savita: Okay? And the second thing is going to be input variable. Now, tell me, guys, in my case, how many input variables I have

859
02:47:04.600 --> 02:47:06.150
Sunny Savita: input variables.

860
02:47:07.070 --> 02:47:14.179
Sunny Savita: Okay? So if you will look into my input video passing guys. So here, I'm passing a caution, just a caution. Okay.

861
02:47:14.310 --> 02:47:27.089
Sunny Savita: so this question, basically is going to be my input variable, this context and all everything will be taken care by this one. Only if you want to check the prompt, this, this particular prompt, you can check it out

862
02:47:27.785 --> 02:47:29.420
Sunny Savita: just a second.

863
02:47:30.770 --> 02:47:32.960
Sunny Savita: Let me take this prompt. Okay.

864
02:47:33.310 --> 02:47:35.920
Sunny Savita: I'm just going to be. Keep it over here.

865
02:47:36.130 --> 02:47:46.849
Sunny Savita: So see what it is saying. It's saying, prompt is there prompt double the input variable. 2 input type, partial variable is 0 template. So I can take the same template from here

866
02:47:48.770 --> 02:47:53.239
Sunny Savita: and let me take till here only this one.

867
02:47:54.220 --> 02:48:02.079
Sunny Savita: so I can take a same template, and I can keep it over here. This one you can write your own one as well. I don't have any issue, no seagulls.

868
02:48:02.420 --> 02:48:03.950
Sunny Savita: So this is the template.

869
02:48:04.250 --> 02:48:05.120
Sunny Savita: Okay.

870
02:48:05.540 --> 02:48:11.979
Sunny Savita: now, here will be my input variable. So my input variable is going to be 2, this context. And the questions.

871
02:48:12.300 --> 02:48:14.190
Sunny Savita: okay, this one.

872
02:48:14.300 --> 02:48:19.529
Sunny Savita: is it clear to all of you guys, yes or no, how to create a prop like the prompt template.

873
02:48:21.680 --> 02:48:33.050
Sunny Savita: Now, why I'm getting this issue because of this only. So this is my template. Okay? And here is my input variable. And this 2 input variable because of this retriever. And this questions.

874
02:48:33.550 --> 02:48:44.190
Sunny Savita: sorry this context. And this question, okay, this 2 input variable would be there. Now let me do one thing, let me write it inside the prompt. Okay, prompt, is there?

875
02:48:44.330 --> 02:48:59.249
Sunny Savita: So it is saying, invalid syntax. Why, it is an invalid syntax, because we have a multi-line string. Okay, so we'll have to keep it inside the triple code. This entire thing. Let me keep it inside the triple code. And now let me execute it. So still it is giving me error.

876
02:48:59.360 --> 02:49:25.379
Sunny Savita: Perhaps you forgot a comma. Okay? Sorry, guys. I forgot a comma over here. Now it is perfect. So I got a prompt now, after getting a prompt guys, okay, if you will check with a prompt. So this is going to be my custom prompt. Okay, likewise, you can create a custom prompt and see it is in a same way, whatever prompt. Actually, we were fetching from the hub, this one and the prompt, basically we have created. It's the same one, yes or no. Tell me

877
02:49:25.520 --> 02:49:30.459
Sunny Savita: so, either that or either this, whatever prompt I want to be used. I can use that.

878
02:49:30.760 --> 02:49:32.739
Sunny Savita: Give my point, guys, yes or no.

879
02:49:33.180 --> 02:49:35.049
Sunny Savita: Is it getting clear to all of you?

880
02:49:36.770 --> 02:49:46.710
Sunny Savita: Yes, now the same prompt I can use for that. Now tell me, guys, on top of this prompt, if I can write the invoke, will it work for me? Tell me.

881
02:49:48.210 --> 02:49:56.559
Sunny Savita: can I write the invoke over here? So here, guys, what I'm doing? I'm just going to be, write an invoke. So first, st I'll provide my question.

882
02:49:59.560 --> 02:50:04.819
Sunny Savita: Okay, I think in this way question would be there. The question is.

883
02:50:05.080 --> 02:50:16.279
Sunny Savita: my name is Sunny again by the context also. So let me provide the context over here. So if I'm going to be, write a context, so context in a double code again.

884
02:50:16.390 --> 02:50:20.380
Sunny Savita: So here I can write the let's say, link change is my contact.

885
02:50:20.720 --> 02:50:22.959
Sunny Savita: Or I can write some fruitful question.

886
02:50:23.460 --> 02:50:25.479
Sunny Savita: what is a link chain? Okay.

887
02:50:26.180 --> 02:50:29.420
Sunny Savita: what is a length change? So this is the user question.

888
02:50:29.740 --> 02:50:33.769
Sunny Savita: And this context, basically, this will come from the vector database. Okay?

889
02:50:34.130 --> 02:50:38.810
Sunny Savita: So Link chain is very super framework.

890
02:50:39.240 --> 02:50:41.660
Sunny Savita: Both Llms right?

891
02:50:41.850 --> 02:50:52.999
Sunny Savita: Got it? Got it, guys. Now, if I'm going to be run this prompt dot invoke. Now here you will be able to find out the complete text. Now, finally, this text actually will be given to the model.

892
02:50:53.540 --> 02:51:15.159
Sunny Savita: Okay, you were thinking to me now, sorry you were asking to me now, Sunny, what we are giving to the model. Right? So this particular text. Actually, we are going going to be passed to the model. See over here. So we are saying to the model, Okay, you are an assistant for question and answering task. Use the following piece of retrieval context to answer the question, if you don't, don't answer, just say that you don't know.

893
02:51:15.360 --> 02:51:35.349
Sunny Savita: Question. Use 3 sentence maximum and keep the answer, okay, concise. So yeah, this is fine. You can mention some extra and the additional instruction. So here is your question. Okay, so question is, what is the link chain? And here is the context, length. Chain is a very super framework. Now, Llm. Will analysis this entire information

894
02:51:35.990 --> 02:51:38.780
Sunny Savita: and based on this particular information.

895
02:51:38.940 --> 02:51:41.449
Sunny Savita: Llm. Is going to be generate on circles.

896
02:51:41.760 --> 02:51:47.219
Sunny Savita: right? So if you will look into the architecture, the architecture, basically, which I have shown you this one

897
02:51:47.629 --> 02:51:52.720
Sunny Savita: the architecture which I created for all of you, instead of the architecture. I kept one thing

898
02:51:53.800 --> 02:52:04.130
Sunny Savita: just focus over here, guys, this one prompt here, you can see prompt query and retrieve data.

899
02:52:04.730 --> 02:52:07.820
Sunny Savita: Now, did you understand how it is getting formed?

900
02:52:08.410 --> 02:52:14.069
Sunny Savita: Did you get it, guys, how it is getting form. Everything prompt will be there. The return instruction

901
02:52:14.800 --> 02:52:24.539
Sunny Savita: query will be there means my user question and retrieve data will be there from the vector, database. And this all the information we are passing to the Llm.

902
02:52:27.030 --> 02:52:28.180
Sunny Savita: tell me, guys.

903
02:52:30.240 --> 02:52:45.530
Sunny Savita: which part of the prompt is coming from the vector database. Great question guys. So if you haven't understand so far, this thing, I think you are not focusing in the class, this part will be coming. The context will be coming from the vector database guys, please.

904
02:52:46.210 --> 02:53:12.400
Sunny Savita: Okay, you will have to be corporate little bit. You cannot be this much of dumb guys again. I'm saying, if you're going to work into the industry along with the smart people and the software developer and all, you could not be like this, please, guys, okay, use at least your 2010 to 20% of brain. And understand if I'm showing you the example and all everything. Okay, if you're not able to get that, revise this thing again and again. Go through with the solution

905
02:53:12.590 --> 02:53:13.580
Sunny Savita: understood.

906
02:53:14.710 --> 02:53:36.709
Sunny Savita: But you hard coded this in a prompt just to explain you everything is going to work by this chain, the chain, basically, which I've created over here automatically. Once I will write a code automatically, the question will be placed at the place of the question. Retrieval, retrieve. Information will come from the retriever, and here you can see the prompt model St. Output parts and all everything is working in a sync.

907
02:53:37.700 --> 02:53:44.129
Sunny Savita: So here I just shown you the prompt part how the final prompt is going to be formal.

908
02:53:45.930 --> 02:53:48.840
Sunny Savita: how the final prompt is going to be created.

909
02:53:49.640 --> 02:53:50.480
Sunny Savita: Got it

910
02:53:54.650 --> 02:53:56.649
Sunny Savita: understood? Guys tell me, yes or no.

911
02:53:57.070 --> 02:54:01.640
Sunny Savita: Now, how the information is going to be passed from the vector database. See?

912
02:54:01.790 --> 02:54:08.810
Sunny Savita: Let me explain you the complete flow. Okay? So if we are asking a question, this is my question.

913
02:54:09.720 --> 02:54:15.880
Sunny Savita: The question will come to the the question will come over here, and the question will come to the Retriever.

914
02:54:16.310 --> 02:54:20.399
Sunny Savita: Now, here, we'll find out top K. Chunks, let's say K. Is equal to 3.

915
02:54:21.560 --> 02:54:29.549
Sunny Savita: So Retriever got the information retriever got the information. This one.

916
02:54:32.860 --> 02:54:36.129
Sunny Savita: I have a user question over here. This one

917
02:54:37.760 --> 02:54:44.749
Sunny Savita: user question, is there retrieve information? Is there this? Both information will come to the prompt.

918
02:54:46.500 --> 02:54:51.829
Sunny Savita: so prompt will become how prompt will become like this!

919
02:54:53.260 --> 02:54:56.290
Sunny Savita: Like what guys like this? This one.

920
02:54:57.130 --> 02:55:06.880
Sunny Savita: once the prompt, will become like this, then what will happen? Tell me. Once the prompt will become like this, the information will go to the

921
02:55:07.030 --> 02:55:08.100
Sunny Savita: model.

922
02:55:08.960 --> 02:55:14.220
Sunny Savita: Now, model will generate output, and then final output will go to the Str output parcel

923
02:55:14.920 --> 02:55:20.160
Sunny Savita: now understood or not. Tell me, yes or no.

924
02:55:21.850 --> 02:55:23.560
Sunny Savita: Is it getting clear or not?

925
02:55:28.530 --> 02:55:37.359
Sunny Savita: Everything is clear, crystal clear if you will go through with it again. Now means once you will revise that like, for sure, it's going to be clear. Okay.

926
02:55:37.850 --> 02:55:46.899
Sunny Savita: yeah, everything will happen now, over here, this one at this particular place automatically. Once we'll invoke it likewise, everything have been formed in the back end itself. Okay.

927
02:55:49.970 --> 02:56:00.469
Sunny Savita: set up a little offensive on the asking of the comments. No, we have to be like hard sometimes. Shiva Kumar. See, we are not going to be harsh now, like, people will not think about themselves. Okay?

928
02:56:01.030 --> 02:56:13.800
Sunny Savita: Because I'm telling you this with my experience. Because, see if I'm not telling you, this thing is as of. Now, currently, you will face the same thing in industry later on. So do it right now, understand? Currently. Okay.

929
02:56:14.300 --> 02:56:15.200
Sunny Savita: good.

930
02:56:18.480 --> 02:56:32.010
Sunny Savita: perfect. Now let's do one thing, guys let me give you the assignment. So 1st of all, do one thing. Try to like. See? 1st of all, do one thing, guys, or try to be like a complete this particular solution with the appropriate data.

931
02:56:32.020 --> 02:56:49.219
Sunny Savita: Not a strict teacher. Okay. So 1st of all, guys do one thing, try to be complete this particular solution. With the actual data, you can take the any Pdf and all you can use the previous example only. But tell me, guys is, everything is clear or not. I think I don't need to explain you anything else. Apart from this one

932
02:56:49.220 --> 02:57:05.000
Sunny Savita: means I clarify everything. Whatever part was there in terms of the article, sorry architecture and the theoretical concept, as well as the practical example and all. Okay. Now let me give you the assignment. So here is a couple of thing. With respect, the assignment. Okay.

933
02:57:05.090 --> 02:57:21.660
Sunny Savita: so here I'm writing post complete the remaining part of this notebook.

934
02:57:22.320 --> 02:57:26.179
Sunny Savita: Okay, create a proper rack

935
02:57:30.210 --> 02:57:31.130
Sunny Savita: noted.

936
02:57:31.420 --> 02:57:32.560
Sunny Savita: Then, guys.

937
02:57:35.710 --> 02:57:37.339
Sunny Savita: second, assignment is

938
02:57:43.990 --> 02:57:55.360
Sunny Savita: second assignment is what I can write. Take up Pdf with text image table.

939
02:57:56.130 --> 02:57:57.120
Sunny Savita: Okay?

940
02:57:57.620 --> 02:58:17.419
Sunny Savita: First, st fetch the data from Pdf, second, restore 8 inside the vector, database.

941
02:58:18.650 --> 02:58:20.910
Sunny Savita: Use any of them.

942
02:58:22.820 --> 02:58:33.720
Sunny Savita: First, st Mongodb, second, astra, dB, 3, rd open search.

943
02:58:35.310 --> 02:58:36.190
Sunny Savita: Okay?

944
02:58:36.640 --> 02:58:40.120
Sunny Savita: And 4, th one, you can use the

945
02:58:41.190 --> 02:58:49.980
Sunny Savita: basically this one Milvius. Okay, coordinate on Milvius anything you can. I? If I'm pronouncing wrong, let me check out with the correct spelling.

946
02:58:50.270 --> 02:58:57.910
Sunny Savita: It's a Milvis. No Melvius or Melvis. I thing need to check that.

947
02:58:59.850 --> 02:59:10.340
Sunny Savita: Okay, Bill was use the middlewares. Right? So Mongodb, extra open search. Yeah, mailverse. Right then, guys.

948
02:59:11.890 --> 02:59:12.940
Sunny Savita: could you?

949
02:59:13.090 --> 02:59:16.550
Sunny Savita: Oh, a retriever.

950
02:59:17.470 --> 02:59:18.330
Sunny Savita: Sorry.

951
02:59:20.792 --> 02:59:29.879
Sunny Savita: Yeah. Create a index with all 3 index mechanism.

952
02:59:31.940 --> 02:59:34.230
Sunny Savita: Mech mechanism.

953
02:59:35.130 --> 02:59:37.169
Sunny Savita: 1st is a flat index.

954
02:59:38.660 --> 02:59:46.760
Sunny Savita: Seconded Snsw, there's the Ivr, okay, now, create.

955
02:59:46.940 --> 02:59:51.880
Sunny Savita: E, the retriever pipeline.

956
02:59:53.410 --> 03:00:03.260
Sunny Savita: Okay, and check the okay, here, what you can do, guys

957
03:00:04.630 --> 03:00:11.770
Sunny Savita: use any of them fetch the data from the Pdf, take a Pdf, I can write, take a multiple Pdf

958
03:00:14.880 --> 03:00:22.010
Sunny Savita: multiple periods with Texas images and table. Okay, fetch the data from the Pdf.

959
03:00:23.150 --> 03:00:25.510
Sunny Savita: and at least there should be

960
03:00:27.390 --> 03:00:30.880
Sunny Savita: at least there bare minimum. There should be

961
03:00:34.870 --> 03:00:44.390
Sunny Savita: 200 pages. Okay, then store inside the vector, database. So here, after this one, if chunking is required.

962
03:00:45.380 --> 03:00:47.530
Sunny Savita: if chunking required.

963
03:00:50.750 --> 03:00:51.750
Sunny Savita: do

964
03:00:55.760 --> 03:01:01.500
Sunny Savita: Chan, and then embedding M.

965
03:01:02.420 --> 03:01:14.819
Sunny Savita: Embedding. Okay? So if Chunky do chunking and then embedding right, then it stored inside the vector, database. Any of them you can use create an index with all the 3 mechanism like flat Hnsw, Ivf. Not create a retriever pipeline

966
03:01:15.040 --> 03:01:17.750
Sunny Savita: check the retriever.

967
03:01:21.630 --> 03:01:28.510
Sunny Savita: Fine. Okay, which one is a hospice.

968
03:01:29.930 --> 03:01:30.800
Sunny Savita: Okay?

969
03:01:32.165 --> 03:01:32.980
Sunny Savita: Use.

970
03:01:33.610 --> 03:01:35.340
Sunny Savita: See here what you can do

971
03:01:35.894 --> 03:01:48.950
Sunny Savita: check the retriever time, which one is the fastest. Now print off accuracy a school of every similarity

972
03:01:49.220 --> 03:01:50.130
Sunny Savita: suck.

973
03:01:51.150 --> 03:01:55.890
Sunny Savita: Okay, then keep the threshold.

974
03:01:56.830 --> 03:02:02.959
Sunny Savita: If you want to do it right.

975
03:02:03.140 --> 03:02:10.589
Sunny Savita: So print the accuracy score of every similarity. Search. Keep the threshold of every sorry keep the threshold

976
03:02:10.930 --> 03:02:19.760
Sunny Savita: of keep the threshold if you want to do it, or else you can remove this one otherwise necessary. You will be confusing, because I already mentioned the threshold part. Okay.

977
03:02:19.990 --> 03:02:29.249
Sunny Savita: so print the accuracy score for each and every similar research, right? I hope, till here everything is fine now. So after that, guys what you will have to do.

978
03:02:30.340 --> 03:02:36.730
Sunny Savita: perform the a rewriting using either

979
03:02:40.660 --> 03:02:41.890
Sunny Savita: we use it?

980
03:02:42.030 --> 03:02:46.070
Sunny Savita: Bm, 25 or Mmr, okay.

981
03:02:46.620 --> 03:02:55.140
Sunny Savita: so guys, this 2 technique is a good one for the re-ranking. You can use the Bm 25. Technique for the keyword and all. And here is a Mmr. Now, chunking wise.

982
03:02:56.630 --> 03:03:02.000
Sunny Savita: Use the semantic, shunking northern.

983
03:03:04.440 --> 03:03:05.280
Sunny Savita: Okay.

984
03:03:05.490 --> 03:03:10.720
Sunny Savita: Use the cementing chicken cube technique like

985
03:03:10.990 --> 03:03:15.430
Sunny Savita: for perform the re-ranking, either using Bmm. Bm, 25, or mmr.

986
03:03:15.730 --> 03:03:16.710
Sunny Savita: That.

987
03:03:17.830 --> 03:03:22.130
Sunny Savita: Oh, then write a prompt

988
03:03:25.930 --> 03:03:47.269
Sunny Savita: template, okay, and generate, output, generate a output group alone, and render that output

989
03:03:51.420 --> 03:03:55.570
Sunny Savita: render that output over the dots.

990
03:03:56.710 --> 03:03:59.829
Sunny Savita: Okay, guys. So see, this is a complete assignment.

991
03:04:00.110 --> 03:04:06.139
Sunny Savita: right? So this is going to be a complete project itself. And believe me, guys, if you are able to complete this particular project.

992
03:04:06.580 --> 03:04:14.960
Sunny Savita: if you are able to complete this particular project right as it is, you can explain in an interview. And believe me, if you're going to be explained this particular.

993
03:04:15.800 --> 03:04:28.860
Sunny Savita: if in this particular use case in an interview, as it is, there is a higher chances. That interview will select you. Okay, in the near future I'll give you a couple of more. Now, whatever thing I'm not discuss. Let me highlight this thing.

994
03:04:30.060 --> 03:04:32.340
Sunny Savita: I haven't discussed this thing.

995
03:04:34.800 --> 03:04:39.160
Sunny Savita: If I haven't discussed them, you need to explore.

996
03:04:39.890 --> 03:04:48.770
Sunny Savita: That's it, guys. I'm not going to explain you and add an additional tip as a additional lip.

997
03:04:49.720 --> 03:04:56.040
Sunny Savita: You can follow rag or playlist.

998
03:04:58.360 --> 03:05:00.120
Sunny Savita: Right playlist from mine.

999
03:05:01.940 --> 03:05:10.019
Sunny Savita: You, too. Okay, most of the part you will get from there right now. I haven't discussed that. You need to explore this part

1000
03:05:10.410 --> 03:05:15.000
Sunny Savita: which one I haven't discussed. Then I haven't discussed this part. You need to explore this one.

1001
03:05:15.380 --> 03:05:31.249
Sunny Savita: Check the retriever time faster. Okay, even read ranking. All see? Ivf and Hnsw, I haven't discussed right? And this database also, you have to export. Okay, so, guys, this is a complete assignment. Tell me, will you do it or not?

1002
03:05:33.430 --> 03:05:35.840
Sunny Savita: Will you do it? Guys will be fast.

1003
03:05:36.070 --> 03:05:40.029
Sunny Savita: Yes, okay. Now, after completing it.

1004
03:05:48.020 --> 03:06:03.890
Sunny Savita: Okay. After completing it, keep it on your Github, and share that link on my mail.

1005
03:06:04.160 --> 03:06:04.960
Sunny Savita: I do.

1006
03:06:05.440 --> 03:06:08.039
Sunny Savita: Okay. Sn message, right?

1007
03:06:08.670 --> 03:06:20.370
Sunny Savita: Vs. 3, 3, 6, 5@therategmail.com. Okay and share the assignment in your

1008
03:06:23.650 --> 03:06:26.249
Sunny Savita: community chat as well.

1009
03:06:27.780 --> 03:06:33.440
Sunny Savita: But I gave Kurish right sunny.

1010
03:06:33.650 --> 03:06:35.579
Sunny Savita: clear guys tell me, yes or no.

1011
03:06:35.720 --> 03:06:37.309
Sunny Savita: And the deadline is

1012
03:06:42.280 --> 03:06:45.880
Sunny Savita: Bill priority.

1013
03:06:46.190 --> 03:06:56.010
Sunny Savita: Okay, till Friday. I can consider up to 9 o'clock till Friday 9. 0, Globe

1014
03:06:57.640 --> 03:07:01.310
Sunny Savita: understood. Guys tell me, is it clear or not? The complete assignment is clear.

1015
03:07:06.640 --> 03:07:11.949
Sunny Savita: Yes, Shyam, whatever doubt you have, you can ask me in a doubt session. Okay.

1016
03:07:13.710 --> 03:07:23.579
Sunny Savita: please explain his 1st question. What we need to do 1, st 1st means, first, st complete this. Remaining notebook. Okay, first, st complete the remaining.

1017
03:07:23.800 --> 03:07:27.830
Sunny Savita: Okay, just a second remaining part of this notebook. Okay.

1018
03:07:29.660 --> 03:07:31.889
Sunny Savita: this is the second assignment. This

1019
03:07:32.570 --> 03:07:34.740
Sunny Savita: guys tell me how many of you you will do it.

1020
03:07:42.440 --> 03:07:47.980
Sunny Savita: 9 Pm. Or 9 Am. 9 a. Pm, okay, 9 pm. Guy is

1021
03:07:51.540 --> 03:07:54.540
Sunny Savita: subkutcha, yeah, exact exact match.

1022
03:07:55.100 --> 03:07:55.850
Sunny Savita: That's good.

1023
03:08:00.190 --> 03:08:12.634
Sunny Savita: Okay, perfect. So guys, I think I have done with the rag. Means this vector database and all. Whatever task I got now from next class onwards, we'll start with the agents. Okay, in rag

1024
03:08:13.220 --> 03:08:15.650
Sunny Savita: only this much of thing we are going to be discussed.

1025
03:08:15.710 --> 03:08:29.886
Sunny Savita: But if we are going to be, launch any specific course on top of the rack, right? So for sure. We'll discuss out so many things in very depth. Okay, so do you want that course like from my end? Tell me, guys, if you want, then

1026
03:08:30.170 --> 03:08:48.519
Sunny Savita: we'll we'll launch. I'll launch it. I will launch it maybe within like one or 2 months. Okay? First, st I'll be preparing the content in a like in a very comprehensive manner. Then, only we'll think about it. Okay, so fine guys agent Wise, we'll start from next class itself. So we'll start from the lang graph.

1027
03:08:49.460 --> 03:09:05.550
Sunny Savita: Okay? Christ asked me to complete about couple of concept regarding a Langra. We'll see from next class onwards. So guys the next, the topic of the next class is going to be lang graph. And this is going to be our 1st agent. So from here, guys, our agentic session is going to be start

1028
03:09:06.074 --> 03:09:10.200
Sunny Savita: agentic sessions is going to be start, and that will be your main sessions.

1029
03:09:11.190 --> 03:09:23.839
Sunny Savita: Okay, so Saturday agentic sessions. And this will be a main session. And first, st we'll start from the Lang Drop itself. Lcl. Langshin Drag. Now it is not required. This much information is enough for all of you guys. Okay.

1030
03:09:24.950 --> 03:09:30.439
Sunny Savita: But your video will do that. Okay, don't worry.

1031
03:09:30.750 --> 03:09:39.260
Sunny Savita: Now, guys, I can share this code. And all, 1st of all, sell me. Okay, guys, last time I'm asking, then I'll close the session. Is this clear or not? This entire one?

1032
03:09:43.810 --> 03:10:00.110
Sunny Savita: Yeah, it will be available in the resource section also. Okay, good. Now, this is a topic for the next class. Okay, fine. I'm gipping all the data, and I'll provide to you guys. Should I keep all this thing over the Github, I think. Isn't it that much easy, right compared to the jib?

1033
03:10:01.050 --> 03:10:08.059
Sunny Savita: No, okay, I'll check, maybe from the next class. Now

1034
03:10:08.540 --> 03:10:15.940
Sunny Savita: push it over the Github. Okay, we'll we'll I'll create one private rep. Okay, there, I'll push it over.

1035
03:10:17.960 --> 03:10:22.299
Sunny Savita: I don't know why Chris is doing the gyp of it.

1036
03:10:29.570 --> 03:10:31.919
Sunny Savita: Dip is good, or is it

1037
03:10:41.340 --> 03:10:46.020
Sunny Savita: agent? Tech? Right will come first.st We'll learn about the agenda. Then only the agent ticket will come. Okay.

1038
03:10:47.530 --> 03:11:04.219
Sunny Savita: what about the database? Caching in rag, caching, and all everything? See, there is a like hundreds of concept in a rag itself. If you are going to be teased that now. So you will only ask, sir. I enroll in agent tech course you are teaching rag for the next 3 to 4 months. Where is the agent?

1039
03:11:05.140 --> 03:11:14.729
Sunny Savita: Okay, please understand. So, Omgar rag, I would say, it's a like a very comprehensive with a detail topic. Okay, the chapter itself.

1040
03:11:16.640 --> 03:11:25.309
Sunny Savita: I suggested, suggested to Krishna. Even we discussed the last week, sir. In a same way. Can we launch one more course for the

1041
03:11:25.946 --> 03:11:28.479
Sunny Savita: basically this agents also.

1042
03:11:28.740 --> 03:11:34.959
Sunny Savita: So sorry this rag also. So yeah, we are thinking about that. Maybe we'll do it. Okay?

1043
03:11:37.440 --> 03:11:40.940
Sunny Savita: So vector, database I created

1044
03:11:44.620 --> 03:11:48.840
Sunny Savita: when the Llm. Ops is launching Llm. Ops is launching on 13th of July.

1045
03:11:57.570 --> 03:12:17.369
Sunny Savita: Yeah, we I understand that. But, as I told you know, as a like the the live class itself, we have still some limitations. Okay, regarding this right topics. And also, you can like explore that part. If you have any sort of issue in doubt, or we can discuss on top of it. Okay, so did you get a like a file. Guys, yes or no. Should I send you again

1046
03:12:18.040 --> 03:12:21.443
Sunny Savita: if you got it? Then please do let me know an entire

1047
03:12:22.570 --> 03:12:25.760
Sunny Savita: this task, and all, everything is there itself. Okay.

1048
03:12:31.210 --> 03:12:38.139
Sunny Savita: and let me post this task. Now, inside the group

1049
03:13:00.220 --> 03:13:03.685
Sunny Savita: rag with memory rag with this, that

1050
03:13:05.630 --> 03:13:11.729
Sunny Savita: just the second I I'll give you the workaround a little, the rag with memory and all everything. Okay, let's just

1051
03:13:16.790 --> 03:13:19.840
Sunny Savita: so you can take a task from here as well.

1052
03:13:20.100 --> 03:13:30.030
Sunny Savita: If you want to learn rag with memory. Now, just a second, I'm giving you the video. Guys, I recorded everything. Okay, if you want to learn additionally, now you can learn from there

1053
03:13:30.390 --> 03:13:34.339
Sunny Savita: again. I'm not forcing. I'm just giving you the solution. It's up to you.

1054
03:13:34.713 --> 03:13:37.390
Sunny Savita: If you want to learn if you don't want to learn. Okay.

1055
03:13:38.000 --> 03:13:41.929
Sunny Savita: don't say later on, sir. You're sharing your Youtube video, this that

1056
03:13:53.040 --> 03:13:57.390
Sunny Savita: follow the Llm. Ops. Timing 2 o'clock afternoon, 2 o'clock. Okay.

1057
03:14:01.010 --> 03:14:03.590
Sunny Savita: okay. So see, let me show you the

1058
03:14:07.130 --> 03:14:19.799
Sunny Savita: memory wise. So once you will go through with my Youtube channel. Just look into my older videos, okay, which I uploaded 4 to 5 months back, 6 months back, right? So what you can do now is from here. You can start this one

1059
03:14:20.200 --> 03:14:27.549
Sunny Savita: or rag. See, Rag is also there, around 40 to 50. Video, you will find out regarding the rag and memory wise. Now see

1060
03:14:28.726 --> 03:14:46.150
Sunny Savita: language and crash course, Chatbot, with memory, rag with memory, langction, memory, langction, memory, langction, memory. Lcl, okay. See Lcl. Laction, memory, langction, memory, langction, memory rag with memory, Chatbot, memory, and inside even the language and crash course. Also I discuss the memory.

1061
03:14:46.150 --> 03:15:01.939
Sunny Savita: Okay. Now, hypothetical, embedding sentence, window retriever, apparent document, retriever, self query, retriever, contextual retriever, flash, read anchor, read anchor all the read anchor, long fusion and all long context reorder guys just take a name. Bm, 25,

1062
03:15:01.940 --> 03:15:19.740
Sunny Savita: right? Just take a name. I discuss each and every type of read Anchor and Retriever. Okay, so if you are willing to watch it, you can watch and force your guys, you will get something. It's my promise. Okay? If not, if it won't get anything. If it is not adding any value, you can unsubscribe the channel or

1063
03:15:20.030 --> 03:15:22.649
Sunny Savita: like. Don't even see. Okay?

1064
03:15:23.130 --> 03:15:23.880
Sunny Savita: Fine.

1065
03:15:25.810 --> 03:15:44.510
Sunny Savita: Yeah. Vijay, I got that. But regarding the udemy, I don't have any update as of now, maybe like Krista will discuss about it, or as of now, we are not sharing any sort of a link, and all whatever we have provided. We have provided the 1st session itself. Okay, whenever the new coupon will come, sir, will share that. Okay, don't worry.

1066
03:15:47.570 --> 03:16:11.229
Sunny Savita: Perfect guys. Thank you. Thank you for joining the session. Bye, bye, take care! And I'm not going to discuss anything new now. And this notes and all everything will be available guys in the resource section this one. So for that, you will have to wait until the video is not getting uploaded. Okay, regarding this notes and all, thank you. Yeah. So guys, if you don't have any doubt you can drop the session. If you have any doubt, be here.

1067
03:16:11.270 --> 03:16:24.280
Sunny Savita: and I'll start with the doubt session. We'll take 5 min of break just quick water break. Okay? And after that we'll start with the doubt session. Okay, thank you. Bye, bye, take care we'll see you in the next week. And yeah.

1068
03:16:24.520 --> 03:16:26.320
Sunny Savita: thank you. Guys, take care.

1069
03:16:26.470 --> 03:16:28.669
Sunny Savita: Let me put the timer for the 5 min. Okay.

1070
03:16:59.290 --> 03:17:02.459
Sunny Savita: okay, guys, I'm I'll meet you after 5 min. Thank you.

1071
03:17:03.140 --> 03:17:10.890
Sunny Savita: And don't worry about rest of the resources, or it would be available in the resource section. Okay. By end of the day you will get all the one. Thank you.

1072
03:23:25.500 --> 03:23:31.580
Sunny Savita: Yeah, okay, guys. So let's start with the doubt session. If you have any sort of a doubt I can resolve that.

1073
03:23:31.988 --> 03:23:33.720
Sunny Savita: You can raise the hand. Okay.

1074
03:23:50.570 --> 03:23:53.659
Sunny Savita: yeah. So let's start with the doubt session.

1075
03:23:54.216 --> 03:23:59.100
Sunny Savita: Guys, please raise your hand, and I'll be unmuting to you.

1076
03:23:59.350 --> 03:24:06.280
Sunny Savita: So, Tejasvi, what's your doubt? Tejasvi pawan, is there? Subra? Is there, guys? Please go ahead.

1077
03:24:06.880 --> 03:24:08.240
tejashvi: Oh, yeah, Hi, sunny

1078
03:24:08.716 --> 03:24:15.109
tejashvi: sunny, I have doubt. So suppose while uploading the data right means while we are doing

1079
03:24:16.470 --> 03:24:30.369
tejashvi: so, suppose that if I, if I have the Pdf text and the web link, for example, so can I do all 3 things and combine all these 3 things into one, and directly upload, and I can retrieve.

1080
03:24:31.170 --> 03:24:43.600
Sunny Savita: No, see, it's assignment, sir. 1st of all, show me your approach. Then we'll discuss on it. Okay, there could be multiple approaches. Just try it out your ones. Then I'll give you like other solution. Okay? Because I know I'll get a multiple solution and we'll discuss on it. Okay.

1081
03:24:44.040 --> 03:25:07.599
tejashvi: Okay, okay? So related to one. Suppose if this we have uploaded the data right? And we retrieve, and we get the answer right. So whenever the next time we I again talking about the promo TV again, I restart. And the I start run all the same. So again it get uploaded, or it will check that this document already present with this index, so it will not upload. How does it work.

1082
03:25:07.600 --> 03:25:20.210
Sunny Savita: Yeah, you can write that particular logic. Right? If the new data is coming. Okay, you can verify that first, st whether it is available or not, and then you can store it. Okay, it's all about the logic and all that side.

1083
03:25:20.340 --> 03:25:24.930
tejashvi: Okay, man, it means that whenever I run it will upload. If I have not written the logic right.

1084
03:25:24.930 --> 03:25:26.120
Sunny Savita: Correct, correct.

1085
03:25:26.120 --> 03:25:29.710
tejashvi: Okay. So it happened with the chroma dB, or all other Dv. With.

1086
03:25:29.890 --> 03:25:31.320
Sunny Savita: Any vector database.

1087
03:25:31.590 --> 03:25:33.150
tejashvi: Any vector, in the cloud? Okay.

1088
03:25:33.150 --> 03:25:33.590
Sunny Savita: Yeah.

1089
03:25:33.590 --> 03:25:35.600
tejashvi: Okay. Okay. Sure. Sure.

1090
03:25:35.850 --> 03:25:36.690
tejashvi: Yes.

1091
03:25:37.050 --> 03:25:38.849
Sunny Savita: Thank you. Okay. Thank you, sir.

1092
03:25:39.400 --> 03:25:40.660
Subhra: Hey! Hi! Sunny!

1093
03:25:40.660 --> 03:25:43.059
Sunny Savita: Yeah, so anyone is there guys.

1094
03:25:43.555 --> 03:25:47.020
Subhra: So sunny thanks for calling civilian session.

1095
03:25:47.230 --> 03:25:47.720
Sunny Savita: Thank you, sir.

1096
03:25:48.402 --> 03:25:57.069
Subhra: But first, st actually, we have already create 1 1 solution for our our organization.

1097
03:25:57.210 --> 03:26:04.990
Subhra: This is almost I mean would say, but there is some problem. So I need some guidance from you, because what have you.

1098
03:26:04.990 --> 03:26:07.169
Sunny Savita: Sorry. Sorry. Can you be little louder, sir.

1099
03:26:07.170 --> 03:26:08.650
Subhra: Yeah, is it clear? Now.

1100
03:26:09.090 --> 03:26:10.679
Sunny Savita: Yeah, it's clear. Yeah, please.

1101
03:26:10.680 --> 03:26:14.129
Subhra: Okay? So on the problem statement, it's like that.

1102
03:26:14.300 --> 03:26:39.499
Subhra: We are using aws. Okay? And where we for the Llm model we are using, and we are extracting the data from multiple sources, mostly are coming from the mails. Okay? And we're extracting higher. Pdf, we convert into the Pdf because using Rp. Logic. We are extracting the mail, reading the mails and converting to the Pdf. And if there is, the attachment is the Pdf. That we are also keeping as a feed.

1103
03:26:39.740 --> 03:26:49.274
Subhra: Now, after this, Pdf, we are converting this period to better TV using using

1104
03:26:50.743 --> 03:26:52.799
Subhra: currently, it, highest. Okay.

1105
03:26:52.960 --> 03:26:56.829
Subhra: And what problem is, we are facing that

1106
03:26:56.970 --> 03:27:06.080
Subhra: sometimes we are missing some data. Suppose in a 1 Cba, we have a on tabular format or unstructured tabular format.

1107
03:27:06.080 --> 03:27:06.460
Sunny Savita: Hmm.

1108
03:27:06.460 --> 03:27:14.200
Subhra: There are a hundred records 100 rows up here, so we are missing sometimes, 1015 rows.

1109
03:27:14.290 --> 03:27:33.360
Subhra: Is it related to the Victor dB, which we have considered or is something else might be because 5 pdf, we are using text, we are using okay to convert everything. If we are sure that we are not missing anything, as if there any images also. But the problem is that still we are missing some cases

1110
03:27:33.360 --> 03:27:50.820
Subhra: that okay, there is a. Suppose we are supposed to be, get a hundred rows or hundreds line from that particular Pdf, but we are receiving able to capture 70 row, so is there any anything related to the vector TV which we have considered, or something else.

1111
03:27:51.480 --> 03:27:57.910
Sunny Savita: So where you are missing while retrieving you are missing, or while you storing, you are validating a data. At that time you are missing.

1112
03:27:58.090 --> 03:27:59.550
Subhra: Or during the clock.

1113
03:27:59.840 --> 03:28:00.640
Sunny Savita: During.

1114
03:28:00.820 --> 03:28:01.790
Subhra: Retriever.

1115
03:28:01.790 --> 03:28:15.549
Sunny Savita: Yeah, that's the issue of the retrieval only means you need to apply some good retrieval techniques. Okay, good retrieval approach. So let's say, you have a Pdf, okay, you ask some question to the Pdf.

1116
03:28:16.420 --> 03:28:18.399
Sunny Savita: Okay, regarding your data.

1117
03:28:18.600 --> 03:28:25.370
Subhra: Right now, you will retrieve that particular data from the vector database because you have a story of Pdf inside the vector database itself.

1118
03:28:26.550 --> 03:28:30.839
Sunny Savita: So let's say you have asked the question, and you mentioned the chunk size is equal to 50.

1119
03:28:31.570 --> 03:28:45.929
Sunny Savita: Okay. Now in those 50 chunk, if you're not able to get your entire data, then what you will do, you will mention some higher value. In that case you will mention some K is equal t070-80-0120, whatever it could be. Okay.

1120
03:28:45.930 --> 03:28:46.640
Subhra: Okay. Okay.

1121
03:28:46.640 --> 03:28:52.799
Sunny Savita: The best approach is just just retrieve all the chunks. Okay, let's say, yeah, you have

1122
03:28:52.800 --> 03:29:06.689
Sunny Savita: 1,000 chunk. I would suggest you retrieve at least half of the chunk, 50% of chunk, and then on top of it, apply the re-ranking, so it will give you the best and possible answer in the re-ranking itself. If you're not getting all the chunk that it is fine.

1123
03:29:06.910 --> 03:29:10.650
Sunny Savita: Okay, Lm, is capable to understand the rest of the context.

1124
03:29:11.130 --> 03:29:33.789
Sunny Savita: Okay. But I would suggest you increase your K number, play with that hyperparameter and use some good retrieval technique. Play with the indexes, use the exact search. Okay, use some, like the cosines, check with the cosine similarity and all, whether it is a proper normalize or not. Okay, fetch out that score. Please make sure that it is not coming more than one. Okay, if it is not normalized.

1125
03:29:33.790 --> 03:29:38.500
Subhra: So so it's might be the problem with the chunking and the retrieval. So.

1126
03:29:38.500 --> 03:29:39.059
Sunny Savita: Got it.

1127
03:29:39.060 --> 03:29:39.930
Subhra: It might not be the.

1128
03:29:39.930 --> 03:29:43.109
Sunny Savita: Just need to be defined. Your retrieval in retrieval pipeline.

1129
03:29:43.110 --> 03:29:46.439
Sunny Savita: Okay, so we don't have any problem with headset. dB, right?

1130
03:29:47.070 --> 03:29:54.400
Sunny Savita: No, not a vector, dB, if the every data is getting stored over there in that case you need to be retrieved in a correct way. That's it.

1131
03:29:54.590 --> 03:29:56.700
Subhra: Oh, oh, thank you, thank you. That's awesome.

1132
03:29:57.040 --> 03:30:02.919
Pawan: Yeah, sunny in the continuation of Subra's question. Maybe Subra can also give you the input

1133
03:30:03.470 --> 03:30:10.679
Pawan: the scenario which I study mentioned with the merged rows and columns, tabular data. And Pdf.

1134
03:30:10.830 --> 03:30:20.039
Pawan: I tried your approach. What you said fetching it with the Xml. So I mean in the Xml format itself. It is not giving the noise panel.

1135
03:30:20.310 --> 03:30:20.830
Sunny Savita: Hmm.

1136
03:30:20.830 --> 03:30:23.839
Pawan: So. I'm not sure, since Subra said that he's only.

1137
03:30:24.274 --> 03:30:34.700
Subhra: Didn't use that. I didn't use that. Xml format. We have used the text format. Okay, so that we can read the different.

1138
03:30:34.700 --> 03:30:41.530
Pawan: Do you have the do? You have the merged rows and columns? Tabular data in Pdm.

1139
03:30:41.530 --> 03:30:53.520
Subhra: No, no, actually. Why, why, I'm not using Xml. There is a different type. Vendors we have and mail are unstructured. There is a thousands of people are sending the mails and the Pd.

1140
03:30:53.520 --> 03:30:58.450
Pawan: No, Xml is not the Xml is not the core use case. That is what approach I yeah.

1141
03:30:58.450 --> 03:31:08.370
Pawan: performed on the suggestion of sunny. My core use case is that I have a Pdf. Inside that there is a table which has merged rows and columns.

1142
03:31:09.570 --> 03:31:12.779
Pawan: So are you handling this similar scenario or not, but.

1143
03:31:12.780 --> 03:31:28.860
Subhra: Yeah, yeah, we are handling the scenario. We don't have this type of we have the scenario. But if it is a proper format is there. We are not facing some process, but but the problem which I am facing which Fanny has explained it seems like that that need to be work.

1144
03:31:28.860 --> 03:31:32.799
Pawan: So are you getting the merged rows and columns data.

1145
03:31:32.800 --> 03:31:34.509
Subhra: Hey, Elliott.

1146
03:31:34.510 --> 03:31:37.109
Pawan: Which library are you using? Can you tell me.

1147
03:31:38.040 --> 03:31:49.929
Subhra: Live period. I need to just ping you later on, because I need to go through that along. Because but okay, I'll pass to you, just ping me on that Linkedin profile. I'll provide you that.

1148
03:31:50.300 --> 03:31:51.170
Pawan: Okay. Sudha.

1149
03:31:51.180 --> 03:31:52.290
Subhra: Thanks for coming.

1150
03:31:52.290 --> 03:31:54.489
Pawan: So sunny. I will.

1151
03:31:54.750 --> 03:32:12.170
Pawan: for this. Second question is you? Said the printing the accuracy score. So can you please tell me. I mean how I mean I already asked that how we can print the similarity score in the result and the accuracy score. What do you mean by accuracy score, and how we will print it.

1152
03:32:13.000 --> 03:32:24.830
Sunny Savita: Similarity score means the accuracy score. Okay, both are same. See? Once you will retrieve a data. Now, okay, so with respect to every chunk. You need to showcase their accuracy, score or similarity score. Okay.

1153
03:32:25.130 --> 03:32:25.880
Pawan: Okay.

1154
03:32:25.880 --> 03:32:26.280
Sunny Savita: Yep.

1155
03:32:26.480 --> 03:32:27.250
Pawan: Thank you.

1156
03:32:27.430 --> 03:32:27.840
anvv sharma: A high.

1157
03:32:27.840 --> 03:32:28.480
Sunny Savita: Exactly.

1158
03:32:28.700 --> 03:32:30.679
anvv sharma: This is Sharma.

1159
03:32:30.800 --> 03:32:38.989
anvv sharma: I just pinged in the chat the screenshot. I don't see any resources. Under my login actually.

1160
03:32:38.990 --> 03:32:42.030
Sunny Savita: Can you? Can you share your screen, sir? I'm adding in a panelist, Okay.

1161
03:32:42.030 --> 03:32:43.780
anvv sharma: Okay, can you just yeah.

1162
03:32:43.780 --> 03:32:46.789
Sunny Savita: Yeah, sure anil. What's your doubt? Anil.

1163
03:32:47.180 --> 03:32:49.349
Anil Gaikwad: Actually, I'm facing issue in a code.

1164
03:32:49.720 --> 03:32:50.290
Sunny Savita: Oh!

1165
03:32:50.880 --> 03:32:53.449
Anil Gaikwad: While creating fiss. Instance.

1166
03:32:53.670 --> 03:32:55.599
Sunny Savita: Okay, share the screen. I'll check that. Okay.

1167
03:32:55.600 --> 03:32:57.650
anvv sharma: You are able to see my screen, or.

1168
03:32:58.287 --> 03:33:01.143
Sunny Savita: No, I cannot see. Can you share?

1169
03:33:01.500 --> 03:33:06.765
anvv sharma: One second. Let me share my screen.

1170
03:33:08.400 --> 03:33:11.059
anvv sharma: Let me know if you are able to see my screen.

1171
03:33:13.780 --> 03:33:15.229
Anil Gaikwad: Yes, we will, we will.

1172
03:33:15.230 --> 03:33:16.630
Sunny Savita: Yeah. Now it is visible.

1173
03:33:16.630 --> 03:33:18.736
anvv sharma: You're able to see. Right? So this is

1174
03:33:19.000 --> 03:33:23.840
Sunny Savita: No, no, sir, do one thing. Check out with the live session. See, there is a section live session

1175
03:33:24.200 --> 03:33:25.400
Sunny Savita: right hand side

1176
03:33:29.220 --> 03:33:31.330
Sunny Savita: below, below. See! Live sessions.

1177
03:33:31.330 --> 03:33:32.820
Anil Gaikwad: In a content class one.

1178
03:33:33.980 --> 03:33:35.750
Sunny Savita: Yeah, click on it.

1179
03:33:39.440 --> 03:33:42.170
Sunny Savita: Click on any of the video. Yeah, see resources.

1180
03:33:42.170 --> 03:33:45.510
anvv sharma: Okay. No. I. Okay, fine. Yeah.

1181
03:33:45.510 --> 03:33:46.120
Sunny Savita: Thank you.

1182
03:33:46.830 --> 03:33:47.990
anvv sharma: Thanks, sunny thanks

1183
03:33:48.470 --> 03:33:54.479
anvv sharma: for your great session, Sunny. So the explanation and the conceptually it was great. I would say.

1184
03:33:54.480 --> 03:33:55.610
Sunny Savita: Oh, thank you so much.

1185
03:33:55.610 --> 03:33:57.090
anvv sharma: Thanks thanks for helping out.

1186
03:33:57.960 --> 03:33:59.789
Sunny Savita: Anil. Please share your screen.

1187
03:34:00.345 --> 03:34:00.900
Anil Gaikwad: Yes!

1188
03:34:14.090 --> 03:34:15.680
Anil Gaikwad: Is it visible?

1189
03:34:18.160 --> 03:34:19.200
Sunny Savita: Yeah, it is visible.

1190
03:34:23.256 --> 03:34:27.189
Anil Gaikwad: So here I'm using right now, Jamie.

1191
03:34:27.390 --> 03:34:27.820
Sunny Savita: Hmm.

1192
03:34:27.820 --> 03:34:33.170
Anil Gaikwad: And while creating index, I'm facing issue.

1193
03:34:33.270 --> 03:34:34.830
Anil Gaikwad: So here you can see.

1194
03:34:38.810 --> 03:34:39.960
Sunny Savita: What is the issue?

1195
03:34:42.390 --> 03:34:43.530
Anil Gaikwad: Just a minute.

1196
03:34:43.530 --> 03:34:45.229
Sunny Savita: Executed, run it once.

1197
03:34:47.610 --> 03:34:51.020
Anil Gaikwad: Just pop up the screen.

1198
03:35:01.320 --> 03:35:05.559
Anil Gaikwad: There, you can see I created Agentic AI index. But

1199
03:35:06.040 --> 03:35:10.350
Anil Gaikwad: I check when I try to check agent here. I'm getting false.

1200
03:35:10.990 --> 03:35:12.760
Sunny Savita: Correct. It is right.

1201
03:35:13.530 --> 03:35:14.350
Anil Gaikwad: Why?

1202
03:35:14.850 --> 03:35:18.940
Sunny Savita: 1st execute. Now line number 30, the cell number 38 execute it.

1203
03:35:19.210 --> 03:35:21.340
Anil Gaikwad: Yes, I already executed.

1204
03:35:24.204 --> 03:35:27.660
Sunny Savita: In the if not index name. Wait, wait, wait.

1205
03:35:28.340 --> 03:35:34.360
Sunny Savita: index name, if not igonal conditioning a little.

1206
03:35:34.760 --> 03:35:37.200
Sunny Savita: Sorry if it's not okay.

1207
03:35:37.540 --> 03:35:38.879
Sunny Savita: Oh, not on it.

1208
03:35:41.550 --> 03:35:44.340
Sunny Savita: See now different issue. Check once.

1209
03:35:48.960 --> 03:35:54.709
Sunny Savita: Alpha. Numerical character, invalid argument. Show me the name. What you are written.

1210
03:35:56.130 --> 03:36:00.270
Sunny Savita: Remove this underscore agent to control.

1211
03:36:01.500 --> 03:36:03.799
Sunny Savita: Hmm, yeah. Note on it.

1212
03:36:16.650 --> 03:36:19.160
Sunny Savita: Okay, not on it again.

1213
03:36:23.104 --> 03:36:26.819
Anil Gaikwad: Okay, thank you. And another one is.

1214
03:36:30.120 --> 03:36:32.999
Anil Gaikwad: it is found on a strategy session.

1215
03:36:49.330 --> 03:36:50.340
Sunny Savita: You are on it.

1216
03:36:56.435 --> 03:37:04.039
Anil Gaikwad: Here you can see we created one instance of Afi afi iss when I try to

1217
03:37:04.380 --> 03:37:06.170
Anil Gaikwad: add document in that.

1218
03:37:06.350 --> 03:37:07.100
Sunny Savita: Hmm.

1219
03:37:16.580 --> 03:37:21.480
Anil Gaikwad: Alright sorry. Hello

1220
03:37:45.900 --> 03:37:48.869
Anil Gaikwad: when I'm checking similarity, giving the error

1221
03:37:53.320 --> 03:37:55.159
Anil Gaikwad: output is truncated.

1222
03:37:55.510 --> 03:37:56.970
Sunny Savita: What you are doing. Show me

1223
03:38:06.660 --> 03:38:10.559
Sunny Savita: vector, store similarity. Search. No, no, show me that. Wait.

1224
03:38:11.110 --> 03:38:13.149
Sunny Savita: Show me the vector, store where you created.

1225
03:38:19.220 --> 03:38:20.010
Anil Gaikwad: There!

1226
03:38:21.410 --> 03:38:27.530
Sunny Savita: Vector store embedding index in the memory.

1227
03:38:27.970 --> 03:38:31.139
Sunny Savita: Oh, create this vector index, do it run it.

1228
03:38:33.660 --> 03:38:34.330
Anil Gaikwad: Hmm.

1229
03:38:37.430 --> 03:38:40.709
Sunny Savita: Wait! Wait! Wait, sir, don't do much stall. Wait!

1230
03:38:41.290 --> 03:38:42.239
Sunny Savita: Show me the.

1231
03:38:42.240 --> 03:38:42.830
Anil Gaikwad: No.

1232
03:38:43.370 --> 03:38:46.339
Sunny Savita: Yeah. Now, store the document over here.

1233
03:38:46.720 --> 03:38:48.270
Sunny Savita: Roll slowly.

1234
03:38:51.130 --> 03:38:58.029
Sunny Savita: Yeah. Store the document inside this one. Create a different index. Write a different index. Whatever you created earlier. Okay.

1235
03:38:58.556 --> 03:38:59.619
Anil Gaikwad: Okay, just a moment.

1236
03:38:59.620 --> 03:39:04.089
Sunny Savita: Yeah, keep this document over there in the next cell, right after that. Okay, and create a new one.

1237
03:39:04.980 --> 03:39:11.529
Sunny Savita: No, no, wait. Wait 1st store the index. Just write a new name of the index, store the document there, and then perform the similarity, search.

1238
03:39:12.230 --> 03:39:12.740
Anil Gaikwad: Yes!

1239
03:39:13.090 --> 03:39:13.640
Sunny Savita: Yeah.

1240
03:39:18.500 --> 03:39:20.110
Sunny Savita: vector, store.

1241
03:39:24.180 --> 03:39:25.220
Sunny Savita: oh.

1242
03:39:26.080 --> 03:39:26.990
Anil Gaikwad: A credit flat.

1243
03:39:26.990 --> 03:39:31.269
Sunny Savita: Voice and index you created. Okay, not on it.

1244
03:39:32.530 --> 03:39:33.410
Sunny Savita: Oh.

1245
03:39:33.410 --> 03:39:34.070
Anil Gaikwad: No crediting.

1246
03:39:34.070 --> 03:39:36.189
Sunny Savita: Do one thing, store the data there.

1247
03:39:36.690 --> 03:39:38.859
Sunny Savita: we store the data. First, st we store the data

1248
03:39:42.430 --> 03:39:44.980
Sunny Savita: store, the data, 1st store, the data.

1249
03:39:46.180 --> 03:39:49.420
Sunny Savita: scroll down, scroll down, take all the document and store it.

1250
03:39:50.100 --> 03:39:51.970
Sunny Savita: Scroll down, scroll down, please.

1251
03:39:53.180 --> 03:39:55.910
Sunny Savita: Yeah. Take all this document and keep it there.

1252
03:39:58.150 --> 03:40:00.880
Sunny Savita: Copy this copy this one and keep it there

1253
03:40:04.880 --> 03:40:06.879
Sunny Savita: before this one. Huh? Correct.

1254
03:40:07.220 --> 03:40:11.259
Sunny Savita: Now wait, scroll down, show me the uid and everything is correct or not.

1255
03:40:13.732 --> 03:40:21.840
Sunny Savita: Remove, see? Store the data, add the document and remove this. yeah. Remove this uid one also. This 1 first, st commit.

1256
03:40:22.060 --> 03:40:24.530
Sunny Savita: No, no, remove the command. No from there.

1257
03:40:24.770 --> 03:40:25.660
Sunny Savita: Yeah.

1258
03:40:25.890 --> 03:40:27.820
Sunny Savita: Comment. Command, yeah, not on it.

1259
03:40:35.620 --> 03:40:37.539
Anil Gaikwad: Same output is truncated.

1260
03:40:39.570 --> 03:40:43.300
Sunny Savita: No, it is not truncated. Is it? Scroll up

1261
03:40:44.450 --> 03:40:46.800
Sunny Savita: what you are doing here? Scroll up.

1262
03:40:53.880 --> 03:40:56.300
Sunny Savita: Wait, then, wait. Okay, wait, please.

1263
03:40:57.506 --> 03:41:01.040
Sunny Savita: Here Uuid is showing document

1264
03:41:01.640 --> 03:41:07.529
Sunny Savita: scroll down. Everything seems perfect now. Why, you are getting the assertion. Error!

1265
03:41:07.850 --> 03:41:11.640
Sunny Savita: Remove this uid and all remove this uid comment it once.

1266
03:41:13.280 --> 03:41:14.739
Anil Gaikwad: I also try that one.

1267
03:41:22.000 --> 03:41:23.129
Sunny Savita: Oh, no!

1268
03:41:27.090 --> 03:41:33.699
Sunny Savita: Restart the kernel once kernel, kernel, restart the kernel.

1269
03:41:36.770 --> 03:41:42.209
Sunny Savita: Why, you kept this 3.10 and all in the name of this environment.

1270
03:41:42.210 --> 03:41:53.169
Anil Gaikwad: Actually, I have multiple for the testing purpose, I created multiple environment. I tried both the version python 3.10 and python, 3.12, as well.

1271
03:41:55.020 --> 03:41:57.329
Sunny Savita: Give me the access of your screen right?

1272
03:41:57.330 --> 03:41:58.450
Anil Gaikwad: Oh, okay.

1273
03:42:28.630 --> 03:42:35.520
Anil Gaikwad: open the screen, share certain information.

1274
03:42:46.560 --> 03:42:53.369
Sunny Savita: Okay, leave it. Let's later on. You can give it to me. 1st check after restarting a kernel. Okay? And keep it on this one

1275
03:42:55.770 --> 03:43:01.759
Sunny Savita: save auto, save. Okay. Go inside the file and keep it on auto. Save check with the header header, header, header.

1276
03:43:03.880 --> 03:43:05.329
Sunny Savita: Click on the file.

1277
03:43:06.260 --> 03:43:07.690
Sunny Savita: Hello, anil.

1278
03:43:07.690 --> 03:43:08.500
Anil Gaikwad: Yes, yes.

1279
03:43:09.130 --> 03:43:12.449
Sunny Savita: Click on the file above header, header. You can see header right?

1280
03:43:16.040 --> 03:43:17.220
Sunny Savita: Hello!

1281
03:43:17.380 --> 03:43:18.660
Anil Gaikwad: Hello here!

1282
03:43:18.780 --> 03:43:25.499
Sunny Savita: Anil what I'm saying. Click on the file header over the header. You can see the file option right? File edit selection correct.

1283
03:43:25.500 --> 03:43:26.290
Anil Gaikwad: Yes.

1284
03:43:26.290 --> 03:43:27.489
Sunny Savita: Click on the file.

1285
03:43:31.280 --> 03:43:35.240
Sunny Savita: Your skin is freeze. Please reshare it again. Okay, please.

1286
03:43:35.720 --> 03:43:37.000
Anil Gaikwad: Okay.

1287
03:43:53.190 --> 03:43:55.380
Sunny Savita: Please reshare it until fast.

1288
03:43:55.600 --> 03:44:01.910
Sunny Savita: Oh, yeah, keep go with the file. File. Click on file

1289
03:44:02.970 --> 03:44:08.890
Sunny Savita: file, file. Yeah, click on auto, save 1st auto save below.

1290
03:44:10.490 --> 03:44:11.370
Sunny Savita: Hmm!

1291
03:44:11.630 --> 03:44:15.369
Sunny Savita: Now do one thing, restart your kernel. Have you restarted your kernel.

1292
03:44:15.370 --> 03:44:15.950
Anil Gaikwad: Yes.

1293
03:44:15.950 --> 03:44:21.749
Sunny Savita: Okay. Now do one thing go with the 1st cell. Go with the 1st cell of your file

1294
03:44:26.612 --> 03:44:30.599
Sunny Savita: run it, run it slowly. Yeah, run it. Run this one

1295
03:44:31.240 --> 03:44:34.300
Sunny Savita: load environment. But put the parenthesis there.

1296
03:44:35.210 --> 03:44:40.490
Sunny Savita: Parentheses follow the quotes that I shared with you. Now, right.

1297
03:44:40.820 --> 03:44:41.470
Anil Gaikwad: Yes.

1298
03:44:41.470 --> 03:44:42.950
Sunny Savita: Yeah, run it.

1299
03:44:44.120 --> 03:44:47.560
Sunny Savita: Okay, now, run this one load the model.

1300
03:44:50.020 --> 03:44:53.980
Sunny Savita: Yeah, run it, run it. Yeah. Now, run this cell also.

1301
03:44:56.140 --> 03:45:03.920
Sunny Savita: Yeah, create the index create this vector, store files.

1302
03:45:09.660 --> 03:45:12.550
Sunny Savita: Hmm, rodent.

1303
03:45:12.660 --> 03:45:15.990
Sunny Savita: Okay. Now, do one thing run this one

1304
03:45:22.750 --> 03:45:28.449
Sunny Savita: scroll down, scroll down, please.

1305
03:45:28.450 --> 03:45:29.939
Anil Gaikwad: Oh yes!

1306
03:45:36.640 --> 03:45:37.979
Sunny Savita: Are you scrolling down.

1307
03:45:38.600 --> 03:45:39.340
Anil Gaikwad: Yes.

1308
03:45:39.340 --> 03:45:40.550
Sunny Savita: Yeah, do it, please.

1309
03:45:51.570 --> 03:45:53.589
Anil Gaikwad: I need to restart with Vs code.

1310
03:45:55.040 --> 03:45:59.099
Sunny Savita: Okay, do it, sir. Okay, it will work. If it is not, I'll check again. Okay, please do.

1311
03:45:59.904 --> 03:46:00.460
Anil Gaikwad: Okay.

1312
03:46:00.590 --> 03:46:03.289
Sunny Savita: Yeah, until I can take the other notes.

1313
03:46:03.670 --> 03:46:04.270
Anil Gaikwad: Okay. Okay.

1314
03:46:04.270 --> 03:46:07.999
Sunny Savita: Yeah, Amita, at you guys, please go ahead.

1315
03:46:08.000 --> 03:46:09.219
atriyo: Yeah, or through the search. I mean.

1316
03:46:09.930 --> 03:46:21.370
atriyo: yeah. So, Sandy, this is a question related to the last week's assignment. So while we are asking the Llm. Models regarding something or some topics which is pretty much new.

1317
03:46:21.370 --> 03:46:46.230
atriyo: so like in case of the last week's assignment. So I asked the Llm about a about a mobile phone that has been launched recently. So still it is giving me the answer. And sometimes so like on multiple iterations. Sometimes it is giving the correct answer, or sometimes it is giving the wrong answer. So I can understand that it is giving the wrong answer, because the information is relatively new, and the model is quite old and trending quite

1318
03:46:46.230 --> 03:46:53.279
atriyo: old data. But how come it is giving the correct data as well? So is it something like it is searching through the Internet as well.

1319
03:46:55.900 --> 03:46:58.489
Sunny Savita: Sir Crystal has given you that assignment. Is it.

1320
03:46:58.490 --> 03:46:59.160
atriyo: Yes.

1321
03:46:59.740 --> 03:47:03.540
Sunny Savita: Okay, because I was not in that class. Can you brief me about the assignment.

1322
03:47:03.540 --> 03:47:05.160
atriyo: Okay, can I share my screen?

1323
03:47:05.430 --> 03:47:09.690
Sunny Savita: Yeah, you can share, and adding a panelist, yeah, Ravi, what's your doubt? Ravi?

1324
03:47:12.270 --> 03:47:12.619
Ravi USA: Yeah,

1325
03:47:13.100 --> 03:47:31.001
Ravi USA: Hi, sir. So, yeah, I just want to know, like, related to this rack pipelines when we are implementing it in a production environment. We will get data, not just as a static source, but with a lot of documents uploaded every day, or a lot of sources

1326
03:47:31.360 --> 03:47:47.880
Ravi USA: constantly getting updated incrementally. So how can we update the index in such a way that we don't need to rerun every the I mean recompute the index every time with the full data, and just go with the incremental uploads. And still the index works. Well

1327
03:47:48.596 --> 03:47:55.560
Ravi USA: like. Maybe you may have mentioned this before, but just want to know this. Because I missed that.

1328
03:47:57.210 --> 03:48:02.090
Sunny Savita: Okay, so how much data you have like, how much data you're getting on a daily basis.

1329
03:48:02.710 --> 03:48:23.840
Ravi USA: It's not like a specific. Actually, right now, I'm not working on rack. But I know that I work in data engineering. So we will be getting a lot of data like in gigabytes. And maybe some 50 GB. Something like that. So yeah, is there a mechanism for that?

1330
03:48:25.360 --> 03:48:29.030
Sunny Savita: There is a 2, 2 to 3 ways. You can check

1331
03:48:29.481 --> 03:48:51.640
Sunny Savita: when you will check with the database itself. Let's say files. Okay? So in the files itself, they have given you the option for the incremental means. There is a 1 method. Add method. Okay, so let's say, if you're getting a data. Okay, the data incremental data, you have to add inside your vector database. Okay, so you can simply call that add method. And inside the previous index itself, it will add the data.

1332
03:48:52.130 --> 03:48:53.079
Sunny Savita: That's the 1st thing.

1333
03:48:53.080 --> 03:48:53.610
Ravi USA: Okay.

1334
03:48:53.610 --> 03:49:13.350
Sunny Savita: Got it. Now, the second thing, basically in the other vector databases. Also, if you will look into the pinecone today, I taught you the pinecone right in the pinecone. Also, they have given you the SIM similar kind of functionality, absurd functionality. Okay? So if you're going to be used, that absurd functionality on the same index. So again, in the same index itself, it's going to be at the new data points.

1335
03:49:13.440 --> 03:49:28.619
Sunny Savita: Got it so the moral of the story in every basically database itself, they have given you those specific function, you can utilize those, and you can upload your data in the same index in an incremental way. Got it.

1336
03:49:29.170 --> 03:49:35.070
Ravi USA: Okay, yeah. And the 3rd one or is it the same thing?

1337
03:49:35.450 --> 03:49:37.050
Ravi USA: You said 3 ways, right?

1338
03:49:38.040 --> 03:49:38.630
Sunny Savita: Yes.

1339
03:49:42.490 --> 03:49:43.790
Sunny Savita: what you said at the last.

1340
03:49:44.690 --> 03:49:50.669
Ravi USA: Yeah, you said 3 ways. So these are the 2 ways. And the 1st way is, Yeah.

1341
03:49:50.670 --> 03:50:01.869
Sunny Savita: 3rd way is basically, let's say, if it is not there. Okay, then try to find out some basically the custom way, logic, creation and all. Okay, if you can do it means let's say there is a method. Add document in the files right.

1342
03:50:01.870 --> 03:50:02.240
Ravi USA: Okay.

1343
03:50:02.240 --> 03:50:22.460
Sunny Savita: So we can like that. Whenever the new data is coming, we can detect that. And we can like store that specific data itself. Okay, so this 3 ways out there, you can check it out that. And for sure, one will work. Okay, means in the same index. Now, we can upload the data. We can upload the payload incremental payload. Okay, that is possible.

1344
03:50:23.230 --> 03:50:45.610
Ravi USA: Okay? Okay, yeah. And if this, if it is a situation where we have to, we have some stale data in the index or we need some data to be deleted, or some data is already updated. So is there any such kind of functionality even for that? Also, like the selective deletion, or select to update of the index.

1345
03:50:45.610 --> 03:50:50.639
Sunny Savita: Correct, correct. That is also possible. Selective, the uid we have created. Now, right today

1346
03:50:51.740 --> 03:50:59.959
Sunny Savita: itself, you can pick up that specific uid or the indexing index, basically, and you can delete the specific row. And all this is also possible.

1347
03:51:00.140 --> 03:51:02.510
Sunny Savita: Okay, so the 3rd operation.

1348
03:51:02.510 --> 03:51:03.100
Ravi USA: That's possible.

1349
03:51:05.180 --> 03:51:12.005
Ravi USA: Okay, okay, so do you have any more? Any more a use case for that or any any examples that you can provide? Basically.

1350
03:51:12.290 --> 03:51:27.310
Sunny Savita: So you can do one thing you can check out with the documentation itself directly. Okay? Or else you can take a help of any of the like. The chat app you can check out with the cloud or block. Okay. There, you can find out the details. Okay.

1351
03:51:28.660 --> 03:51:48.940
Ravi USA: Okay, okay, yeah, okay, like, see, I'm looking for. So all this thing is like, when we are generating the retriever. So all these things will be there right like so can I put it? Have it as a pipeline like set it up as a pipeline. Where, the Retriever will be updated periodically. Something like that.

1352
03:51:49.120 --> 03:51:50.790
Sunny Savita: Yeah, obviously, sir, why not?

1353
03:51:51.140 --> 03:51:53.040
Sunny Savita: You can do it. Okay?

1354
03:51:53.750 --> 03:52:16.929
Ravi USA: Okay, okay, yeah, thank you, sir. Yeah. And also like, one small request like, the people having from different time zones they will be having midnight. They'll be working like staying in here too late. So if it's possible, would request you to give them priority first, st while ask, while giving the opportunity for questions.

1355
03:52:17.110 --> 03:52:22.229
Sunny Savita: Yeah, yeah. Sure you can. Write in the chat. Okay, I will unmute you. Got it. Ravi.

1356
03:52:22.380 --> 03:52:24.340
Ravi USA: Okay. Okay. Yeah. Thank you, sir.

1357
03:52:24.340 --> 03:52:24.719
Sunny Savita: Thank you.

1358
03:52:24.720 --> 03:52:25.959
Ravi USA: Great session. Thank you.

1359
03:52:25.960 --> 03:52:26.760
Sunny Savita: Thank you.

1360
03:52:27.872 --> 03:52:33.790
Sunny Savita: Just a second guys coming to you. What what you doubt? Tell me, please.

1361
03:52:33.790 --> 03:52:46.840
atriyo: So unlike the in the last week's assignment. It was like, we need the product details based on that. We need to. We need a description as well, and we need the price of the product in Usd, so I have formulated the prompt in this way.

1362
03:52:46.840 --> 03:52:47.145
Sunny Savita: Oh!

1363
03:52:47.450 --> 03:52:55.899
atriyo: So when I am calling like about when I'm asking about a product that has been very recently launched

1364
03:52:55.900 --> 03:53:20.879
atriyo: using the o 1 Mini model. So I'm sometimes getting so every time I'm getting the details. But sometimes I'm getting the very correct details, like the type of the processor that it has been used or the quality of the camera. But sometimes I'm getting the wrong details. So I I understand that we are getting the wrong details, because the Llm model is not trained with this very much recent data. But how come we are getting the correct details

1365
03:53:20.880 --> 03:53:21.610
atriyo: as well.

1366
03:53:22.120 --> 03:53:22.799
Sunny Savita: So is that

1367
03:53:22.800 --> 03:53:29.839
Sunny Savita: only, sir. See, sir, see before that, only we have taught you the rag. Now you didn't understand the use case of the rag.

1368
03:53:31.220 --> 03:53:34.640
atriyo: But we are not implementing any rag over here right.

1369
03:53:34.640 --> 03:53:40.210
Sunny Savita: We are not implementing, but we have to implement it for for like dealing with this kind of hallucinations.

1370
03:53:40.925 --> 03:53:41.640
Sunny Savita: okay.

1371
03:53:42.460 --> 03:53:50.120
atriyo: I understand about the hallucination part that it is giving the wrong answer. But I'm asking like how it is giving the correct answer exact correct answer.

1372
03:53:50.120 --> 03:53:53.340
Sunny Savita: Actually, what happens now like that? More change.

1373
03:53:53.820 --> 03:54:03.800
Sunny Savita: We don't know the exact policy of the open AI and all okay in a waterway. Basically, they are going to be trained the model right? So whenever you are hitting the Api of that Openai Api, maybe

1374
03:54:04.240 --> 03:54:24.020
Sunny Savita: the model have been trained on the recent ask question some kind of mechanism they have applied over there. Okay, so it might be possible. It is giving you the correct answer. It is not giving the correct answer. You have to handle that hallucination. If it is giving the correct answer to check with their Api policies right? How frequently they are training the model. Got it?

1375
03:54:24.230 --> 03:54:29.269
atriyo: Okay, yeah, okay. But it's not like that. It's searching the Internet to face the correct data.

1376
03:54:29.270 --> 03:54:31.929
Sunny Savita: No, no, no, no, no! This is not like that.

1377
03:54:32.030 --> 03:54:32.740
Sunny Savita: True.

1378
03:54:33.010 --> 03:54:57.979
atriyo: Okay, okay, yeah, fine. And one more thing like, whenever. So you mentioned about sharing a Github link. So I think it will be helpful for us as well. If you could share the details in the github as well. So like every time so you are. You have shared yesterday as well, and the different version of the files are getting shared today as well. So maintaining the versions in our side is also getting a bit difficult. So if you could provide the details in the Github, so we can have a post.

1379
03:54:57.980 --> 03:55:09.070
atriyo: and then things will get sorted easier, because in the upcoming sessions. So more related things will come, and more different versions will come for a same thing in different classes.

1380
03:55:09.070 --> 03:55:14.549
atriyo: So if you could, side by side, provide a Github link as well. So it will be helpful for us.

1381
03:55:14.550 --> 03:55:18.379
Sunny Savita: Sure. Sure I will. I will take care of it. Okay, don't worry.

1382
03:55:18.380 --> 03:55:20.009
atriyo: Yeah, thank, you.

1383
03:55:20.010 --> 03:55:24.919
Sunny Savita: Thank you. So okay, 3 0 is done. Now.

1384
03:55:24.920 --> 03:55:28.610
Anil Gaikwad: It's not working. I'm unable. Can I resend this one.

1385
03:55:28.610 --> 03:55:30.370
Sunny Savita: Yeah, share your screen.

1386
03:55:47.190 --> 03:55:49.579
Sunny Savita: Which Umantu version you have.

1387
03:55:51.000 --> 03:55:53.759
Anil Gaikwad: 22.0 4.

1388
03:55:55.850 --> 03:56:03.040
Sunny Savita: 22 right show me. Show me one more time your code.

1389
03:56:13.250 --> 03:56:14.800
Sunny Savita: Same error. You're getting.

1390
03:56:15.785 --> 03:56:17.000
Anil Gaikwad: Yes. Getting assertional.

1391
03:56:17.000 --> 03:56:19.310
Sunny Savita: Initialize your work vector store once.

1392
03:56:21.350 --> 03:56:22.080
Anil Gaikwad: Being.

1393
03:56:22.850 --> 03:56:28.950
Sunny Savita: Maybe now there is a issue with the version, only I think so. Just give me this entire error and paste it inside the chat.

1394
03:56:29.780 --> 03:56:30.610
Anil Gaikwad: Okay.

1395
03:56:30.610 --> 03:56:31.210
Sunny Savita: Yeah.

1396
03:56:35.240 --> 03:56:41.210
Sunny Savita: yeah, what's your doubt? Or you can ask. Meanwhile, yeah, please put patients at the chat. Okay, I'll check in there.

1397
03:56:41.430 --> 03:56:44.309
Sunny Savita: Anyone. Is there guys.

1398
03:56:44.915 --> 03:56:45.520
srihari Vanga: Yeah.

1399
03:56:46.150 --> 03:56:48.249
Sunny Savita: Yeah. Merlin, then, serie Ari, yeah, please.

1400
03:56:49.540 --> 03:56:51.680
milind kulkarni: Go ahead, Sherry, I'll do it after you. Then.

1401
03:56:52.280 --> 03:56:52.890
srihari Vanga: Yeah.

1402
03:56:53.648 --> 03:57:06.610
srihari Vanga: sunny. Actually, then, prompt you mentioned in the rag, actually, one of the parameter, this prompt and user query, prompt, we have to prepare explicitly ourselves are automatically welcome.

1403
03:57:06.610 --> 03:57:09.130
Sunny Savita: No, you have to write a custom. Prompt, sir. Okay.

1404
03:57:09.510 --> 03:57:16.929
srihari Vanga: Yeah, that means every provider different prompts will be understanding that that is our. We are the responsible for that prompts as well.

1405
03:57:16.930 --> 03:57:19.870
Sunny Savita: Correct. Got it. We'll have to write a custom form, sir.

1406
03:57:20.330 --> 03:57:26.040
srihari Vanga: No, it is complexity increases now. To maintain the different vendors, different prompts.

1407
03:57:26.574 --> 03:57:35.579
Sunny Savita: But that actually what you can do now, you can create one separate jason or dictionary itself. Okay, then, you can maintain a different different version of the prompt with the different keys. Okay.

1408
03:57:36.450 --> 03:57:38.810
srihari Vanga: Okay, then, yeah, thank you. Then.

1409
03:57:38.810 --> 03:57:39.840
Sunny Savita: Yeah, thank you.

1410
03:57:40.504 --> 03:57:51.069
Sunny Savita: You haven't provide me a complete error until provide me the complete. Not till assertion. Just click on this error part click on this scrollable element, click on it.

1411
03:57:51.190 --> 03:57:56.809
Sunny Savita: scrollable element, scrollable elements or scrollable element.

1412
03:57:57.430 --> 03:58:00.230
Sunny Savita: View as a scrollable element. See?

1413
03:58:00.530 --> 03:58:06.380
Sunny Savita: Output is truncated. Now, click on it, click on the assertion.

1414
03:58:06.930 --> 03:58:18.070
Sunny Savita: assertion, error, assertion, error. Now press, control a control, a now copied and paste it there.

1415
03:58:35.916 --> 03:58:39.639
Sunny Savita: Think some what boundaries we have

1416
03:59:11.480 --> 03:59:16.460
Sunny Savita: from your data, Jara, like, how have you captured data in a documents.

1417
03:59:21.830 --> 03:59:23.949
Anil Gaikwad: I just copy pasted from the document.

1418
03:59:27.700 --> 03:59:30.050
Sunny Savita: Check with the embedic model. Is it working or not?

1419
03:59:31.030 --> 03:59:35.159
Sunny Savita: Write any query or check embedding dot embed? Query. Do it.

1420
03:59:35.730 --> 03:59:36.600
Anil Gaikwad: Okay.

1421
03:59:40.360 --> 03:59:42.710
Sunny Savita: Check once. Here, you know, file

1422
04:00:03.000 --> 04:00:06.849
Sunny Savita: yeah. Embedding dot embed query.

1423
04:00:15.030 --> 04:00:20.649
Sunny Savita: Yeah, which embedding model you are using this only right?

1424
04:00:21.780 --> 04:00:22.340
Anil Gaikwad: Oh yes!

1425
04:00:22.640 --> 04:00:25.650
Sunny Savita: Right now length and check the length. Also. Run it.

1426
04:00:34.026 --> 04:00:35.120
Anil Gaikwad: It's working.

1427
04:00:37.530 --> 04:00:38.570
Sunny Savita: Where is working?

1428
04:00:46.780 --> 04:00:55.429
Sunny Savita: Oh, now, check the length once length, length, right? The length plan. Function. Lem. Yeah.

1429
04:00:59.470 --> 04:01:02.630
Sunny Savita: Don't mention in the variable right the line only. How?

1430
04:01:04.130 --> 04:01:05.160
Sunny Savita: What is it?

1431
04:01:06.720 --> 04:01:07.940
Anil Gaikwad: 3, 0, 7, 2.

1432
04:01:08.260 --> 04:01:11.990
Sunny Savita: How? 3 0 7, 4. Now check your dimensions.

1433
04:01:12.380 --> 04:01:17.890
Sunny Savita: What you mentioned see 3, 0 7, 2, right, and check with the dimension.

1434
04:01:20.690 --> 04:01:22.419
Anil Gaikwad: While you are creating index.

1435
04:01:24.140 --> 04:01:27.289
Sunny Savita: Voice, index. Oh, 3, 8, 4.

1436
04:01:30.550 --> 04:01:31.570
Anil Gaikwad: Is it right?

1437
04:01:32.531 --> 04:01:34.340
Sunny Savita: Check once again, once again.

1438
04:01:34.660 --> 04:01:36.740
Sunny Savita: What is what was the length check?

1439
04:01:39.710 --> 04:01:40.470
Sunny Savita: So check.

1440
04:01:40.470 --> 04:01:46.159
milind kulkarni: There's directly the lane function there, right in that index itself. So there won't be any problem.

1441
04:01:46.160 --> 04:01:52.910
Sunny Savita: Yeah, you can mention the length also, instead, the index function that is also fine. Now run it create a web files.

1442
04:01:53.090 --> 04:01:55.730
Sunny Savita: No, no, don't do it right now, not there.

1443
04:01:55.730 --> 04:01:58.010
Sunny Savita: Find out. Remove this one.

1444
04:01:58.290 --> 04:02:01.639
Sunny Savita: Now, create a files index. This one, yeah. Vector, store.

1445
04:02:02.160 --> 04:02:03.640
Sunny Savita: Yeah. Now, edit.

1446
04:02:07.920 --> 04:02:09.310
Sunny Savita: add the data log.

1447
04:02:14.190 --> 04:02:16.380
Anil Gaikwad: I think it's due to the index.

1448
04:02:16.380 --> 04:02:19.689
Sunny Savita: How in the embedding, what was mismatching? Actually.

1449
04:02:20.770 --> 04:02:33.149
Sunny Savita: okay. So always check the length or do one thing in the index itself dynamically, you can write a logic, so whatever length will calculate it there automatically, the length will pick up inside the index while it is creating. Okay.

1450
04:02:33.880 --> 04:02:34.780
Anil Gaikwad: Got it.

1451
04:02:34.780 --> 04:02:35.390
Sunny Savita: Yeah.

1452
04:02:35.810 --> 04:02:36.560
Anil Gaikwad: Thank you.

1453
04:02:36.560 --> 04:02:37.279
Sunny Savita: Thank you, sir.

1454
04:02:38.020 --> 04:02:41.429
Sunny Savita: Yes. So, Milan. Sorrow anyone is there, guys? Please go ahead.

1455
04:02:41.430 --> 04:02:42.599
milind kulkarni: Can I go?

1456
04:02:42.600 --> 04:02:43.860
Sunny Savita: Yeah. Please. Mullen.

1457
04:02:43.860 --> 04:02:57.380
milind kulkarni: Yeah. I mean, I have a small question. The the rack chain that you explained yesterday. Right? I want. Can you explain how exactly the flow happens right? How does that context gets

1458
04:02:57.540 --> 04:03:01.190
milind kulkarni: called automatically retriever on the question.

1459
04:03:01.455 --> 04:03:01.720
Sunny Savita: Right.

1460
04:03:01.720 --> 04:03:04.990
milind kulkarni: The question like, how exactly the flow happens.

1461
04:03:04.990 --> 04:03:07.050
Sunny Savita: Okay, okay, just a second. I can.

1462
04:03:07.190 --> 04:03:08.030
Sunny Savita: Oh.

1463
04:03:08.030 --> 04:03:10.567
milind kulkarni: I can share my screen if you want it.

1464
04:03:11.820 --> 04:03:12.309
Sunny Savita: Yeah, you.

1465
04:03:12.310 --> 04:03:13.109
milind kulkarni: Bobby can share.

1466
04:03:13.110 --> 04:03:14.719
Sunny Savita: Or you can share the screen. Okay.

1467
04:03:14.720 --> 04:03:15.490
milind kulkarni: Okay.

1468
04:03:15.780 --> 04:03:16.660
Sunny Savita: It's not.

1469
04:03:25.160 --> 04:03:26.860
milind kulkarni: Yeah. Right? There, that code.

1470
04:03:27.420 --> 04:03:28.250
milind kulkarni: Yes.

1471
04:03:32.180 --> 04:03:34.469
Sunny Savita: I can explain you here just a second.

1472
04:03:44.990 --> 04:03:45.930
Satish: Go.

1473
04:03:49.570 --> 04:03:50.160
Sunny Savita: Oh!

1474
04:03:52.970 --> 04:03:54.160
Sunny Savita: Can you see this.

1475
04:03:54.580 --> 04:03:55.970
milind kulkarni: Yes, I can. Yeah.

1476
04:03:56.700 --> 04:04:04.460
Sunny Savita: Okay. So what will happen, you know, whenever, like, see, it's using the.

1477
04:04:05.110 --> 04:04:07.470
milind kulkarni: Enable concept in back end.

1478
04:04:08.920 --> 04:04:10.869
Sunny Savita: Runnable is nothing itself.

1479
04:04:11.720 --> 04:04:12.610
milind kulkarni: Pass through.

1480
04:04:12.780 --> 04:04:14.769
Sunny Savita: One glass in the lecture.

1481
04:04:15.440 --> 04:04:16.030
milind kulkarni: Yes.

1482
04:04:16.260 --> 04:04:19.000
Sunny Savita: Okay, one interface or Linkedin is created.

1483
04:04:19.950 --> 04:04:20.950
Sunny Savita: Okay?

1484
04:04:22.150 --> 04:04:28.839
Sunny Savita: So that's all like later use concept. Later on we can discuss that. But see what is happening. Whenever the question will come.

1485
04:04:29.830 --> 04:04:31.459
Sunny Savita: any question will come.

1486
04:04:33.990 --> 04:04:40.770
Sunny Savita: Okay, let's say, I asked over here, what is your name?

1487
04:04:43.880 --> 04:04:44.650
Sunny Savita: Okay?

1488
04:04:44.860 --> 04:04:47.400
Sunny Savita: So this question, basically, it will come over here.

1489
04:04:48.490 --> 04:04:49.030
milind kulkarni: Okay.

1490
04:04:49.030 --> 04:04:53.690
Sunny Savita: What this your name?

1491
04:04:55.810 --> 04:05:00.769
Sunny Savita: Okay. Now the same question will come over here as well to the Retriever.

1492
04:05:02.120 --> 04:05:07.150
Sunny Savita: Okay, so it will call Retriever dot invoke.

1493
04:05:09.200 --> 04:05:12.629
Sunny Savita: and the question will be there, what is your name? Okay.

1494
04:05:12.630 --> 04:05:13.290
milind kulkarni: Okay.

1495
04:05:13.570 --> 04:05:15.939
Sunny Savita: With that. Actually, you will find out, sir.

1496
04:05:16.040 --> 04:05:18.279
Sunny Savita: Document, let's say, K, equal to 3.

1497
04:05:20.260 --> 04:05:25.029
Sunny Savita: Okay. Now, what this format Doc, will do. So from this document

1498
04:05:25.650 --> 04:05:30.240
Sunny Savita: it will fetch the page content where the actual text available.

1499
04:05:31.210 --> 04:05:36.370
milind kulkarni: From which which? Which library we are pulling that format up from Langton Core, or.

1500
04:05:36.370 --> 04:05:39.870
Sunny Savita: Format docs. Actually, it's a custom function which we have written.

1501
04:05:40.860 --> 04:05:41.779
milind kulkarni: Oh, okay.

1502
04:05:41.780 --> 04:05:45.030
Sunny Savita: See if you will look in the corner there, only you will find out this one.

1503
04:05:45.410 --> 04:05:46.449
Sunny Savita: This is great.

1504
04:05:47.100 --> 04:05:48.200
milind kulkarni: Okay, got it?

1505
04:05:48.200 --> 04:05:49.010
Sunny Savita: Okay.

1506
04:05:49.300 --> 04:05:50.430
milind kulkarni: No.

1507
04:05:50.540 --> 04:05:53.160
Sunny Savita: We got what we got the context

1508
04:05:53.430 --> 04:05:56.269
Sunny Savita: in the form of list. And we have this question.

1509
04:05:56.810 --> 04:06:00.420
Sunny Savita: okay, so what is my key name, contest and question.

1510
04:06:00.560 --> 04:06:04.290
Sunny Savita: So the prompt. Already we have defined those variable name, this key name, right.

1511
04:06:04.290 --> 04:06:04.820
milind kulkarni: Yeah, yeah, yeah.

1512
04:06:04.820 --> 04:06:05.169
Sunny Savita: To call.

1513
04:06:05.170 --> 04:06:09.479
milind kulkarni: Rest is clear, rest is clear, only that particular portion was not clear.

1514
04:06:09.480 --> 04:06:20.840
Sunny Savita: Huh? So why, it is getting complicated now, because this is a very compact syntax, because of this 5 operator and all means, we are not getting the underlying view of it right? So what is happening under the hood? That's why.

1515
04:06:21.030 --> 04:06:21.580
milind kulkarni: Yeah.

1516
04:06:21.580 --> 04:06:22.870
Sunny Savita: Okay, so.

1517
04:06:22.870 --> 04:06:23.290
milind kulkarni: Okay.

1518
04:06:23.290 --> 04:06:30.119
Sunny Savita: I would suggest you run it step by step, or look into my Lcl con, Lcl, video.

1519
04:06:30.490 --> 04:06:36.690
Sunny Savita: this video basically will give you the detailed understanding of the Lcl concept language. Okay.

1520
04:06:37.490 --> 04:06:39.709
milind kulkarni: No worries. Thank you so much, really appreciate it.

1521
04:06:39.710 --> 04:06:40.380
Sunny Savita: Thank you, sir.

1522
04:06:40.380 --> 04:06:41.590
milind kulkarni: Thank you. You have time.

1523
04:06:41.900 --> 04:06:44.965
Sunny Savita: Yeah, okay. Marlin is done. Now.

1524
04:06:46.210 --> 04:06:48.129
Sunny Savita: her shop. Please go ahead with the doubt.

1525
04:06:48.130 --> 04:06:49.790
Sree Harsha: Okay. Can I speak?

1526
04:06:50.180 --> 04:06:50.770
Sunny Savita: Yeah, sure.

1527
04:06:50.770 --> 04:06:55.850
Sree Harsha: Okay? So in my company, we are working on a chatbot for real estate automation, using na, 10. Okay.

1528
04:06:56.350 --> 04:06:57.180
Sunny Savita: Sorry.

1529
04:06:57.540 --> 04:07:02.899
Sree Harsha: So in my company, we are working on a chatbot for real estate automation, using N. 18.

1530
04:07:03.140 --> 04:07:13.409
Sree Harsha: So the objective of this Chatbot is to collect the user requirement sequentially one by one, and recommend the properties by using SQL data present in the back end.

1531
04:07:13.950 --> 04:07:22.560
Sree Harsha: So my question is, should I ask the Llm. To generate the SQL. Query directly, or should I extract the parameters and build a parameterized query manually.

1532
04:07:23.200 --> 04:07:24.899
Sree Harsha: which is the best practice here.

1533
04:07:26.810 --> 04:07:30.019
Sunny Savita: Best practice, or how I can tell you that

1534
04:07:31.410 --> 04:07:33.059
Sunny Savita: what you have done so far.

1535
04:07:33.720 --> 04:07:45.970
Sree Harsha: So far, we are extracting the user details one by one, and we are storing it as Json format. Okay? And using the Json format. We are constructing a SQL. Query and retrieving the property from the database.

1536
04:07:45.970 --> 04:07:46.800
Sunny Savita: Hmm.

1537
04:07:46.800 --> 04:08:05.199
Sree Harsha: So the problem here is whenever the exact match is not found, it is saying, properties are not found. So instead of this, we can just ask Lm. To behave like an intelligent salesperson and recommend other properties. Right? So for that, what we can implement.

1538
04:08:06.955 --> 04:08:13.709
Sunny Savita: Again, I would say extract parameter, and the parameterized query, that would be a great one, maybe. Right? So.

1539
04:08:13.710 --> 04:08:14.150
Sree Harsha: Oh!

1540
04:08:14.150 --> 04:08:16.409
Sunny Savita: Even I cannot answer directly for this one.

1541
04:08:16.670 --> 04:08:23.670
Sunny Savita: So what you can do now you can use some validation tool debugging, tool testing tool for the more for more like a detail, actually.

1542
04:08:24.640 --> 04:08:25.409
Sree Harsha: Okay. Okay. Fine.

1543
04:08:25.410 --> 04:08:26.120
Sunny Savita: Okay.

1544
04:08:26.540 --> 04:08:40.780
Sunny Savita: But, by the way, parameterized queries are like a great option. See what you are doing. I understood. That means you have a prompt using the prompt basically are extracting up like the parameter. Okay, as a Json, then you're building a query. And then you are executing that. That's it. Right?

1545
04:08:41.968 --> 04:08:45.320
Sunny Savita: So it's a like a good approach.

1546
04:08:45.460 --> 04:08:48.109
Sunny Savita: But I'm not sure about the other one until

1547
04:08:48.220 --> 04:08:50.269
Sunny Savita: we are not validating that. Okay? So.

1548
04:08:50.270 --> 04:08:51.270
Sree Harsha: Okay. Okay.

1549
04:08:54.120 --> 04:08:54.660
Rakshitha Ballal: It's a.

1550
04:08:55.300 --> 04:08:58.199
Sunny Savita: Okay. So Asha is done. Now, manju.

1551
04:08:58.200 --> 04:09:00.770
Saurabh Verma: Can, s, sorry.

1552
04:09:00.770 --> 04:09:01.340
Saurabh Verma: Yeah.

1553
04:09:02.404 --> 04:09:02.879
Manjunath Puttaswamy: Yeah.

1554
04:09:02.880 --> 04:09:05.720
Sunny Savita: Do not follow up anyone. Is there, guys, please go ahead.

1555
04:09:05.720 --> 04:09:24.289
Manjunath Puttaswamy: Yeah, thanks sunny thanks for explanation for your stress class on nectar database. So it was more knowledgeable for one. I have a 2 query, one like, I'm currently working on one AI patent search using chat Gpt for one model using azure open air

1556
04:09:24.310 --> 04:09:36.219
Manjunath Puttaswamy: and data source are with both external source, google.patent.com. And second, we also have a list of around 7 40,000 patent documents in our organizations.

1557
04:09:36.460 --> 04:09:47.690
Manjunath Puttaswamy: So I've done like, whatever the concepts which you already thought so, my only query is like, when we are retrieving response from the

1558
04:09:47.690 --> 04:10:07.730
Manjunath Puttaswamy: particular prompt right using a reaction and other part. So there is as no way like in your previous question, like, you have explained about reaction with the K parameter K school to 3, or K school to 5. So is that a limitation like, for example, one of any of the relevant question they asked in the chat the answers might be coming from some

1559
04:10:08.038 --> 04:10:14.820
Manjunath Puttaswamy: some 13 to 14 documents. So, but in the response maximum we can give go up to K is equal to 20.

1560
04:10:14.830 --> 04:10:21.029
Manjunath Puttaswamy: So is there any way that can be increased? Or is that a limitations from the open open area.

1561
04:10:22.350 --> 04:10:25.289
Sunny Savita: No, sir, no limitation over there.

1562
04:10:25.480 --> 04:10:26.140
Manjunath Puttaswamy: Yeah, exactly.

1563
04:10:26.140 --> 04:10:27.710
Sunny Savita: Limitation. You are talking about.

1564
04:10:27.710 --> 04:10:49.279
Manjunath Puttaswamy: For example, I asked a question, give me a this. Currently, what I worked on is a chemical based organization related. So my question is on the ceilings product. So I have done the all the chunking, all the data information, everything done. So, questions on the ceilings product the answers for the ceilings product. It is from almost like 13 to 14 documents

1565
04:10:49.655 --> 04:11:11.080
Manjunath Puttaswamy: when it give based on the semantic ranker that similar, like 0 point 8 0, whichever the nearest one. So I'm getting that responses, and I'm displaying in the my web chat board window. So the challenges like, if there are 20 documents it's only giving a top 5 references

1566
04:11:11.080 --> 04:11:22.620
Manjunath Puttaswamy: like this, information is coming from Pdf, B. Pdf, C. Like that. So is there a way? Can we load all the Pdfs. Which are it's coming, or something that I need to? Configure it. The symmetric search.

1567
04:11:22.620 --> 04:11:38.959
Sunny Savita: Again, I would say there is no such a limitation with the retrieving basically, whatever number of like the document you want to retrieve. Let's say, you say I can summarize your problem. You have a 40,000 document. Let's assume. Okay, now, you stored inside the vector, database. Okay.

1568
04:11:38.960 --> 04:11:42.780
Sunny Savita: you are putting some k, 3, 5, 2030, 40, right.

1569
04:11:42.780 --> 04:11:43.250
Manjunath Puttaswamy: Okay.

1570
04:11:43.250 --> 04:11:46.599
Sunny Savita: And based on that. You're not getting your information. Okay?

1571
04:11:46.600 --> 04:11:49.539
Manjunath Puttaswamy: Coming. But reference link, reference.

1572
04:11:49.784 --> 04:11:53.450
Sunny Savita: Reference link is not coming. That metadata. You're not getting in some of the document.

1573
04:11:54.320 --> 04:12:01.449
Sunny Savita: So what you can do you have certain like thing which you can perform. You can increase that number of K.

1574
04:12:02.220 --> 04:12:02.650
Sunny Savita: Pretty once.

1575
04:12:03.215 --> 04:12:06.040
Manjunath Puttaswamy: Can't give more than 20.

1576
04:12:06.040 --> 04:12:13.639
Sunny Savita: Now see, there is a okay, there is a if this is the case, in that case you can check with some other type of retrieval, like context, window and all.

1577
04:12:14.320 --> 04:12:15.000
Manjunath Puttaswamy: Okay.

1578
04:12:15.000 --> 04:12:17.659
Sunny Savita: So with that particular context window.

1579
04:12:18.130 --> 04:12:18.890
Sunny Savita: All right.

1580
04:12:20.034 --> 04:12:21.610
Sunny Savita: If you can get

1581
04:12:21.720 --> 04:12:45.590
Sunny Savita: some something right? So sentence, window retrieval, and all these kind of like, the option is also available in the retrieval, and you can check out with the re ranking, maybe in top 20 in top 10. If you're not getting the best one. Let's say we are putting top 20, if top 20 also not getting the best one, maybe in some like initial document, you can perform the re ranking and all. Okay.

1582
04:12:45.590 --> 04:13:12.730
Manjunath Puttaswamy: I've done all those scenarios testing like where I given the threshold of 0 point 6 0 earlier. Then I've changed 2.3. And I see in the results that I'm getting all top 14 relevances along the document, but only in the context window. When the response is coming. It's only shows the top 5 or top 6 maximum top, 6 responses. Not more than that, references like, even though informations are correct, and it is mentioning the all the metadata name filings.

1583
04:13:12.730 --> 04:13:14.760
Sunny Savita: What reference link you are getting there.

1584
04:13:15.259 --> 04:13:29.930
Manjunath Puttaswamy: For example, Abcd, that is a file name. So it is giving correctly for some top 5 documents. Then the next information is from Xyz dot Pdf, the information are there in the chat window, but that link is not appearing.

1585
04:13:31.660 --> 04:13:35.899
Manjunath Puttaswamy: It's because of that K parameter. That's something which I was having a doubt.

1586
04:13:35.900 --> 04:13:43.959
Sunny Savita: So, sir, like we'll have to check that without checking that. What is a program? What is the issue? What is the code? How I can say something on top of it.

1587
04:13:43.960 --> 04:13:47.710
Manjunath Puttaswamy: Sir, can I get your 10 min offline so I can show it whenever you.

1588
04:13:47.710 --> 04:13:51.179
Sunny Savita: Offline. Just drop me a mail. If I'll be available, we'll discuss okay.

1589
04:13:51.180 --> 04:14:10.450
Manjunath Puttaswamy: Okay. Okay. The second one, sir. Sorry I couldn't join early today because of some office deployment work the second assignment. But whatever you've given us like completing with respect to dB with astra, dB, and all, is it a license, one or free one, sir, to complete the task.

1590
04:14:11.100 --> 04:14:12.789
Sunny Savita: Complete the sorry. What you said.

1591
04:14:13.010 --> 04:14:20.958
Manjunath Puttaswamy: You're given the task to complete the rag right assignment to we have to show the activity with Astra after dB or something.

1592
04:14:21.880 --> 04:14:25.550
Manjunath Puttaswamy: Is it all licensed one, or we have to? Is it a free one, sir?

1593
04:14:25.550 --> 04:14:28.279
Sunny Savita: Explore, sir. Explore. Okay, it's a task only.

1594
04:14:28.510 --> 04:14:29.699
Manjunath Puttaswamy: Oh, okay. Okay. Thank you.

1595
04:14:29.700 --> 04:14:30.520
Sunny Savita: Okay. Thanks.

1596
04:14:30.520 --> 04:14:31.170
Manjunath Puttaswamy: Interesting.

1597
04:14:32.710 --> 04:14:33.830
Rakshitha Ballal: Or sunny.

1598
04:14:33.830 --> 04:14:36.750
Sunny Savita: Okay, Rakshita, please go ahead.

1599
04:14:36.750 --> 04:14:37.340
Rakshitha Ballal: Yeah.

1600
04:14:37.340 --> 04:14:39.110
Saurabh Verma: Then give me chance also later.

1601
04:14:39.770 --> 04:14:41.279
Sunny Savita: Yeah, I'll come to that, sir. Don't worry.

1602
04:14:41.280 --> 04:14:56.929
Rakshitha Ballal: Yeah, I mean. So yesterday, whatever the thing which has mentioned right I was trying to run that code I was trying. I was getting the error so you could look at the code and see what is the issue with it. I just took the over code, and I was just running it.

1603
04:14:56.930 --> 04:14:58.849
Sunny Savita: Show me. Show me if you're getting any error. Then.

1604
04:14:58.850 --> 04:15:01.819
Rakshitha Ballal: Yeah, so let me share. Okay.

1605
04:15:01.820 --> 04:15:06.989
Sunny Savita: Yeah. Okay, Aman, for Satish. Anyone is there? Mahesh guys, please go ahead.

1606
04:15:07.240 --> 04:15:15.499
Hemanth Reddy: Yeah, it's Heman clear. So I have some questions relating to the vector, database. Right? You explained. So if you can go back to the canvas.

1607
04:15:16.730 --> 04:15:19.750
Sunny Savita: You have a question regarding the vector database. Yeah, please go ahead.

1608
04:15:19.750 --> 04:15:23.230
Hemanth Reddy: Yeah. Like, can you go back to the canvas, please, where you had explained it on the.

1609
04:15:23.230 --> 04:15:25.900
Sunny Savita: Okay, okay, just wait. So I'll come to that.

1610
04:15:25.900 --> 04:15:26.859
Hemanth Reddy: Okay. Fair enough.

1611
04:15:28.980 --> 04:15:30.460
Sunny Savita: Yeah, Rakshita, what's the doubt?

1612
04:15:31.050 --> 04:15:34.680
Rakshitha Ballal: Yeah. So I'm trying to run this. And then it is giving me

1613
04:15:45.850 --> 04:15:50.050
Rakshitha Ballal: this is yesterday code. I'm just trying to run. Yeah, it's giving me this error.

1614
04:15:50.670 --> 04:15:51.699
Sunny Savita: What is the error?

1615
04:15:54.540 --> 04:15:56.099
Rakshitha Ballal: Unexpected Argument.

1616
04:15:57.090 --> 04:15:58.769
Sunny Savita: Check. Now, last part of the error.

1617
04:16:02.410 --> 04:16:04.129
Sunny Savita: Hmm! What is the error.

1618
04:16:04.850 --> 04:16:06.910
Rakshitha Ballal: Your default. Credentials were not formed.

1619
04:16:06.910 --> 04:16:09.919
Sunny Savita: Hmm! Now, what do you have to do? Tell me.

1620
04:16:12.750 --> 04:16:16.100
Rakshitha Ballal: So I have a Api key in the environment.

1621
04:16:16.100 --> 04:16:17.699
Sunny Savita: Show me that Api key.

1622
04:16:23.180 --> 04:16:24.840
Rakshitha Ballal: This is a Google Api token.

1623
04:16:24.980 --> 04:16:27.070
Sunny Savita: Now show me where you are loading that key.

1624
04:16:30.470 --> 04:16:34.559
Rakshitha Ballal: That was not part of the code, I think, yesterday. Whatever which we are doing.

1625
04:16:34.960 --> 04:16:38.259
Sunny Savita: Yeah. So what you will have to do, you will have to load it first.st Right?

1626
04:16:39.040 --> 04:16:40.522
Rakshitha Ballal: Yeah. I tried to load it.

1627
04:16:40.770 --> 04:16:42.590
Sunny Savita: Show me. Show me where you are loading that.

1628
04:16:42.720 --> 04:16:49.690
Rakshitha Ballal: Yeah, let me show you that. I tried to load it, and then it was giving the error there also. Here, you see.

1629
04:16:50.530 --> 04:16:53.299
Sunny Savita: Excellent Google Api key, not token.

1630
04:16:53.940 --> 04:16:55.539
Sunny Savita: Write a correct name there.

1631
04:17:00.000 --> 04:17:01.350
Sunny Savita: Google Api. Key.

1632
04:17:03.320 --> 04:17:04.750
Rakshitha Ballal: No token, only.

1633
04:17:04.750 --> 04:17:07.320
Sunny Savita: No right key. Here. Google Api. Key.

1634
04:17:07.590 --> 04:17:10.950
Rakshitha Ballal: Okay, so does it matter? It's the same way.

1635
04:17:10.950 --> 04:17:20.040
Sunny Savita: Yeah, obviously, right. So whatever SDK they have written, maybe there they are, following this particular approach. So Google Api key the by default name you will get from the Google itself. Okay.

1636
04:17:20.530 --> 04:17:21.280
Rakshitha Ballal: Okay.

1637
04:17:21.280 --> 04:17:23.700
Sunny Savita: You will have to write a correct name only.

1638
04:17:36.420 --> 04:17:38.000
Sunny Savita: Now restart the kernel.

1639
04:17:51.480 --> 04:18:00.149
Sunny Savita: Hmm, OS is not defined. Input OS input OS, first.st

1640
04:18:00.310 --> 04:18:01.020
Rakshitha Ballal: Yeah.

1641
04:18:11.700 --> 04:18:12.789
Sunny Savita: Now, run it.

1642
04:18:22.660 --> 04:18:23.450
Sunny Savita: Okay.

1643
04:18:23.450 --> 04:18:30.070
Rakshitha Ballal: Yeah, I think it is early. But yeah, how? How? We know that we have to give a Google Api key.

1644
04:18:30.780 --> 04:18:35.149
Sunny Savita: Once you will generate a keynote there itself, you will get a variable name. Okay.

1645
04:18:35.850 --> 04:18:38.409
Rakshitha Ballal: Oh, there also! Let me check that.

1646
04:18:39.660 --> 04:18:43.559
Sunny Savita: Okay. Next out is, yes. Who was there?

1647
04:18:43.560 --> 04:18:44.910
Satish: Yeah staticia.

1648
04:18:45.120 --> 04:18:46.239
Sunny Savita: You guys are, of course.

1649
04:18:46.810 --> 04:18:53.959
Satish: Yeah. So sunny. Yesterday I queue. Okay? Recording my content. I have.

1650
04:18:54.870 --> 04:19:00.399
Sunny Savita: Your voice is oh, sorry! Sorry! Someone was asking a doubt regarding that canva also. Satish. You were the guy.

1651
04:19:00.400 --> 04:19:01.850
Hemanth Reddy: Payment time. Indeed, I was asking about.

1652
04:19:01.850 --> 04:19:06.260
Sunny Savita: Hamman was there. Okay, Hamman, just a second. I'm sharing that canva. Okay. Satish. Please wait. Okay.

1653
04:19:06.650 --> 04:19:07.650
Satish: Okay. Okay. Yeah.

1654
04:19:07.650 --> 04:19:08.190
Sunny Savita: Yeah.

1655
04:19:11.230 --> 04:19:12.310
Sunny Savita: Oh, Hammond.

1656
04:19:12.310 --> 04:19:15.750
Hemanth Reddy: Can you go to the vector database where you had explained in Hello.

1657
04:19:16.990 --> 04:19:17.700
Sunny Savita: Which one.

1658
04:19:17.700 --> 04:19:18.860
Hemanth Reddy: Vector database.

1659
04:19:19.370 --> 04:19:22.979
Hemanth Reddy: You had created diagram right on the vector database.

1660
04:19:23.900 --> 04:19:25.870
Hemanth Reddy: The flow, you had explained.

1661
04:19:28.170 --> 04:19:32.750
Hemanth Reddy: Yeah, on the in the canvas. No below that that was in the yellow color. Go below that.

1662
04:19:32.940 --> 04:19:33.570
Sunny Savita: Oh!

1663
04:19:34.520 --> 04:19:38.290
Hemanth Reddy: Below below the. And there was another diagram. Right? You explained.

1664
04:19:42.800 --> 04:20:00.119
Hemanth Reddy: yeah, okay, okay. Here. Only so when you say similarity, search right? So what are the other? So so when we're defining the similarity search, do we have to explicitly define whether is it like a Csdp or L 2 kind of thing we have, should we have to define it explicitly?

1665
04:20:00.120 --> 04:20:13.629
Sunny Savita: You can define that that configuration is also available. But if you're not going to define that, it is also fine automatically, it will take care of that. But the accuracy is matter for you. If you're not getting a desired answer, and that part actually, you will have to debug that this part as well, okay.

1666
04:20:13.940 --> 04:20:21.250
Hemanth Reddy: So so like, if I'm not getting it, I have to explicitly say that it should be go with cosine similarity, kind of a thing or Dp.

1667
04:20:21.520 --> 04:20:29.770
Sunny Savita: That thing actually, whatever framework and the database you will use there itself, they will give you this particular configuration. Okay, how you can define that

1668
04:20:30.460 --> 04:20:31.050
Sunny Savita: in order.

1669
04:20:31.050 --> 04:20:35.559
Hemanth Reddy: So will it, anyway. Correlated to the embedding model. I I use.

1670
04:20:36.410 --> 04:20:43.800
Sunny Savita: Yeah, means, embedding is a model. Then on top of the embedding model, this matrix will be the separate one. Okay.

1671
04:20:44.210 --> 04:21:00.179
Hemanth Reddy: No, no, my question is like if I change the embedding model. So, and I'm not getting a relevant answer like previous embedding model. I was getting the relevant answer with similar research. But if I change the embedding model I don't get the similar kind of a symbol. If I use the other context same.

1672
04:21:00.350 --> 04:21:05.669
Sunny Savita: I don't get this same kind of answer, so should I have to change the cost and similar Tp and all things.

1673
04:21:05.670 --> 04:21:31.949
Sunny Savita: No, see if similarty, the embedding actually model, if you're going to change right? So embedding model is like matter a lot if you're going to be use the bigger embedding model like this Google one or the Openai one, it is going to be sustained the more context from the sentence itself. Okay, so that's the 1st part, and then on top of it, you will have to apply this similarity score. Okay, so with both, actually, you can be, do. You can do back and forth, got it.

1674
04:21:33.150 --> 04:21:40.389
Hemanth Reddy: So similarity score will be the one which I'm putting when when I'm doing the query part right. You're saying like, I can get some similarity.

1675
04:21:40.769 --> 04:21:46.080
Hemanth Reddy: Like, I can get some like output like 3 or 4, and then do a similar research within them.

1676
04:21:48.190 --> 04:21:49.570
Sunny Savita: Sorry I didn't get it.

1677
04:21:49.570 --> 04:21:53.090
Hemanth Reddy: No, no, I I could not get your question. What is that you're saying like.

1678
04:21:53.090 --> 04:21:58.389
Sunny Savita: 1st of all, you are confused with this. 1st of all, tell me, what is your understanding with this one and this one.

1679
04:21:58.860 --> 04:22:08.820
Hemanth Reddy: No, my so we had. We had a embedding model model. So we tried with Openai, okay? Then we moved it to Azure Openai. Because we have. We are azure shop kind of thing.

1680
04:22:08.820 --> 04:22:09.360
Sunny Savita: Oh!

1681
04:22:09.360 --> 04:22:27.400
Hemanth Reddy: Then the code was not working as expected. We are not getting the relevant answers as expected, which was working fine with Openai. Okay? Now, like we are trying to. I'm trying to figure out whether is something related to this cosine similarity or something we have to define it explicitly.

1682
04:22:27.620 --> 04:22:35.859
Sunny Savita: Yeah, that's what I'm saying. Now, see, you can define this thing explicitly. This control we have in with respect to the databases.

1683
04:22:35.860 --> 04:22:36.200
Hemanth Reddy: Okay.

1684
04:22:36.200 --> 04:22:39.029
Sunny Savita: Okay, let's say I have used files.

1685
04:22:39.810 --> 04:22:49.549
Sunny Savita: I created my index with the cosine similarity. So whenever I will perform any query on top of the index. It will calculate the cosine similarity getting my point.

1686
04:22:49.930 --> 04:22:50.700
Hemanth Reddy: Yeah, yeah.

1687
04:22:50.860 --> 04:22:57.810
Sunny Savita: Embedding doesn't matter over here. I created my index with the cosine similarity. It will calculate the cosine similarity.

1688
04:22:57.960 --> 04:23:08.560
Sunny Savita: Let's say I created index with a pine cone. Haven't I? Haven't. I haven't mentioned anything over there, right? So maybe some by default technique it is using for performing the similarity search.

1689
04:23:08.880 --> 04:23:10.130
Hemanth Reddy: Okay. Yeah.

1690
04:23:10.130 --> 04:23:21.260
Sunny Savita: But if you want to maintain, mention anything right, customize one. Maybe that option would be there inside the documentation and all. I will have to explore that part. Getting my point.

1691
04:23:21.260 --> 04:23:22.350
Hemanth Reddy: Okay. Okay.

1692
04:23:22.350 --> 04:23:36.459
Sunny Savita: So embedding is one of the thing. And the similarity part this, this particular matrix is one of the thing. You can change the model. Whatever you are going to be use, you can use that. And then on top of it, you can configure any sort of a matrix. Got it.

1693
04:23:37.100 --> 04:23:42.059
Hemanth Reddy: So embedding module should not change something here. That's what.

1694
04:23:42.060 --> 04:23:43.920
Sunny Savita: No, no, no.

1695
04:23:43.920 --> 04:23:49.170
Hemanth Reddy: Okay. Okay? Then I have to look at something else on. Okay, fair enough.

1696
04:23:49.530 --> 04:23:50.310
Sunny Savita: Yeah, okay.

1697
04:23:51.550 --> 04:23:53.009
Satish: Yes. Okay.

1698
04:23:53.010 --> 04:23:55.929
Sunny Savita: Thank you, sir. So this is done. Now.

1699
04:23:56.530 --> 04:23:57.600
Mahesh: Is Mahesh?

1700
04:23:58.130 --> 04:24:02.739
Mahesh: Oh, yeah, Mahesh tell me basic question. So

1701
04:24:02.880 --> 04:24:13.820
Mahesh: I was trying Json Parser last time when I run it on python notebook. It's running fine, but when I write it, run it as a python program.

1702
04:24:13.820 --> 04:24:14.320
Sunny Savita: Hmm.

1703
04:24:14.587 --> 04:24:17.800
Mahesh: I'm getting an error. Can I share my screen and show it.

1704
04:24:18.210 --> 04:24:19.859
Sunny Savita: Yeah, sure. So you can share the screen.

1705
04:24:20.720 --> 04:24:22.820
Mahesh: I'm not getting an option to share the screen.

1706
04:24:22.820 --> 04:24:25.730
Sunny Savita: Mahesh. Okay, I'm promoting you as a panelist.

1707
04:24:28.320 --> 04:24:32.350
Sunny Savita: Mahesh and Perth. Right, Perth. What's your doubt? Perth? Sharma.

1708
04:24:37.060 --> 04:24:37.510
PARTH SHARMA 2F: Sunny.

1709
04:24:39.660 --> 04:24:41.160
Sunny Savita: You have a doubt. Right? But

1710
04:24:47.660 --> 04:24:50.919
Sunny Savita: okay, Plusharab. You have a doubt. Right?

1711
04:24:51.210 --> 04:24:53.989
praharsha: Sir. I need to share my screen.

1712
04:24:54.420 --> 04:24:55.140
praharsha: So then.

1713
04:24:55.140 --> 04:25:00.330
Sunny Savita: Adding a panelist, Saurabh Verma, your doubt is clear.

1714
04:25:02.620 --> 04:25:03.480
Sunny Savita: Okay, so this is.

1715
04:25:03.480 --> 04:25:05.710
Saurabh Verma: No, sir, no, sir, my doubt is not clear.

1716
04:25:06.000 --> 04:25:07.819
Sunny Savita: Okay, what is the top.

1717
04:25:08.560 --> 04:25:10.840
Saurabh Verma: Okay, my question is very short.

1718
04:25:11.820 --> 04:25:16.710
Sunny Savita: Yeah, coming to Satish and Saurabh to both of you. Mahesh, if you can share your screen, please share.

1719
04:25:16.710 --> 04:25:19.320
Mahesh: I'm sharing my screen. Yeah. Can you see my screen.

1720
04:25:19.320 --> 04:25:20.400
Sunny Savita: Yeah, I can see.

1721
04:25:20.490 --> 04:25:24.289
Mahesh: Okay, so very simple. Example. Where?

1722
04:25:26.550 --> 04:25:51.739
Mahesh: Where? I'm building a SQL. Query and running, asking the response to give as a SQL. And then probably what are the tables? It's looking. And so on. Okay, so I built a chain as the prompt I'm using Llm. Model and parser when I run it in python notebook. Everything is fine. I'm getting the response. I did the same thing in Python. You suggest the same code. I just copy, paste it, and I get.

1723
04:25:51.890 --> 04:25:57.379
Mahesh: I'm getting an error like, let me run this smooth

1724
04:26:02.230 --> 04:26:04.099
Mahesh: so you can see there

1725
04:26:05.550 --> 04:26:10.800
Mahesh: it gives an error saying that the Llm. Output it is expecting as a text.

1726
04:26:10.900 --> 04:26:27.449
Mahesh: but at the end it's able to pull things as a SQL. But there is a warning or error behind the scene. So you just want to understand a bigger context? Is there a difference between python notebook and running directly as a python file.

1727
04:26:27.450 --> 04:26:36.889
Sunny Savita: See, sir, what both place? Actually, it is using the python kernel. Only just a second. Let me check. I think something is wrong. Wait.

1728
04:26:38.110 --> 04:26:45.040
Sunny Savita: 1st of all, don't execute it over the power cell sometime it it will give you the error. Give me the access of your screen.

1729
04:26:46.700 --> 04:26:49.860
Mahesh: Think, okay?

1730
04:26:55.270 --> 04:26:56.550
Sunny Savita: Okay, just a second.

1731
04:27:46.180 --> 04:27:48.909
Sunny Savita: Where is the object of this class.

1732
04:27:49.470 --> 04:27:52.930
Mahesh: You can scroll up. There is SQL. Object. Can you scroll little up.

1733
04:27:52.930 --> 04:27:54.529
Sunny Savita: Just a second.

1734
04:27:58.980 --> 04:28:00.410
Sunny Savita: Give me a moment. Okay.

1735
04:28:00.410 --> 04:28:01.040
Mahesh: Nope.

1736
04:28:15.604 --> 04:28:19.439
Sunny Savita: There is a power cut at my side. Can you give me 2 min.

1737
04:28:19.610 --> 04:28:20.480
Mahesh: Yeah, sure.

1738
04:29:02.750 --> 04:29:05.289
Sunny Savita: Mahesh. Just allow me 2 min. Okay, I'm checking.

1739
04:29:06.400 --> 04:29:10.390
Sunny Savita: I cannot see my monitor. Actually, my system is only up. Okay, wait.

1740
04:29:11.900 --> 04:29:12.540
Mahesh: Okay.

1741
04:30:18.127 --> 04:30:23.370
Sunny Savita: Yes, sir, I can see. Now, just a second. Okay. I disconnected my monitor. Wait.

1742
04:30:25.070 --> 04:30:31.380
Sunny Savita: Okay. So I was checking with the class right? Can you show me where you create the object of the class?

1743
04:30:31.700 --> 04:30:33.129
Mahesh: Yeah, you can.

1744
04:30:33.370 --> 04:30:36.399
Sunny Savita: If I can scroll up. Yeah.

1745
04:30:38.110 --> 04:30:53.480
Sunny Savita: okay, okay, it's a identity class. Sorry user user. Query, okay? Sequel, is there now? Now? No, okay, fine. Now, can you? Run it here, right? Python. Okay, just a second. It's a SQL builder. Py, right?

1746
04:30:53.790 --> 04:30:54.450
Mahesh: Yes.

1747
04:30:54.640 --> 04:30:58.149
Sunny Savita: Okay, just copy the path from here. Right?

1748
04:30:59.380 --> 04:31:02.789
Sunny Savita: Run it from terminal so that you can check.

1749
04:31:07.070 --> 04:31:09.669
Mahesh: It's a good decision.

1750
04:31:10.610 --> 04:31:11.320
Sunny Savita: Conform.

1751
04:31:11.580 --> 04:31:12.749
Mahesh: And see that.

1752
04:31:13.100 --> 04:31:15.029
Sunny Savita: It's a parentic issue, sir, I think.

1753
04:31:15.850 --> 04:31:21.580
Mahesh: It says, basically output parser exception. It is expecting a Json, but it got text from Llm.

1754
04:31:21.580 --> 04:31:29.639
Sunny Savita: No, that's what. No, sir, it is a issue from the parentic. Only that's why maybe something else. It is getting which model you're using.

1755
04:31:30.010 --> 04:31:31.350
Mahesh: We're using Grok.

1756
04:31:31.671 --> 04:31:33.600
Sunny Savita: Deep. Seek. No, that's fine, sir.

1757
04:31:33.890 --> 04:31:39.329
Mahesh: So if I do the same thing. Yeah, what surprises me is when I do the same thing on.

1758
04:31:39.330 --> 04:31:40.119
Sunny Savita: We are. We are like.

1759
04:31:40.120 --> 04:31:48.760
Mahesh: The notebook is the second one. Json Parser, dot VPN, right is exactly same code, bear and error.

1760
04:31:49.490 --> 04:31:50.570
Sunny Savita: Oh!

1761
04:31:51.210 --> 04:31:52.900
Mahesh: And just run it on the top.

1762
04:31:56.210 --> 04:31:57.519
Sunny Savita: Just 2 seconds.

1763
04:32:03.560 --> 04:32:04.240
Sunny Savita: Okay.

1764
04:32:08.490 --> 04:32:10.100
Sunny Savita: this is the codena, right?

1765
04:32:11.440 --> 04:32:18.610
Mahesh: No, you you didn't click on that. You you clicked on a different one. Can you go to the Json parcel dot IP.

1766
04:32:18.610 --> 04:32:21.770
Sunny Savita: This code. Now you convert into the like the script, only.

1767
04:32:21.770 --> 04:32:27.180
Mahesh: Okay, no, you can take out the 1st part. I think there was another cell as well.

1768
04:32:27.370 --> 04:32:28.639
Mahesh: It was not required.

1769
04:32:33.390 --> 04:32:34.920
Sunny Savita: I can execute.

1770
04:32:34.920 --> 04:32:37.030
Mahesh: You can put anything testers.

1771
04:32:42.710 --> 04:32:45.709
Sunny Savita: So this is your file. That is not py. Okay.

1772
04:32:45.710 --> 04:32:47.099
Mahesh: Okay, you can just

1773
04:32:50.690 --> 04:32:51.660
Mahesh: go ahead, Patrick.

1774
04:32:54.840 --> 04:32:59.589
Mahesh: It's in. No, it's in Langchain experiment slash. Latest.

1775
04:32:59.590 --> 04:33:00.610
Sunny Savita: All good.

1776
04:33:14.630 --> 04:33:15.650
Sunny Savita: It's coming.

1777
04:33:18.360 --> 04:33:22.800
Mahesh: Can you scroll down? Yeah, this is the problem. See?

1778
04:33:25.630 --> 04:33:32.869
Sunny Savita: Jason decode error. Actually, you you get that when the output is not getting generated correctly. It have, it might happen.

1779
04:33:33.029 --> 04:33:36.459
Sunny Savita: Just change the model and check with other model here. Okay.

1780
04:33:37.560 --> 04:33:38.180
Mahesh: Okay.

1781
04:33:38.180 --> 04:33:43.100
Sunny Savita: This one and send me the solution. I'll check that. Okay in my system. I'll run it and send you back. Okay, this one.

1782
04:33:43.570 --> 04:33:47.979
Mahesh: Okay, this one's so it shouldn't be anything to do with python notebook.

1783
04:33:48.314 --> 04:33:55.680
Sunny Savita: No, I think so. Now, like model is hallucinating over here. I think so. So just do one thing use different model.

1784
04:33:55.689 --> 04:33:56.309
Mahesh: Okay.

1785
04:33:56.800 --> 04:33:58.289
Sunny Savita: And check one more time.

1786
04:33:59.070 --> 04:34:00.150
Mahesh: Okay, there, you go.

1787
04:34:00.400 --> 04:34:04.849
Sunny Savita: Yeah. Use a gemini model that way. Okay? Flash 1.5 flash.

1788
04:34:05.150 --> 04:34:05.689
Mahesh: Okay.

1789
04:34:06.150 --> 04:34:07.000
Sunny Savita: Opponent.

1790
04:34:07.160 --> 04:34:07.830
Sunny Savita: Yeah.

1791
04:34:07.830 --> 04:34:08.630
Mahesh: Thank you, sir.

1792
04:34:08.759 --> 04:34:09.569
Sunny Savita: Thank you, sir.

1793
04:34:10.073 --> 04:34:11.080
Mahesh: Hi! Simon!

1794
04:34:16.339 --> 04:34:24.659
Sunny Savita: Okay, okay, so I'll do that, Mahesh. Just a second. I'm changing your role.

1795
04:34:25.269 --> 04:34:28.259
Sunny Savita: Praharsha praharsha. Please share your screen.

1796
04:34:28.259 --> 04:34:29.249
praharsha: Yeah.

1797
04:34:29.250 --> 04:34:32.059
Sunny Savita: And give me a moment, guys, I have one message for you.

1798
04:34:46.340 --> 04:34:47.430
Sunny Savita: Good.

1799
04:34:49.000 --> 04:34:51.649
praharsha: So sunny. Can you see my screen.

1800
04:34:51.669 --> 04:34:54.110
Sunny Savita: Just just to give me a second, sir. Okay.

1801
04:35:39.730 --> 04:35:43.119
Sunny Savita: yeah. You forwarded one message to all of you guys.

1802
04:35:45.220 --> 04:35:48.380
Sunny Savita: Whoever is there, and I'll ping in the group as well. Okay, great.

1803
04:35:51.470 --> 04:35:53.529
Sunny Savita: It's not getting copied.

1804
04:36:17.590 --> 04:36:21.181
Sunny Savita: Okay, it is not getting past.

1805
04:36:32.119 --> 04:36:34.020
Sunny Savita: okay, guys. So

1806
04:36:34.820 --> 04:36:40.000
Sunny Savita: just a second, let me. Ping that message in the group itself. Okay, allow me to make one.

1807
04:37:12.939 --> 04:37:14.450
Sunny Savita: Yeah. Now, perfect.

1808
04:37:14.570 --> 04:37:17.520
Sunny Savita: Yes, go ahead with your doubt.

1809
04:37:18.710 --> 04:37:25.659
praharsha: Yeah, yeah, Hi, sunny. So the use cases, we have some data in the Mongodb.

1810
04:37:26.140 --> 04:37:29.696
praharsha: And we want to build a chatbot so that it will

1811
04:37:30.340 --> 04:37:33.929
praharsha: communicate with multiple collections and retrieve the data.

1812
04:37:34.395 --> 04:37:34.860
Sunny Savita: Okay.

1813
04:37:34.860 --> 04:37:43.840
praharsha: So what is the functionality that I am thinking is, we have the common case for now let's say we take ids from each collection.

1814
04:37:43.849 --> 04:37:44.559
Sunny Savita: Hmm.

1815
04:37:44.560 --> 04:37:46.301
praharsha: And we retrieve the data.

1816
04:37:46.650 --> 04:37:47.360
Sunny Savita: Hmm.

1817
04:37:47.520 --> 04:37:58.520
praharsha: But the thing is, we have to make it like a chat bot. So the when the user asks something. So I have created one small collection as an example. Here.

1818
04:37:58.680 --> 04:37:59.090
Sunny Savita: Hmm, so.

1819
04:37:59.090 --> 04:38:04.309
praharsha: So if you see here, the question is, you have to tell the student math marks.

1820
04:38:04.529 --> 04:38:09.499
praharsha: So I have given. The name is Ravi. Role number is 21 and section is p. 1.

1821
04:38:10.509 --> 04:38:19.869
praharsha: So in one collection I have the student name and role number section in another collection. I have the teachers details in another collection

1822
04:38:20.373 --> 04:38:26.279
praharsha: so the id is, they have combined all 3 things as the id.

1823
04:38:26.580 --> 04:38:27.060
Sunny Savita: Hmm.

1824
04:38:27.060 --> 04:38:30.209
praharsha: And you have subject wise marks in a object.

1825
04:38:33.189 --> 04:38:38.969
praharsha: So how to get this kind of debt out of Dp.

1826
04:38:40.509 --> 04:38:44.049
praharsha: if the user asks this this type of questions.

1827
04:38:44.849 --> 04:38:54.709
Sunny Savita: Student will come from different collection teacher from the different collection from, and this you have to combine all the information right at the end. Is it.

1828
04:38:55.220 --> 04:38:55.950
praharsha: Yeah.

1829
04:38:57.110 --> 04:39:02.860
Sunny Savita: So what you can do. Now see collection, you have a different different collection for the different different type of data. Right?

1830
04:39:02.860 --> 04:39:03.490
praharsha: Yes.

1831
04:39:03.720 --> 04:39:07.380
Sunny Savita: So there is a 1 way. Do you can create a separate index.

1832
04:39:08.400 --> 04:39:08.770
praharsha: Yeah.

1833
04:39:08.939 --> 04:39:11.199
Sunny Savita: For every sort of a collection, right?

1834
04:39:11.200 --> 04:39:11.810
praharsha: Okay.

1835
04:39:11.810 --> 04:39:17.350
Sunny Savita: Now, whenever any sort of a query will come, let's say, student, hit the student index teacher, hit that teacher index.

1836
04:39:17.689 --> 04:39:18.169
praharsha: Okay.

1837
04:39:18.169 --> 04:39:29.819
Sunny Savita: Got it. You can route that, or else in the same index you can segregate the data based on the metadata also. So what you can do here, you can perform the pre filtering.

1838
04:39:30.269 --> 04:39:37.549
Sunny Savita: Let's say, while you want to fetch a data with respect to the student. Okay, so in the key. You will have to mention the student.

1839
04:39:37.859 --> 04:40:01.069
Sunny Savita: Okay, in a metadata the key will match with the student. It will only look into that particular, that particular like a document. Okay? And it will fetch the student. Related information. Got it. So it's all about the filtering, pre filtering post filtering, or it's all about the like separation concern of separation. Right? So you can create a like a multiple indexes and all. And you can route your query. That's it. Got it.

1840
04:40:01.610 --> 04:40:10.420
praharsha: Okay. Can we? Write a prompt says that the Llm only takes the keywords as input and it will write the code.

1841
04:40:10.420 --> 04:40:22.730
Sunny Savita: There, there, actually, you can introduce one more layer. Right? Okay, between the retrieval while you are going to be retrieved. Now let's say, if you want to be parameterize your query, whatever you are asking paste to the Llm. Okay, you can introduce

1842
04:40:23.570 --> 04:40:32.830
Sunny Savita: means. See? At as like, at whatever level right. You want to be like tweak the architecture feel free to do it.

1843
04:40:32.950 --> 04:40:34.950
Sunny Savita: I would suggest you audit.

1844
04:40:35.750 --> 04:40:36.123
praharsha: Okay?

1845
04:40:37.170 --> 04:40:51.630
praharsha: So can we expect this object kind of data also as output? I mean, does Llm go instead the object and give the answer. Also, if we give the schema as input. So here we have subject wise marks in an object right?

1846
04:40:51.950 --> 04:41:03.040
praharsha: So in in this collection. So I want math marks, so it has to go instead of the object. You may have 4, 5 objects, and out of 4 1 object is math, and you have the marks.

1847
04:41:03.430 --> 04:41:10.400
praharsha: So if I provide the schema Llm can go inside and it can identify and retrieve the data.

1848
04:41:11.150 --> 04:41:15.210
Sunny Savita: So Llm. Will not be responsible for retrieving a data. No, Llm. Cannot.

1849
04:41:15.210 --> 04:41:20.860
praharsha: Write the query, yeah, form the query. You can form the query if I give the schema.

1850
04:41:20.860 --> 04:41:25.730
Sunny Savita: Correct. You can form the query, and you need that particular collection that is possible.

1851
04:41:25.940 --> 04:41:26.490
Sunny Savita: Okay.

1852
04:41:26.490 --> 04:41:27.160
praharsha: Okay.

1853
04:41:27.400 --> 04:41:27.980
Sunny Savita: Yeah.

1854
04:41:28.650 --> 04:41:43.320
praharsha: Currently we were only matching with the Ids, because they have combined this ids, and they have made some collections. So for a single single key value pair as ids. I'm able to do that.

1855
04:41:43.810 --> 04:41:52.549
praharsha: So I mean, without providing the schema. I'm just providing the Ids of the collections, and Llm. Is doing the.

1856
04:41:52.550 --> 04:41:59.120
Sunny Savita: No, no, you will have to like on a granular level. You will have to think, sir. Okay, not on the Id. It will work only with a single collection.

1857
04:41:59.690 --> 04:42:03.529
Sunny Savita: In that case, okay, provide more filter data. Okay?

1858
04:42:04.500 --> 04:42:05.119
Sunny Savita: For the first.st

1859
04:42:05.120 --> 04:42:05.780
praharsha: Okay.

1860
04:42:05.780 --> 04:42:06.560
Sunny Savita: Noted.

1861
04:42:06.930 --> 04:42:11.059
praharsha: So by providing schema input only we have to do this.

1862
04:42:11.290 --> 04:42:12.800
Sunny Savita: Correct, correct, sir.

1863
04:42:13.240 --> 04:42:14.850
praharsha: Yeah, sure. Thank you.

1864
04:42:15.990 --> 04:42:16.670
Sunny Savita: Okay.

1865
04:42:17.650 --> 04:42:19.290
Satish: Hello! Sunny. Sunny is here.

1866
04:42:19.290 --> 04:42:27.660
Sunny Savita: Yeah, sir, I'm coming to you guys one by one. Sorry. Actually, my side, there is a issue with the power. Okay? So

1867
04:42:28.157 --> 04:42:33.979
Sunny Savita: Parth Parth is there, Saurabh? Is there Satish is there Satish? You are having any doubt. So please go ahead.

1868
04:42:33.980 --> 04:42:40.972
Satish: Let's see, because in my office we have an

1869
04:42:41.960 --> 04:42:51.229
Satish: but whatever I'm giving that model, you know that embedding is not working always. You're giving error like this embedding is incorrect. Embedding. Please

1870
04:42:51.450 --> 04:42:52.839
Satish: show the correct link you, Buddy.

1871
04:42:52.840 --> 04:42:53.630
Sunny Savita: Share the screen like.

1872
04:42:53.630 --> 04:42:58.460
Satish: No, that I cannot, because I am talking to my personal laptop.

1873
04:42:58.860 --> 04:42:59.640
Satish: Okay.

1874
04:43:00.440 --> 04:43:02.529
Sunny Savita: As of now can you show me? Show me that.

1875
04:43:03.630 --> 04:43:10.230
Satish: No, as of now, I am logging with my personal laptop, not my office.

1876
04:43:10.650 --> 04:43:13.100
Satish: so I can also. But I don't know why.

1877
04:43:13.260 --> 04:43:14.350
Satish: There it's coming.

1878
04:43:14.350 --> 04:43:18.259
Sunny Savita: In office. Laptop. It is not working, but in your personal laptop it is working. Is it?

1879
04:43:19.490 --> 04:43:26.800
Satish: No, I have not tried with my person, because that is the have not tried yet with my person.

1880
04:43:27.140 --> 04:43:29.749
Sunny Savita: Office. Api. You cannot use in your personal.

1881
04:43:31.290 --> 04:43:35.540
Satish: Yeah, I can use. But I don't know. Maybe security balance I'm not into.

1882
04:43:35.810 --> 04:43:37.239
Satish: Maybe I don't know.

1883
04:43:37.610 --> 04:43:38.089
Sunny Savita: All good.

1884
04:43:38.090 --> 04:43:43.449
Satish: But it's not the problem. Okay. I tried with a lot of modes.

1885
04:43:43.960 --> 04:43:45.620
Satish: Goodbye, like.

1886
04:43:46.220 --> 04:43:49.590
Sunny Savita: Your voice is getting stuck, sir. Can you come again, please? Hello!

1887
04:43:49.820 --> 04:43:50.650
Satish: Hello!

1888
04:43:50.650 --> 04:43:51.100
Sunny Savita: Yeah, yeah.

1889
04:43:51.463 --> 04:43:56.550
Satish: Yes, sir, I I'm telling that. Can I try with the multiple model? Okay.

1890
04:43:56.550 --> 04:43:57.360
Sunny Savita: Oh! Oh!

1891
04:43:57.360 --> 04:44:00.810
Satish: Whatever insurance is providing. So I have tried, but.

1892
04:44:00.810 --> 04:44:01.280
Sunny Savita: Cool.

1893
04:44:01.280 --> 04:44:03.309
Satish: My code is not right. Okay.

1894
04:44:03.560 --> 04:44:10.529
Satish: in a openai I'm able to run whatever Christian has explained, so that I'm able to run in my personal.

1895
04:44:10.780 --> 04:44:11.490
Sunny Savita: Okay.

1896
04:44:11.490 --> 04:44:13.990
Satish: So is there any issue.

1897
04:44:15.341 --> 04:44:18.789
Sunny Savita: But I have to check, sir, if you can show me that, I think that would be great. Okay.

1898
04:44:19.750 --> 04:44:26.739
Satish: And another thing is that now, okay, today, in a Google Api key you are not using. But still code is working.

1899
04:44:27.190 --> 04:44:33.499
Sunny Savita: So I was using that I, whenever we are load writing that load to underscore dot envy now, automatically just loading that those variable.

1900
04:44:33.500 --> 04:44:41.829
Satish: But why? It's not working. What? Why, it's not working for a pinecone. Because, pinecone, you are using that.

1901
04:44:41.830 --> 04:44:45.030
Sunny Savita: No, no, actually, when we are going to be create a index right

1902
04:44:45.470 --> 04:45:01.120
Sunny Savita: at that time, explicitly, we have to mention that. Okay, so sometime. What happens. Now see, I executed my code. Okay, see, I loaded a key so automatically is going to be set in the environment variable. The SDK have been written in such a way whenever we are going to be installed, the links in Google generate and all. Okay. So no need to mention

1903
04:45:01.520 --> 04:45:04.930
Sunny Savita: explicitly in most of the cases, you will get that. Actually, okay.

1904
04:45:04.940 --> 04:45:05.790
Satish: Okay. Okay.

1905
04:45:05.790 --> 04:45:06.510
Sunny Savita: Yeah.

1906
04:45:06.510 --> 04:45:08.090
Satish: Okay. Thank you.

1907
04:45:08.370 --> 04:45:09.319
Sunny Savita: Yeah, thank you.

1908
04:45:11.040 --> 04:45:14.310
Sunny Savita: Okay, so this Perth sort of anyone, is there, guys, please go ahead.

1909
04:45:15.160 --> 04:45:16.600
PARTH SHARMA 2F: Have a window.

1910
04:45:16.600 --> 04:45:18.050
Sunny Savita: Yeah, please, ma'am, go ahead.

1911
04:45:18.614 --> 04:45:34.640
PARTH SHARMA 2F: Sunny. Actually, in my company, I have to develop the one chat box for the present. So this is the audio like the input data is the audio and converting in either on the text or or in the audio.

1912
04:45:34.640 --> 04:45:58.279
PARTH SHARMA 2F: So actually, I do not understand which type of the model in that conditions we are using. So in the today, video, I can understand which type of the database vector database is using and embedding using. But I'm not confident about the model. So which type model I can prefer in this condition.

1913
04:45:58.670 --> 04:46:01.487
Sunny Savita: Which can you come again with the condition? Sorry

1914
04:46:01.800 --> 04:46:15.569
PARTH SHARMA 2F: Condition is like developer, one Chatbot chat interference, and where the patient is giving audio text like the asking, I am facing this this issue. So please suggest me which type of that.

1915
04:46:15.570 --> 04:46:21.020
Sunny Savita: So, ma'am, for that. Now what you can do, see? You can. Use the whisper model.

1916
04:46:21.450 --> 04:46:27.699
Sunny Savita: Okay, yeah. Whisper model what it will do it will convert your like the speech into the text.

1917
04:46:28.030 --> 04:46:43.889
Sunny Savita: Okay, whatever like you're you are asking to your like to your patient right and to your end user, it will convert into the text, okay? And then it will like, based on that. See, once you will get a text, right? The transcript and all. Then on top of it, you can work

1918
04:46:44.310 --> 04:46:45.280
Sunny Savita: right

1919
04:46:46.020 --> 04:46:55.830
Sunny Savita: in the same way. So just do one thing. I have created one video on my Youtube channel. It was a full fledged project regarding that AI voice assessment. Okay.

1920
04:46:56.300 --> 04:46:57.240
Sunny Savita: so just

1921
04:46:57.240 --> 04:47:12.910
Sunny Savita: search on my Youtube channel. Sunny Savita AI voice assistant, you will get that particular project. I have used the Google model Tts model. You can use the I think it was a Google model you will have to check over there and even like, I have used a whisper as well over there. Okay.

1922
04:47:13.480 --> 04:47:15.610
Sunny Savita: so yeah, just explore that part. Got it.

1923
04:47:15.610 --> 04:47:33.990
PARTH SHARMA 2F: Yes, yes, thank you. Thank you very much. And one more question, sunny. I have already used the Google Api key for a 1 project. So means that one is I was using on a last year. So right now, this one is I can use that Api key

1924
04:47:34.220 --> 04:47:35.649
PARTH SHARMA 2F: for today's work.

1925
04:47:36.510 --> 04:47:40.860
Sunny Savita: Ma'am, it might be expired so better if it a new one. Okay.

1926
04:47:42.100 --> 04:47:47.369
PARTH SHARMA 2F: Oh, so means alternative way which one you I would use.

1927
04:47:49.000 --> 04:47:52.120
Sunny Savita: You are saying you generated when you generated that key. Sorry.

1928
04:47:52.853 --> 04:47:53.920
PARTH SHARMA 2F: Previous year.

1929
04:47:54.740 --> 04:47:58.019
Sunny Savita: No, ma'am, don't need a new key. Okay, new cleanup.

1930
04:47:59.690 --> 04:48:12.459
PARTH SHARMA 2F: Okay, thank you. Thank you. Today's session is very useful. And I already watch your rag Youtube channel. But I didn't reach that. The videos. So I will again. I am watching and.

1931
04:48:12.460 --> 04:48:15.889
Sunny Savita: Yeah, ma'am, just check. If you have any doubt you can ask me in the next session.

1932
04:48:15.890 --> 04:48:18.350
PARTH SHARMA 2F: Yeah, yeah, sure. Thank you. Thank you very much.

1933
04:48:18.350 --> 04:48:24.939
Sunny Savita: Thank you, ma'am. Okay, saurav. If you have any doubts, guys, please go ahead.

1934
04:48:25.130 --> 04:48:35.780
Saurabh Verma: Okay, so sunny? 2 2 questions. One is very small. One is that is related to now like this rag, we are doing. Okay, I'm into pre-sales.

1935
04:48:35.780 --> 04:48:59.950
Saurabh Verma: Okay? And in the company. We have various, we get various Rfps, and then we have our documents of the organization to support the eligibility criteria and other documents. Right case studies. So rag approach, I think will work for us because we have it continuously gets updated and new things keep coming as we in the projects.

1936
04:49:00.000 --> 04:49:13.959
Saurabh Verma: Second, my question is that for the modeling part as if we if we keep it in our office rather than using the open AI Internet model. So

1937
04:49:14.560 --> 04:49:35.410
Saurabh Verma: yesterday you mentioned that Gpu get Burns, and you know you have to have a different configuration machine. So for such a small scale thing will the llama model, or anything you can suggest which we should be using any any suggestion you would like to give how we should approach. I I don't want to keep it in the Internet. The.

1938
04:49:36.500 --> 04:49:36.840
Sunny Savita: Complete.

1939
04:49:36.840 --> 04:49:50.040
Sunny Savita: So for for that, so what you can do. 1st of all, you can check the best and possible model right so recently, I released one video regarding the fine tuning. Okay, there. Actually, I shown the different different Leader Board with respect to the open source model.

1940
04:49:50.040 --> 04:50:14.989
Sunny Savita: Okay, which open source model works well, which is not right. So first, st we can look into those kind of dashboard. Okay? And from those particular dashboard, according to your use case, you can pick the model or the general model only. Okay, and you can host it. So where you will, host and see you cannot do it in your local system. Currently, right? So you'll require some cloud environment for that. Okay, so what you can do, you can take your own server over the cloud itself. You can

1941
04:50:14.990 --> 04:50:32.490
Sunny Savita: create a you can configure the Aws sage maker. It's a like best possible. And the easiest solution. Okay, just do one thing, just take a model over there, load it if you want to find to the fine, tune it, and then exposes the Api, and you can use that model in your own manage environment. Okay.

1942
04:50:32.700 --> 04:50:33.330
Saurabh Verma: Meaning.

1943
04:50:33.960 --> 04:50:49.489
Saurabh Verma: Okay? So the company documents which are there, let's say, for example, the profit and loss statement, and all those net you know. Profit those things so that will remain local in my over here, or.

1944
04:50:49.490 --> 04:51:18.239
Sunny Savita: No, sir, see, whenever this kind of use case will come. Okay. So 1st of all, you have to talk with the business. You have to gather all the requirement. What kind of data is you have? Okay? So according to that, basically, you need to check with your it team. Whoever is providing you that managed environment, right? Because you will not develop a system in your like a laptop. And you will say to business, Okay, whenever you require anything, just reuse my system for using this application. No? Right? You are going to

1945
04:51:18.240 --> 04:51:29.679
Sunny Savita: somewhere. Okay. See, sir, I also work with a pharma use case. Okay, there was very like a red data. We even cannot expose single line to anywhere. Okay.

1946
04:51:29.680 --> 04:51:30.090
Saurabh Verma: Hmm.

1947
04:51:30.090 --> 04:51:57.190
Sunny Savita: So what they have done. They. I work with our Mnc. Right? So what they have done. They have a separate it team. They provide, like each and every resources to us, the managed resources and the in-house company resources. Okay, so if you'll talk to them, they will help to you with those resources there, you can configure like. Your model your databases, everything that managed resources. And you can utilize that. And the data will not be exposed. Okay, so

1948
04:51:57.280 --> 04:52:14.420
Sunny Savita: as a single person as a lone one, you cannot do that thing, even though, if you're working in any startup, if you are working on your startup, you have to figure out those things right, how I can create a virtual private cloud. Okay, how you can secure my data with some cloud policies. And all right, so those things you have to figure it out got it.

1949
04:52:15.240 --> 04:52:18.319
Saurabh Verma: Okay. Okay, next is, I'm getting one spot.

1950
04:52:19.440 --> 04:52:23.599
Saurabh Verma: Yeah, I'm getting much call error. If I can sh share my screen.

1951
04:52:24.530 --> 04:52:26.249
Sunny Savita: Yeah, yeah, sure, we can do that.

1952
04:52:26.755 --> 04:52:29.790
Sunny Savita: Can I speak in between our.

1953
04:52:29.790 --> 04:52:30.760
Saurabh Verma: He's where he's where.

1954
04:52:30.760 --> 04:52:38.810
chandraprabha Arun: Yeah, okay, yeah. Actually, I would like to create a Chatbot project using Amazon. Can you please give me some advice?

1955
04:52:39.490 --> 04:52:41.560
Sunny Savita: Oh, well, Amazon! Better no see I.

1956
04:52:41.560 --> 04:52:42.050
chandraprabha Arun: Yeah, yeah.

1957
04:52:42.050 --> 04:52:47.410
Sunny Savita: You playlist normally, you can follow that up. I created a chatbot using the back Doc itself.

1958
04:52:48.961 --> 04:52:52.040
chandraprabha Arun: okay? And another like

1959
04:52:52.270 --> 04:53:20.630
chandraprabha Arun: in a in that, another project. Actually, that is also related to that one but in that project the customer customer in engages with the human agent that is like maybe voice or chat, and this will be the implemented as as another part of second use case. So how can we integrate both like agent or system triggers and agent assist event? And that is actually

1960
04:53:20.850 --> 04:53:29.330
chandraprabha Arun: should have an endpoint endpoint which can pass the token, so that, using the chat, either using the chat or either using the

1961
04:53:29.962 --> 04:53:33.340
chandraprabha Arun: voice. So how can we integrate that one.

1962
04:53:33.340 --> 04:53:36.450
Sunny Savita: Ma'am, see? Just take an import, right?

1963
04:53:36.500 --> 04:54:05.310
Sunny Savita: Or they can all, after taking that input, like, whether it's a voice or something, give it to your model, it will generate a transcript or something, and then you can utilize as a text whatever text and the like, the whatever in in whatever form. You're getting an input, right? So see if you want to get an understanding of the backdrop and the end to end Chatbot with the backdrop. Just follow this playlist I discuss in a very detailed manner, then create some like the boilerplate, or at least okay, some basic code and all. And then on top of it. We can scale it. Okay.

1964
04:54:05.310 --> 04:54:09.679
chandraprabha Arun: Once done, then we can host it in the bedrock. That's what.

1965
04:54:10.260 --> 04:54:10.760
Sunny Savita: So.

1966
04:54:11.588 --> 04:54:12.900
chandraprabha Arun: No, I'm asking that.

1967
04:54:13.060 --> 04:54:28.529
chandraprabha Arun: once done, the coding, using that means for the Chatbot, then or the same, for the same project means like the customer engagement, you know. So once done the coding. Then after that we can host it in the bedrock. Is that the way.

1968
04:54:28.530 --> 04:54:37.340
Sunny Savita: No, no, ma'am, bedrock is not for the hosting. Okay, for the hosting actually required. Some server bedrock can provide you the ecosystem.

1969
04:54:37.460 --> 04:54:38.640
Sunny Savita: Okay.

1970
04:54:38.640 --> 04:54:39.309
chandraprabha Arun: Yeah, yeah.

1971
04:54:39.310 --> 04:54:58.560
Sunny Savita: Generate for for the model, for the embedded model for the databases. So it is similar to the launching. But it is a cloud native. Okay? So not a lengthen basically links for the different purpose. But yeah, it's a cloud. Native means it's a Aws specific ecosystem for developing a Llm based application. Got it. So it is.

1972
04:54:59.070 --> 04:55:00.540
Sunny Savita: What is the main thing.

1973
04:55:00.790 --> 04:55:01.280
chandraprabha Arun: Oh!

1974
04:55:01.280 --> 04:55:07.249
Sunny Savita: It will provide you the model. It will provide dynamic model. It will provide you the databases. All those things got it.

1975
04:55:07.790 --> 04:55:13.989
chandraprabha Arun: So what is the major difference with be between the line chain? If you are using Langchain and.

1976
04:55:15.380 --> 04:55:38.940
Sunny Savita: Integration is there. So what a bedrock have done! Bedrock have posted their model in their own specific aws, hosted their model on their own server. Right? And they are. They are providing you as a bedrock. Those things. Okay? So you can read the model. You can read the embedding model like you are reading from the open. Okay, you are using the language. And you are reading the model from the open. Api. Is it right?

1977
04:55:39.310 --> 04:55:43.940
Sunny Savita: Okay? So instead of reading the model from the open. Yeah, you can read from the padlock itself.

1978
04:55:44.200 --> 04:55:44.980
Sunny Savita: Got it.

1979
04:55:45.299 --> 04:55:52.010
chandraprabha Arun: And the client client also can get the data or get what we are doing that is also simultaneously, right.

1980
04:55:52.010 --> 04:55:56.419
Sunny Savita: Yeah, do one thing, ma'am. Just watch my playlist. Okay, you will get a clear understanding there. Okay.

1981
04:55:56.420 --> 04:56:15.409
chandraprabha Arun: Okay, so can I ask another question like, for example, actually, we are doing the coding in the Vs code and traveling purpose or anything. We are not using the desktop so that can we? Get the same files in another device? Is there any other options.

1982
04:56:16.860 --> 04:56:20.899
chandraprabha Arun: or like in a cloud format, or in.

1983
04:56:21.234 --> 04:56:22.569
Sunny Savita: I didn't get that.

1984
04:56:22.570 --> 04:56:26.179
chandraprabha Arun: No, I'm asking that in the Vs code only we are coding.

1985
04:56:27.540 --> 04:56:46.819
chandraprabha Arun: so maybe, for example, if we are traveling, or if we are changing the device to or if we can, simultaneously, if we can work in another device, so is there any provision? Is there any other option? Is there? That in that? Another device also, I have to get all the files. What I am doing in the

1986
04:56:47.464 --> 04:56:52.135
chandraprabha Arun: in the previous previously, what we have done all the files.

1987
04:56:52.560 --> 04:57:01.399
Sunny Savita: So we can. We can manage the project using the github now, right you can use the github cannot cannot be. Expose the code over the Github.

1988
04:57:03.147 --> 04:57:06.800
chandraprabha Arun: Everything. I did not, added in Github all.

1989
04:57:06.800 --> 04:57:25.920
Sunny Savita: No, no, see for the collaborative coding and the project building. Now, we always use the Github. Okay. Github mainly is for that only Github bit bucket code lab, and this one which one gitlab right? So this platform is on only for the collaborative project building. And all right.

1990
04:57:26.560 --> 04:57:35.990
chandraprabha Arun: So so this in the same way, I have to. I have to install Vs code in another device, and deploying the code from the Github.

1991
04:57:35.990 --> 04:57:36.510
Sunny Savita: We'll see.

1992
04:57:36.510 --> 04:57:37.150
chandraprabha Arun: To fix.

1993
04:57:37.471 --> 04:57:52.259
Sunny Savita: Repository. Okay, so with Vs code, you can connect that Github. You can upload your code over there. Let's say some someone or some other developer wants to work on that they will fetch the same code, and they will start working on it. That's it.

1994
04:57:54.190 --> 04:57:58.059
chandraprabha Arun: Okay. So there is no any other provision from vs, no need to do that. One.

1995
04:57:58.060 --> 04:57:58.890
Sunny Savita: No.

1996
04:58:00.800 --> 04:58:13.549
chandraprabha Arun: Actually, I I need all the files. What I'm doing. The same system. What what I'm which system is I'm using for the these all the classes, you know daily what we are doing.

1997
04:58:13.550 --> 04:58:14.220
Sunny Savita: Number.

1998
04:58:14.220 --> 04:58:14.669
chandraprabha Arun: One of those.

1999
04:58:14.670 --> 04:58:17.590
Sunny Savita: It will work for you. Okay.

2000
04:58:19.540 --> 04:58:25.070
chandraprabha Arun: So that I have to post publish in Github. Right then only I can fetch from that other device.

2001
04:58:25.380 --> 04:58:25.725
Sunny Savita: Correct.

2002
04:58:26.070 --> 04:58:33.190
chandraprabha Arun: So first, st I need to install Vs code the same what I did in the system. So 1st I have to install Vs code. Then

2003
04:58:33.490 --> 04:58:36.310
chandraprabha Arun: fetching all the files from Github.

2004
04:58:36.730 --> 04:58:38.069
Sunny Savita: Yes, yes, correct, ma'am.

2005
04:58:38.070 --> 04:58:38.660
chandraprabha Arun: Right.

2006
04:58:38.890 --> 04:58:39.680
Sunny Savita: Yes.

2007
04:58:41.350 --> 04:58:42.709
Swati Gupta: Okay, can I go next?

2008
04:58:42.710 --> 04:58:44.629
chandraprabha Arun: Yeah. Oh.

2009
04:58:46.710 --> 04:58:50.719
Sunny Savita: Just a second, Saurabh. Yeah, saurop, please go ahead, Swati. I'll come to you. Okay.

2010
04:58:50.720 --> 04:58:52.089
Swati Gupta: Okay. Okay. Sir.

2011
04:58:52.090 --> 04:59:06.970
Saurabh Verma: Yeah, so sunny. I was trying to restructure the all the things that I've got. So this code was, work is working in standalone mode when I ran this only this dedicated. But then today I

2012
04:59:07.140 --> 04:59:14.580
Saurabh Verma: while after the class I restructured and brought all the things at one place. So while I did that I am getting this error.

2013
04:59:16.150 --> 04:59:17.940
Saurabh Verma: Any advice you can give.

2014
04:59:19.160 --> 04:59:20.330
Sunny Savita: 4 0.

2015
04:59:21.967 --> 04:59:29.920
Saurabh Verma: Here, vector store local, it saying, type object files has no attribute load understood local. This is the error

2016
04:59:31.120 --> 04:59:32.270
Saurabh Verma: at this step.

2017
04:59:35.070 --> 04:59:39.270
Sunny Savita: Node local node values.

2018
04:59:40.067 --> 04:59:52.450
Sunny Savita: No, sir, see what I think you have done now. 5 is files is the same one don't keep the same name in the vector, store data, vector, database remove, keep the some different name there, rename your folder.

2019
04:59:53.360 --> 04:59:59.410
Sunny Savita: It is picking. It is picking that file. See this folder file. Yeah, keep a different name here.

2020
04:59:59.790 --> 05:00:01.920
Saurabh Verma: Okay. So I can rename this.

2021
05:00:01.920 --> 05:00:03.160
Sunny Savita: Rename it.

2022
05:00:07.210 --> 05:00:08.340
Saurabh Verma: Is this fine.

2023
05:00:08.600 --> 05:00:15.670
Sunny Savita: Huh! Whatever apart from the files and then now run it. Okay, that is import. Import the files and then run it. Okay.

2024
05:00:16.750 --> 05:00:20.040
Saurabh Verma: Import the files. In this all the requirements dot txt.

2025
05:00:20.040 --> 05:00:22.410
Sunny Savita: Import import means import. Karna file.

2026
05:00:22.410 --> 05:00:24.040
Sunny Savita: Okay, okay, it's called a channel.

2027
05:00:24.400 --> 05:00:26.289
Sunny Savita: Just run it. So it will be working. Okay.

2028
05:00:26.770 --> 05:00:30.940
Sunny Savita: If not, let me know. Yeah, Swati, what's your doubt? Please go ahead.

2029
05:00:33.980 --> 05:00:43.279
Sunny Savita: Swat, is there? Rachapa is there service re Uppersara has done. Satish tiwari.

2030
05:00:44.157 --> 05:00:49.049
Sunny Savita: Yeah. Guys anyone is there? Saty? Please go ahead with a doubt. I think you are on mute.

2031
05:00:49.870 --> 05:00:51.999
Rachappa: I'm here, Prajan.

2032
05:00:52.000 --> 05:00:52.430
Sunny Savita: Wait!

2033
05:00:52.430 --> 05:00:53.049
Rachappa: Can I go?

2034
05:00:53.050 --> 05:01:00.910
Sunny Savita: So coming to you, Swati, you are asking right? Any doubt? Some doubt. Swati Gupta.

2035
05:01:07.910 --> 05:01:13.070
Sunny Savita: Okay, she's not there. So next year please go ahead with it.

2036
05:01:13.070 --> 05:01:16.370
Rachappa: I'm I'm getting model.

2037
05:01:16.530 --> 05:01:25.800
Rachappa: not phoned error. So most of the errors I was getting during the class. I was trying that so most of things during this call only I fixed it.

2038
05:01:26.120 --> 05:01:26.680
Sunny Savita: Sure.

2039
05:01:26.910 --> 05:01:30.419
Rachappa: So now I have only a model not found. Error is coming

2040
05:01:31.032 --> 05:01:34.340
Rachappa: with the pine cone vector store.

2041
05:01:36.101 --> 05:01:40.410
Sunny Savita: What's it called subterrace week

2042
05:01:48.364 --> 05:01:49.689
Sunny Savita: tiwari.

2043
05:01:51.060 --> 05:01:53.040
Satish Tiwari: I want to share my screen.

2044
05:01:54.070 --> 05:01:55.920
Sunny Savita: Yeah, sure, can I do that?

2045
05:01:56.810 --> 05:01:57.720
Rachappa: Yeah, I'm sharing.

2046
05:01:57.720 --> 05:01:59.119
Swati Gupta: Can I go next.

2047
05:01:59.380 --> 05:02:00.820
Sunny Savita: Yeah. Please. Go. Next.

2048
05:02:04.330 --> 05:02:07.590
Sunny Savita: Wait. Waits are coming to you. Yeah. So I think, please tell me, what's the problem.

2049
05:02:07.720 --> 05:02:18.929
Swati Gupta: Sir. Actually, I was looking for an Llm. Ops course. So is, sir going to bring that, or like I mean it. It is not on Udemy still right.

2050
05:02:19.170 --> 05:02:20.800
Sunny Savita: No, it is not an email.

2051
05:02:21.580 --> 05:02:25.330
Swati Gupta: Okay, I mean, is, is there one going to come or like.

2052
05:02:25.330 --> 05:02:27.960
Sunny Savita: It will be launched as a live course, actually.

2053
05:02:27.960 --> 05:02:30.150
Swati Gupta: If it belongs in the life course. Not a Udem.

2054
05:02:30.340 --> 05:02:35.069
Sunny Savita: No, as of now. Not a later on we'll launch later as a utb.

2055
05:02:35.070 --> 05:02:38.749
Swati Gupta: Okay, okay? And and you just shared one

2056
05:02:40.170 --> 05:02:53.830
Swati Gupta: Youtube playlist. Right? When I was looking for a bedrock, related Chatbot thing. But there are like around 6 to 8 videos. Right? So is the last 2 videos just related to that Chatbot, or whole series is related to that.

2057
05:02:56.180 --> 05:02:59.362
Sunny Savita: No whole series, a little bit of background.

2058
05:02:59.760 --> 05:03:04.120
Swati Gupta: Like just just I'm looking just for a part related to Chatbot.

2059
05:03:05.074 --> 05:03:10.430
Sunny Savita: You can navigate to the video. I created a 1 endpoint application over there. Okay.

2060
05:03:12.140 --> 05:03:15.999
Sunny Savita: so using the backlog itself, if you watch all the video. It will help you back.

2061
05:03:16.300 --> 05:03:33.820
Swati Gupta: Okay. And, sir, I actually also took one Gen. AI course in Ineuron. Okay, but you know, I received one email like, couple of months back. I think that you know the platform is going to shut down and everything. But while the course was there, it was said that.

2062
05:03:33.820 --> 05:03:34.360
Sunny Savita: So.

2063
05:03:34.360 --> 05:03:45.029
Swati Gupta: Would be for a lifetime access or something right? And you and Papisa was teaching that. So could I also like still access that platform. I mean the course.

2064
05:03:45.030 --> 05:03:58.970
Sunny Savita: I don't have any idea of that platform. Okay, I left one year back. Okay? And I designed for that company. I don't know what is happening over there. I think you can access right? So you can ask to the respective person, okay.

2065
05:04:00.561 --> 05:04:03.070
Swati Gupta: But like whom I mean.

2066
05:04:04.450 --> 05:04:11.089
Sunny Savita: Ma'am, really don't have any idea. Okay. So as a company like I resigned from there. And what's going there, I don't know.

2067
05:04:11.830 --> 05:04:12.790
Swati Gupta: Okay.

2068
05:04:12.790 --> 05:04:13.520
Sunny Savita: Yeah.

2069
05:04:14.390 --> 05:04:17.269
Swati Gupta: Maybe I can ask to. Krish, sir. Maybe right.

2070
05:04:18.293 --> 05:04:20.700
Sunny Savita: I don't think, ma'am, it will help.

2071
05:04:21.480 --> 05:04:27.617
Swati Gupta: But I mean I don't know whom I can reach out right and

2072
05:04:28.090 --> 05:04:39.970
Sunny Savita: See, ma'am, see, I was working as an employee there for kids. So after resigning right who is all who's having a like a management, hand holding and all everything right. So.

2073
05:04:40.450 --> 05:04:42.319
Sunny Savita: Literally, ma'am, I don't have any idea.

2074
05:04:42.320 --> 05:04:43.210
Swati Gupta: Okay.

2075
05:04:43.210 --> 05:04:47.980
Sunny Savita: So if you can say to the respective person, if you can connect over there, I think that would be great.

2076
05:04:48.590 --> 05:05:01.800
Swati Gupta: Okay, sir, and just the last doubt, actually, I want to work on a project where you know I want to like, this is company specific where we want to, you know, track the people movement. Okay.

2077
05:05:02.420 --> 05:05:30.050
Swati Gupta: people movement. It is like, we have not still extracted the data from the unstructured part. And of course, I mean, the end goal is that we want to basically visualize it in a graph database. Right? There would be entities connected to, you know, different entities, and they have moved from one country or city to another. So I was wondering, how can I approach this problem?

2078
05:05:31.540 --> 05:05:33.190
Sunny Savita: What kind of data you have.

2079
05:05:35.120 --> 05:05:36.780
Swati Gupta: It is,

2080
05:05:40.560 --> 05:05:43.389
Swati Gupta: It's a human trafficking, related data.

2081
05:05:44.050 --> 05:05:46.670
Sunny Savita: Okay, in the form of videos, right?

2082
05:05:46.920 --> 05:05:52.649
Swati Gupta: No, it's a textual data like the unstructured data.

2083
05:05:54.560 --> 05:05:56.660
Sunny Savita: Unstructured textual data.

2084
05:05:56.960 --> 05:05:57.530
Swati Gupta: Hmm.

2085
05:05:57.530 --> 05:06:01.219
Sunny Savita: Means the information is available in the form of text, only correct.

2086
05:06:01.570 --> 05:06:05.430
Swati Gupta: There are multiple text columns.

2087
05:06:05.490 --> 05:06:06.030
Sunny Savita: Hmm.

2088
05:06:06.030 --> 05:06:06.609
Swati Gupta: We are trying.

2089
05:06:06.610 --> 05:06:12.909
Sunny Savita: So well. See what you want to fetch. What is your end goal over here? How the person is moving from one place to another place? Is it.

2090
05:06:12.910 --> 05:06:22.069
Swati Gupta: Hmm, hmm, right exploitation. Whether there is an exploitation or basically whether there is a movement from one place to another place.

2091
05:06:22.340 --> 05:06:26.510
Sunny Savita: So, ma'am, here. Now, what you will have to do. 1st of all, you will have to create some base instruction.

2092
05:06:26.680 --> 05:06:32.669
Sunny Savita: Okay, this is section basically that you can later on use in a like the prompt.

2093
05:06:33.130 --> 05:06:33.570
Swati Gupta: Hmm.

2094
05:06:33.570 --> 05:06:56.550
Sunny Savita: So I would suggest you, whatever you want to ask your Llm. Right? So see, just do one thing create your. So just, I design your solution in such a way. First, st basically create one identification agent, right? So which what it can do, it can identify the information from your given data. Right? Semantic identification agent.

2095
05:06:56.865 --> 05:07:15.169
Sunny Savita: Sorry. First, st you need to create a base instruction, some base instruction. Then you need to create a semantic identification agent. It can identify some sort of a semantic from your data itself. Okay, then, information retrieval there, your rag will work. So whatever information you fetch based on your base instruction and the like, the

2096
05:07:15.170 --> 05:07:31.819
Sunny Savita: based on the Lm prompt and all right, it will face the details from the vector database. Whatever information you want from the data, right? Then pass it to your content generation agent. So something like this, you can create one agentic flow. It could be the basically, multi agent flow also. Okay, if you want to

2097
05:07:31.820 --> 05:07:38.620
Sunny Savita: like, create agent flow, otherwise create a basic. And then on top of that you can scale. Okay? As an agentic one.

2098
05:07:38.720 --> 05:07:39.480
Sunny Savita: Okay.

2099
05:07:39.690 --> 05:07:42.479
Swati Gupta: How will agent help in this like.

2100
05:07:42.759 --> 05:08:00.620
Sunny Savita: Once we teach you the agent. Okay, we'll discuss about it means you will get the idea how the agent work. Then you can integrate inside your promise statement. Okay? But as of now, I will suggest you, you have a database. Right? So whatever rag approach I told you, just work work on that. Okay? Use the same rag approach over there. Okay.

2101
05:08:00.620 --> 05:08:04.410
Swati Gupta: You mean to extract the entities out of the data.

2102
05:08:05.000 --> 05:08:22.499
Sunny Savita: See? Keep the details of the vector database. Whatever question you are asking us to that. Okay? And then pass it to the back. This. Lnm, okay, whatever like information you want to be. Extract from the like, the specific like the whatever like, the information is there, right location and all correct.

2103
05:08:23.320 --> 05:08:29.579
Sunny Savita: After the Llm. It will like fetch that context from the vector. Database. And it will generate the answer based on that. Okay.

2104
05:08:30.960 --> 05:08:35.830
Swati Gupta: Okay, you mean, it will generate a structured data out of it, right? And then.

2105
05:08:36.242 --> 05:08:37.890
Sunny Savita: It can generate. Okay.

2106
05:08:38.150 --> 05:08:41.090
Swati Gupta: And then we'll be able to map it to graph database.

2107
05:08:41.675 --> 05:08:50.540
Sunny Savita: You can do that. Also, you can create one graph database parallelly along with the vector, database. And you can use the both output. Okay, while you are generating the output.

2108
05:08:51.210 --> 05:08:53.230
Swati Gupta: Okay, sir. Thank you.

2109
05:08:53.550 --> 05:08:54.020
Sunny Savita: Yeah.

2110
05:08:54.760 --> 05:08:56.010
Satish Tiwari: Yeah.

2111
05:08:56.010 --> 05:09:03.459
Sunny Savita: Yeah, wait. Wait, guys, Rajakpa satis. And so 3 guys are there. First, st Rachakpa, you go ahead. What's your job? Yeah.

2112
05:09:03.460 --> 05:09:09.789
Rachappa: So this is I'm sharing my screen model not found error. I'm getting most of our rest of the issues. I will resolve.

2113
05:09:09.790 --> 05:09:15.470
Sunny Savita: No, sir, see, no module. Name means what you will have to install that module right install that.

2114
05:09:16.270 --> 05:09:17.329
Rachappa: Actually requirement.

2115
05:09:17.330 --> 05:09:22.370
Sunny Savita: Install, install, sir, prep. Install, do it 1st here.

2116
05:09:23.770 --> 05:09:32.740
Sunny Savita: and this type of error try to solve from your end. Only the MoD will not found error. And all. Okay, see? Open open. So open the code, open the code where you're getting error.

2117
05:09:34.760 --> 05:09:37.539
Sunny Savita: Yeah, which which module is not available. Tell me.

2118
05:09:39.250 --> 05:09:40.199
Rachappa: Oh, long chamber.

2119
05:09:40.200 --> 05:09:42.639
Sunny Savita: Oh, use it. Write it here.

2120
05:09:42.890 --> 05:09:47.309
Sunny Savita: Yeah. Install it right. Click, right? Click.

2121
05:09:49.550 --> 05:09:52.229
Sunny Savita: Oh, give that space.

2122
05:09:53.640 --> 05:09:55.449
Rachappa: I did this also.

2123
05:09:55.680 --> 05:10:02.920
Rachappa: It's not resolving I got conflict. Actually, Egypt.

2124
05:10:14.030 --> 05:10:17.439
Sunny Savita: Yeah. Now restart your kernel and import it again.

2125
05:10:26.890 --> 05:10:27.600
Rachappa: Do you use?

2126
05:10:37.550 --> 05:10:41.439
Rachappa: Take further this resolved name error. I'm getting same.

2127
05:10:42.420 --> 05:10:46.760
Rachappa: I mean, when I saw one error, it's continued with the other error actually.

2128
05:10:46.760 --> 05:10:49.460
Sunny Savita: Run it. Run it, sir. Okay, it will. Autonom. Okay.

2129
05:10:50.420 --> 05:10:54.119
Sunny Savita: don't run. Also run step by step. What is the problem with it?

2130
05:10:54.250 --> 05:10:54.990
Rachappa: Okay.

2131
05:10:55.380 --> 05:10:56.040
Sunny Savita: Okay.

2132
05:11:33.130 --> 05:11:34.730
Sunny Savita: it's working right?

2133
05:11:35.340 --> 05:11:38.420
Rachappa: It's questions you stuck here.

2134
05:11:41.400 --> 05:11:44.749
Sunny Savita: You can check with that error part itself. No, whatever error! You were getting right.

2135
05:11:44.750 --> 05:11:47.489
Rachappa: Run as all. So that is where.

2136
05:11:47.490 --> 05:11:52.780
Sunny Savita: I think it was resolved right, the model not found. Okay. So now everything will work. The further cell. Also.

2137
05:11:56.030 --> 05:11:58.690
Rachappa: But I'm getting something like this, sunil. Let's say.

2138
05:11:58.690 --> 05:12:10.959
Sunny Savita: Why you are getting this error. 1st of all, tell me if you won't be able to import the pine cone vector store if you will get the error over here. Then how you will be able to execute this part.

2139
05:12:11.310 --> 05:12:11.880
Rachappa: Okay. Good.

2140
05:12:11.880 --> 05:12:13.400
Sunny Savita: It's pretty obvious, right?

2141
05:12:13.400 --> 05:12:14.010
Rachappa: Yeah, yeah.

2142
05:12:14.010 --> 05:12:16.329
Sunny Savita: You need to think on that level, sir. Okay, Sima.

2143
05:12:16.330 --> 05:12:18.580
Rachappa: Yeah. Yeah. Now, it's going. Now, it's yeah. Yeah.

2144
05:12:18.580 --> 05:12:19.210
Sunny Savita: That's fine!

2145
05:12:19.480 --> 05:12:31.739
Rachappa: And one question here, see? We have a requirement here, whatever you said during the training, right? We are adding here and executing sometime. I'm getting the conflict here with this.

2146
05:12:32.590 --> 05:12:37.559
Rachappa: and it's not working. I'm removing some of the things here, and you know, doing it. With this

2147
05:12:39.470 --> 05:12:43.270
Rachappa: earlier I got conflict. I removed everything. I uninstalled everything.

2148
05:12:43.560 --> 05:12:44.340
Sunny Savita: Oh!

2149
05:12:45.600 --> 05:12:46.559
Rachappa: Okay, okay.

2150
05:12:47.520 --> 05:12:49.930
Rachappa: I only stopped that. Comments will come here.

2151
05:12:54.190 --> 05:12:58.569
Rachappa: See? Long chain point. This uninstalled.

2152
05:12:59.200 --> 05:13:00.910
Sunny Savita: Why you are installing it, sir.

2153
05:13:01.410 --> 05:13:04.489
Rachappa: No, I was getting some conflict that I googled it, and

2154
05:13:04.770 --> 05:13:08.529
Sunny Savita: No, no, don't do it. Just run this account, dot txt. Okay.

2155
05:13:08.530 --> 05:13:11.369
Rachappa: Okay, okay, so now it works. Thank you.

2156
05:13:11.610 --> 05:13:12.389
Sunny Savita: Thank you, sir.

2157
05:13:13.450 --> 05:13:14.159
Satish Tiwari: Tell me. I'm curious.

2158
05:13:14.160 --> 05:13:20.219
Sunny Savita: Wait. Wait. Sorry, please share the screen, Rachit. Sorry, Satish. You share first.st That's all. Okay.

2159
05:13:21.490 --> 05:13:22.499
Satish Tiwari: Is my screen visible?

2160
05:13:22.890 --> 05:13:23.979
Sunny Savita: Yeah, it is vulnerable.

2161
05:13:24.520 --> 05:13:27.460
Satish Tiwari: See, I am getting here now. Why, it's getting index.

2162
05:13:29.030 --> 05:13:29.770
Sunny Savita: Hmm.

2163
05:13:39.010 --> 05:13:39.830
Sunny Savita: hmm.

2164
05:13:43.470 --> 05:13:44.960
Satish Tiwari: Even. I'm not able to see here.

2165
05:13:47.110 --> 05:13:52.030
Satish Tiwari: sir, if it is not there, then only we'll get false now. If it is there, then why, you will get false.

2166
05:13:59.560 --> 05:14:06.849
Sunny Savita: No, it will be false. Only okay. Until unless you are not going to be create that index run the further code, you will not get false. Okay.

2167
05:14:09.960 --> 05:14:11.320
Satish Tiwari: Then it should be created by here.

2168
05:14:12.070 --> 05:14:15.989
Sunny Savita: Nay, sir, it is just checking whether it is having the index or not.

2169
05:14:17.600 --> 05:14:21.609
Sunny Savita: Okay. Once you will create a entice, it will come through. Got it.

2170
05:14:23.020 --> 05:14:24.499
Satish Tiwari: So should I create here.

2171
05:14:25.070 --> 05:14:27.739
Sunny Savita: Obviously, sir, see, the further code is here. Now.

2172
05:14:30.380 --> 05:14:32.719
Satish Tiwari: So this is the creating index.

2173
05:14:32.720 --> 05:14:40.140
Sunny Savita: It is not creating, or it is checking. Read the simple English PC. Dot has index, has index means. What is it having index or not?

2174
05:14:40.140 --> 05:14:41.119
Satish Tiwari: Timing or not correct.

2175
05:14:41.120 --> 05:14:42.609
Sunny Savita: Plus, that's it.

2176
05:14:43.480 --> 05:14:44.950
Satish Tiwari: Where is the clear index.

2177
05:14:44.950 --> 05:14:46.640
Sunny Savita: This one next cell.

2178
05:14:46.640 --> 05:14:47.360
Satish Tiwari: This one.

2179
05:14:47.360 --> 05:14:55.949
Sunny Savita: If not, if not as index this one. Yeah, complete code. Put the take the complete code. Can you read the simple English PC, dot create index.

2180
05:14:56.710 --> 05:14:58.819
Sunny Savita: Yeah, so it is creating index.

2181
05:15:18.630 --> 05:15:20.050
Satish Tiwari: Now you have returned.

2182
05:15:23.470 --> 05:15:24.869
Satish Tiwari: and how I will check

2183
05:15:30.070 --> 05:15:32.019
Satish Tiwari: here. I will get right. Tell me.

2184
05:15:32.210 --> 05:15:35.909
Sunny Savita: Check in index. Refresh the page automatically. We'll get one index. Okay, there.

2185
05:15:40.340 --> 05:15:41.769
Sunny Savita: Okay, thank you.

2186
05:15:42.620 --> 05:15:44.340
Sunny Savita: Saurop. Please share the screen.

2187
05:15:47.080 --> 05:15:52.540
Saurabh Verma: Yes, I'm sharing. I changed, but still I'm getting an error.

2188
05:15:54.500 --> 05:16:01.119
Saurabh Verma: So I change this to my face, and I so loaded everything ran everything again.

2189
05:16:02.280 --> 05:16:04.510
Saurabh Verma: So I'm getting the error.

2190
05:16:05.180 --> 05:16:05.980
Saurabh Verma: Yes.

2191
05:16:09.830 --> 05:16:14.880
Sunny Savita: What is the error, or give me the access? Give me the give me the acceleration scheme.

2192
05:16:15.210 --> 05:16:16.439
Saurabh Verma: Yeah, how to give

2193
05:16:24.430 --> 05:16:25.420
Saurabh Verma: everyone.

2194
05:16:25.790 --> 05:16:26.510
Sunny Savita: One.

2195
05:17:25.390 --> 05:17:27.260
Saurabh Verma: This code has not executed.

2196
05:17:28.060 --> 05:17:30.519
Sunny Savita: It is executing. No, okay.

2197
05:17:45.550 --> 05:17:53.840
Sunny Savita: And so the system. Now, what do we start to find this employees?

2198
05:17:55.180 --> 05:17:56.480
Sunny Savita: Hold your phones.

2199
05:18:01.310 --> 05:18:03.000
Sunny Savita: It's my file now, right.

2200
05:18:03.240 --> 05:18:04.110
Saurabh Verma: Yes, sir.

2201
05:18:07.250 --> 05:18:08.839
Sunny Savita: Don't go somewhere. Boom!

2202
05:18:10.140 --> 05:18:10.830
Sunny Savita: Yes.

2203
05:18:11.130 --> 05:18:13.510
Saurabh Verma: Added, I added only 3 import statements.

2204
05:18:17.330 --> 05:18:21.039
Saurabh Verma: This I commented, because it was only for explanation.

2205
05:18:22.420 --> 05:18:29.510
Sunny Savita: This class size index. I think you have a issue with this one on.

2206
05:18:32.340 --> 05:18:38.460
Saurabh Verma: This is running fine if I run it in a separate folder, as is which we had sent. But the moment I moved.

2207
05:18:38.460 --> 05:18:44.950
Sunny Savita: No, you you given this spaces? No, actually, in windows. No, this is spaces is very big. Problem. Okay?

2208
05:18:44.950 --> 05:18:45.760
Saurabh Verma: Okay.

2209
05:18:45.760 --> 05:18:51.090
Sunny Savita: Yeah, so sometimes, now it create issues. Actually, so space.

2210
05:18:52.210 --> 05:18:54.480
Saurabh Verma: Okay, this might be the issue. Okay.

2211
05:18:55.620 --> 05:19:00.019
Saurabh Verma: but this I just copied from there, anyway. But I get your point.

2212
05:19:00.020 --> 05:19:02.749
Sunny Savita: Oh, we don't need to know

2213
05:19:04.090 --> 05:19:07.000
Sunny Savita: what is the issue associated with?

2214
05:19:09.370 --> 05:19:10.080
Sunny Savita: Oh.

2215
05:19:14.560 --> 05:19:15.410
Sunny Savita: 5.

2216
05:19:17.400 --> 05:19:19.210
Sunny Savita: Okay, it's working now.

2217
05:19:25.660 --> 05:19:26.610
Sunny Savita: Gordon.

2218
05:19:26.830 --> 05:19:31.960
Saurabh Verma: So what was the thing are? What is it? RR. We have to kept for the this thing.

2219
05:19:31.960 --> 05:19:39.699
Sunny Savita: R is nothing. Actually, sometime we get the Unicode error. It is not able to decode this path. Okay? So I just written, the rr, means, read the path. That's it. Okay.

2220
05:19:39.700 --> 05:19:40.120
Saurabh Verma: Okay.

2221
05:19:40.120 --> 05:19:53.069
Sunny Savita: It says standard syntax just to match the unicord thing in the windows itself. Got it so don't keep the spaces in between. If you just remove the spaces and then load it again with the relative path. It will work. Got it.

2222
05:19:53.410 --> 05:19:57.020
Saurabh Verma: Okay, and all the other are running right. If you just scroll down.

2223
05:19:57.160 --> 05:20:01.030
Sunny Savita: Correct. All the like. Other will be running once you will run it.

2224
05:20:04.780 --> 05:20:08.559
Sunny Savita: Check it, sir. Okay, yeah. Okay.

2225
05:20:08.760 --> 05:20:09.320
Saurabh Verma: Thank you.

2226
05:20:10.450 --> 05:20:14.130
Sunny Savita: Okay, guys, can we close the session? Now? Anyone having any doubt?

2227
05:20:17.960 --> 05:20:18.970
Sunny Savita: I'm

2228
05:20:19.140 --> 05:20:24.510
Sunny Savita: taking a pause for 1 min. If you have any doubt you can let me know that I'll close the session. Okay.

2229
05:20:32.350 --> 05:20:38.110
Sunny Savita: thank you. Okay. Akash, is there. Akash is having doubt. Akash, guys. Akash, please go ahead with the doubt. Akash.

2230
05:20:38.614 --> 05:20:39.839
Aakash: Can you hear me, sir.

2231
05:20:40.330 --> 05:20:41.699
Sunny Savita: Yeah, tell me.

2232
05:20:42.252 --> 05:20:49.227
Aakash: So I have a neuro related data. I was just checking. If any specific Llm, I can use, or

2233
05:20:50.430 --> 05:20:52.879
Aakash: the same Lnm package can be used for those.

2234
05:20:52.880 --> 05:20:55.590
Sunny Savita: Same. Same, sir. Use the open a 1. It will work. Okay.

2235
05:20:55.590 --> 05:21:03.310
Aakash: Okay. So okay, I I heard like, palm model was there, and certain other model. So, but there is no.

2236
05:21:03.606 --> 05:21:10.119
Sunny Savita: We'll have to check that even. I haven't worked with that kind of data. Maybe I'll check. I can get that.

2237
05:21:10.120 --> 05:21:12.339
Aakash: Just as a reminder. I'll drop you a mail.

2238
05:21:12.340 --> 05:21:13.730
Sunny Savita: Yeah, yeah, sure. Sure.

2239
05:21:13.730 --> 05:21:14.570
Aakash: Thank you.

2240
05:21:14.570 --> 05:21:15.320
Sunny Savita: Thinkers.

2241
05:21:15.960 --> 05:21:21.180
Sunny Savita: Okay, Akash is done. Now, persona. I already saw the doubt

2242
05:21:22.860 --> 05:21:27.350
Sunny Savita: to brush. We install the town sort of is done.

2243
05:21:29.530 --> 05:21:32.030
Sunny Savita: Deepak. What's it out? Deepak.

2244
05:21:35.802 --> 05:21:42.329
deepak mohanty: Yes, Sunny. Can I have? nlp tutorial of yours specifically.

2245
05:21:43.820 --> 05:21:51.790
Sunny Savita: Nlp tutorial. I took the live classes in one of the batch. Okay, just check with the team. If

2246
05:21:52.700 --> 05:22:00.289
Sunny Savita: you can check out. Okay. So if they can like, do something right with respect to that course and all, if you want to take it back.

2247
05:22:01.020 --> 05:22:04.440
deepak mohanty: Okay, so I need to talk to the date.

2248
05:22:04.440 --> 05:22:05.680
Sunny Savita: Correct, correct, so.

2249
05:22:05.680 --> 05:22:06.300
deepak mohanty: Okay.

2250
05:22:06.300 --> 05:22:14.440
Sunny Savita: There is one pro subscription also, if you can check with them that so you there, you can access all the Nlp and the air related courses. Okay.

2251
05:22:14.440 --> 05:22:18.949
deepak mohanty: No, I don't want to go for everything, only your particularly Nlp. Class.

2252
05:22:19.280 --> 05:22:23.399
Sunny Savita: I see. I launched one generative. A course. Okay

2253
05:22:24.110 --> 05:22:30.930
Sunny Savita: this one. Nlp, with generative AI. There, I this taught some of the section of the Nlp. Actually.

2254
05:22:31.390 --> 05:22:36.500
deepak mohanty: Okay, so it is like, your, it is in your Youtube channel.

2255
05:22:36.500 --> 05:22:39.289
Sunny Savita: No, no, no! Over the same platform, crystal platform itself.

2256
05:22:39.290 --> 05:22:42.670
deepak mohanty: Okay, okay, so it is generative. AI with the Nlp, right?

2257
05:22:42.670 --> 05:22:43.809
Sunny Savita: Got it correct, sir.

2258
05:22:44.010 --> 05:22:45.289
deepak mohanty: Okay, sure. Thank you.

2259
05:22:45.450 --> 05:22:46.440
Sunny Savita: Thank you.

2260
05:22:47.530 --> 05:22:49.899
Sunny Savita: Okay, yeah, Saurabh. Tell me your small query.

2261
05:22:49.900 --> 05:22:56.099
Saurabh Verma: Yeah. I'm still getting the error at the end. It is saying, context is not defined.

2262
05:22:57.550 --> 05:22:58.769
Saurabh Verma: I'm at the.

2263
05:22:58.770 --> 05:23:02.519
Sunny Savita: Which context, which context show me, show me, share my screen.

2264
05:23:02.520 --> 05:23:03.699
Saurabh Verma: Yeah, yeah, that's good.

2265
05:23:05.720 --> 05:23:11.219
Sunny Savita: The book is done. Now, Vignesh, do you have any doubt.

2266
05:23:14.420 --> 05:23:16.289
Sunny Savita: Kunal Vignesh, guys.

2267
05:23:16.630 --> 05:23:17.310
Vigneshwaran S: Hi! Sir!

2268
05:23:17.660 --> 05:23:18.440
Sunny Savita: Yeah.

2269
05:23:20.290 --> 05:23:25.490
Vigneshwaran S: So I have doubt regarding that images under text, table, and all.

2270
05:23:26.889 --> 05:23:33.469
Vigneshwaran S: If you have a document with a table and image and text all all in one, how can we embed that model.

2271
05:23:33.470 --> 05:23:38.749
Sunny Savita: No, no, that I given you as assignment. Okay, please check out that. I'll share the solution. The next class. Okay.

2272
05:23:38.750 --> 05:23:42.779
Vigneshwaran S: I mean, we should use a separate model for each.

2273
05:23:42.780 --> 05:23:53.089
Sunny Savita: Yeah, I'm not going to tell you the approach and anything. Please check out with you. Please check out from your end. We'll keep one generic session for this one, where everyone will give their demonstration. Okay.

2274
05:23:53.460 --> 05:23:55.500
Sunny Savita: failed approaches and all understood.

2275
05:23:55.510 --> 05:23:57.909
Vigneshwaran S: Okay. Okay, so thank you. I'll talk.

2276
05:23:57.910 --> 05:23:58.880
Sunny Savita: Thank you, sir.

2277
05:23:59.678 --> 05:24:06.250
Sunny Savita: See, sir, this is not a code. This is just for the explanation. Okay, it's not a code comment. This one.

2278
05:24:07.990 --> 05:24:10.120
Sunny Savita: Sora, what are what are you doing now?

2279
05:24:12.680 --> 05:24:14.710
Sunny Savita: Check with the previous session at least.

2280
05:24:14.930 --> 05:24:16.029
Saurabh Verma: Yeah, it's raining.

2281
05:24:16.310 --> 05:24:17.610
Sunny Savita: No, I didn't.

2282
05:24:17.610 --> 05:24:20.589
Saurabh Verma: Okay, so, one, last.

2283
05:24:22.040 --> 05:24:22.710
Sunny Savita: Okay?

2284
05:24:23.980 --> 05:24:27.624
Sunny Savita: More question. He was having. Sort of

2285
05:24:31.100 --> 05:24:33.370
praharsha: Sunny. In the meantime. Can I ask.

2286
05:24:33.370 --> 05:24:34.940
Sunny Savita: No, you can go ahead with the question.

2287
05:24:35.070 --> 05:24:36.299
Sunny Savita: Yeah, sort of please.

2288
05:24:36.300 --> 05:24:45.578
Saurabh Verma: Yeah, sorry, brother, just one last question. So Sunny as you mentioned the AI voice assistant. Is there in your

2289
05:24:46.160 --> 05:24:47.240
Saurabh Verma: Youtube? Right?

2290
05:24:47.240 --> 05:24:48.169
Sunny Savita: So like this.

2291
05:24:48.170 --> 05:24:56.024
Saurabh Verma: Is any other use cases are there which you can just at the top of your mind if it is there, though I can search on there, but still

2292
05:24:57.740 --> 05:24:59.880
Sunny Savita: You want the use cases only, is it.

2293
05:24:59.880 --> 05:25:07.289
Saurabh Verma: Yeah, yeah, yeah, I because I'm into pre-sales. Now, it will help me in marketing and telling that I know few things of this kind of thing.

2294
05:25:07.290 --> 05:25:11.629
Sunny Savita: Just drop your mail. I'll share one ppt with you. Okay, I have a couple of use cases.

2295
05:25:11.810 --> 05:25:13.870
Sunny Savita: I'll share with you. Okay, yeah.

2296
05:25:14.070 --> 05:25:19.229
Saurabh Verma: Okay, fine. And their Youtube is also there on your Youtube channel for that.

2297
05:25:19.510 --> 05:25:29.330
Sunny Savita: Use cases wise. I think I haven't created any detailed video on it. But I'll share one. Ppt. There. I kept couple of 2025 use cases.

2298
05:25:29.770 --> 05:25:34.509
Saurabh Verma: Okay. And those are, you have the running ones for that, or I can. I will have to create a.

2299
05:25:34.510 --> 05:25:38.530
Sunny Savita: No, I haven't created any project. There's just a use case name actually.

2300
05:25:38.530 --> 05:25:44.250
Saurabh Verma: Okay? And similar to AI voice assistant. Any examples you have on your Youtube.

2301
05:25:45.200 --> 05:25:50.030
Sunny Savita: Check, sir, I created couple of project, multi agent, tech and all. Recently, multi agent like, Okay, you know.

2302
05:25:50.480 --> 05:25:52.690
Saurabh Verma: Okay. Thank you.

2303
05:25:52.910 --> 05:25:53.970
Sunny Savita: The Inkarian.

2304
05:25:54.900 --> 05:25:57.620
Sunny Savita: Oh, yeah.

2305
05:25:57.620 --> 05:26:05.130
praharsha: Yeah, sunny. Regarding my use case. Can I get any further input through Youtube videos or any other things?

2306
05:26:05.680 --> 05:26:07.530
Sunny Savita: Oh, for the

2307
05:26:07.530 --> 05:26:24.030
Sunny Savita: we'll do it, sir. You can share the detailed document with me. Okay, I'll you. You can share. Do you do one thing, just share one Github. There. You mentioned the detailed document. Okay, regarding a problem statement and one Poc, I'll scale that. And I'll create a video, the end to end as an end to end. Project. Okay.

2308
05:26:24.430 --> 05:26:26.040
praharsha: Yeah. Sure. Thank you.

2309
05:26:26.040 --> 05:26:27.450
Sunny Savita: Yeah, thank you, sir.

2310
05:26:29.030 --> 05:26:29.850
Sunny Savita: Okay.

2311
05:26:30.280 --> 05:26:33.290
Sunny Savita: Kunal, is there, Kunal, do you have any doubt.

2312
05:26:33.290 --> 05:26:34.180
Kunal: Yes, sir.

2313
05:26:34.350 --> 05:26:34.680
Sunny Savita: Yes.

2314
05:26:35.033 --> 05:26:50.590
Kunal: Actually, I have tried few interview attempts. So every time yeah, while I was searching for data, science roles, machine learning kind of projects. So every time I used to get question about deployment, which I, where I used to fail.

2315
05:26:51.318 --> 05:26:55.099
Sunny Savita: Will we cover the deployment topics? Also in this course.

2316
05:26:55.640 --> 05:27:01.740
Sunny Savita: yeah, deployment will show you while you're creating a project. Okay? So that part will come the cloud and all everything. So, okay.

2317
05:27:01.740 --> 05:27:06.409
Kunal: Or, okay? Okay? Because, okay, it will be covered right?

2318
05:27:06.717 --> 05:27:08.869
Sunny Savita: Yeah, we have integrated that chapter also.

2319
05:27:09.060 --> 05:27:13.359
Kunal: And, Sir, how this Llm. Ops course is different from our.

2320
05:27:13.698 --> 05:27:17.420
Sunny Savita: Of course, is just the projects, only only the encode projects.

2321
05:27:18.070 --> 05:27:28.349
Sunny Savita: Okay, let's say you don't want to learn this basics theory. And all right. You just want to be directly jump to the project itself. Do the project do the end to end project. That's it.

2322
05:27:29.060 --> 05:27:40.880
Kunal: Okay, okay, sir. And, sir, like Chris told to do some like to also focus on branding with him, branding yourself in the Linkedin.

2323
05:27:41.060 --> 05:27:41.440
Sunny Savita: Hmm.

2324
05:27:41.440 --> 05:27:45.169
Kunal: So what kind of like articles we should ideally post.

2325
05:27:46.080 --> 05:27:46.570
Sunny Savita: So

2326
05:27:46.570 --> 05:27:54.720
Sunny Savita: let's see whatever niche you have. Right? So let's say you are a developer. You are a like whatever in whatever field you are a good, you are good, right?

2327
05:27:55.110 --> 05:28:09.350
Sunny Savita: Whatever feel you want to promote yourself. So you should always create a content the like the helping basically articles right on your Linkedin, or anywhere right on your any public profile.

2328
05:28:09.350 --> 05:28:26.820
Sunny Savita: So Linkedin, basically just a way of connecting to so many people to showcase your ability to showcase your basically knowledge. Okay, so make a habit to like post something whatever you are learning, whatever you are. Whatever experience you have. Okay, that's it. So

2329
05:28:26.820 --> 05:28:33.149
Sunny Savita: it's all like, it's similar to the the Instagram and other platform like. So there, what we are doing.

2330
05:28:33.400 --> 05:28:38.699
Kunal: Would it be too fast to suppose I learn something new, and I just post it on Linkedin.

2331
05:28:38.700 --> 05:28:39.950
Sunny Savita: No. See.

2332
05:28:40.650 --> 05:28:56.850
Sunny Savita: you are learning. You are posting. Okay, that's a best way of doing it, because not today. You have learned. Then then, when you will post that after 4, 5 months, or like when so best way, if you're learning something posted that see, I used to the same thing.

2333
05:28:56.850 --> 05:29:17.090
Sunny Savita: I created so many videos on my Youtube, you know what was my strategy. I was learning the thing, okay for my interview and for all the for teaching and all. When when I was learning the thing at that time itself for making a concept concrete, I create a video. And because of that, the context was getting a strong concept was also getting strong, and the community are also getting the benefit from that.

2334
05:29:17.090 --> 05:29:17.540
Kunal: Okay.

2335
05:29:17.540 --> 05:29:21.449
Sunny Savita: Okay? So you have to take a same approach while you are learning something. Post that.

2336
05:29:21.800 --> 05:29:22.720
Sunny Savita: Yeah.

2337
05:29:22.940 --> 05:29:40.689
Kunal: Yeah, sir, suppose for the long, for the long term future perspective, like as I see in my company like should I? On like create like lifetime technologies, or like how one should

2338
05:29:41.645 --> 05:29:50.790
Kunal: like how one like, how should I see to switch to other managerial role? I mean.

2339
05:29:51.860 --> 05:29:57.030
Sunny Savita: So that comes from the experience. Actually. So once, how much experience you have currently.

2340
05:29:58.020 --> 05:29:59.529
Kunal: So 8, 8 plus.

2341
05:29:59.530 --> 05:30:04.870
Sunny Savita: Huh? So with 8 plus of experience, you can go ahead with a manager role. And all right. So

2342
05:30:05.090 --> 05:30:31.489
Sunny Savita: whenever you have a position in your company, or whenever you got a promotion right, you could be promoted to the manager if you have that capability. If you have shown that those skill. Okay? So in every company there is one hierarchy. So the hierarchy start from very basic right. The principal sorry. The the associate, then principal, then, senior principal. Okay, you can think in such a way that associate, senior associate manager, senior manager, director, senior director, something like that. Right?

2343
05:30:31.490 --> 05:30:44.599
Sunny Savita: So whenever the promotion cycle comes. Okay, you can ask to your manager or to your director, or else you can switch your company with a different role. If there is a different role in some other company. Because you can like claim for that role. You can give the interview.

2344
05:30:44.600 --> 05:30:56.589
Sunny Savita: Okay? And you can be promoted to the next store. Right? So it comes in the companies. The opportunity come, the promotion cycle comes right. The jobs. Come now, you have to grab that. That's it.

2345
05:30:56.780 --> 05:30:57.400
Sunny Savita: Understood.

2346
05:30:57.400 --> 05:31:05.669
Kunal: So suppose previously it came data science. Now it came January. So always the technology is continuously evolve, evolving and very fast.

2347
05:31:06.660 --> 05:31:07.420
Kunal: Always the same.

2348
05:31:07.420 --> 05:31:22.959
Sunny Savita: This? AI. Now, it is nothing, just the extension of that data, science itself. Okay? So when we used to learn the data science, there, actually, we create, we analysis, the data and all everything. And we create the model using the machine learning and the deep learning algorithm agree or not. Right.

2349
05:31:22.960 --> 05:31:23.380
Kunal: Yes.

2350
05:31:23.380 --> 05:31:48.279
Sunny Savita: Now what we are doing. We are doing some advanced thing over here. Someone has created a model. Now, on top of that, we are doing our engineering, using the rag and agents and all that's it. Okay? So this AI is nothing. It is just an extension of the data science. If you haven't worked on the data science earlier. No worries about that. You can say that. Okay, I did it. I did couple of project one or 2 project. I was involved that now it's full flag working on the AI like a system itself. Okay?

2351
05:31:48.490 --> 05:32:06.000
Sunny Savita: Because I, we just we got that kind of requirement now, and everyone is moving to the AI. Everyone of like, I want to be create a AI proven solution. And all, okay, so I'm more focused into the AI. Now, so earlier, I was just did couple of project on Ml, and all. And I had a basic idea of it. That's it.

2352
05:32:06.440 --> 05:32:07.260
Sunny Savita: Okay.

2353
05:32:09.180 --> 05:32:11.204
Kunal: Yeah, I mean, sir.

2354
05:32:12.460 --> 05:32:18.489
Kunal: I have some doubt of, I think, as you said, I think while experience it will be clear.

2355
05:32:20.110 --> 05:32:20.880
Kunal: Yeah.

2356
05:32:21.850 --> 05:32:36.590
Kunal: And, sir, in my company, I haven't. I haven't in some interaction with those working on January projects. So they tell that these projects are very short term projects, and client offers for only short, very short term period.

2357
05:32:36.590 --> 05:32:36.910
Sunny Savita: That's.

2358
05:32:36.910 --> 05:32:40.750
Kunal: So some development is done. They like we have to look for other projects.

2359
05:32:40.750 --> 05:32:51.470
Sunny Savita: Every every company. The situation is like this, only, okay. So you have some contract period, 6 month, 8 month. Work for that. Then you will get an export if you're not getting the switch to company. That's it. Okay.

2360
05:32:55.020 --> 05:32:56.590
Kunal: Yeah, yeah.

2361
05:32:57.420 --> 05:32:58.086
Sunny Savita: Got it.

2362
05:32:58.420 --> 05:32:58.980
Kunal: Yeah.

2363
05:32:59.540 --> 05:33:00.033
Sunny Savita: Hold on!

2364
05:33:00.470 --> 05:33:00.869
Sanjay: Hello, sir!

2365
05:33:00.870 --> 05:33:02.660
Kunal: Okay, sir, thank you. Thank you so much.

2366
05:33:03.470 --> 05:33:04.670
Sunny Savita: Yeah. Sanjay.

2367
05:33:05.470 --> 05:33:14.460
Sanjay: Yeah. So last time I was asking regarding that we are building one solutions wherein we are focusing on the multi orchestrations.

2368
05:33:14.460 --> 05:33:14.860
Sunny Savita: So.

2369
05:33:14.860 --> 05:33:33.270
Sanjay: Where the idea is to know communicate actually, one task one business unit, you know, to other business unit. And they're having their own actually interdependencies. So what you have done is like putting actually bunch of documents or one business unit

2370
05:33:33.820 --> 05:34:03.799
Sanjay: that was on the basically with the with the sharepoint actually, kind of things. So so now the thing is that we are using the pre just a prototype. We are using a 3 way framework and try to bind this. No different, actually, task. We are defining the task of one business unit. And what will be the other business unit and 3rd business unit. So so 1 1 will be the main, as you, as you said, actually like as we know the 3 way one will be the router. Another

2371
05:34:03.800 --> 05:34:07.279
Sanjay: business unit will be like, like, you know.

2372
05:34:08.360 --> 05:34:22.859
Sanjay: that means we can connect actually one one orchestrator. That means which is the main actually manager to the other 2 business units, and they are to delegate the task. So in such scenario, when we are trying to. No

2373
05:34:23.340 --> 05:34:31.430
Sanjay: run the framework. What is happening? The tasking is not happening. Okay, it is. It is going to the think mode.

2374
05:34:31.650 --> 05:34:32.240
Sanjay: So

2375
05:34:32.790 --> 05:34:51.439
Sanjay: I don't know. Why it is happening so how can we debug actually, those issues like, it is getting stuck when you are calling the 3 way functions in passing on those 3. You know. 3, 3 actually agents that we have built on.

2376
05:34:51.770 --> 05:34:52.290
Sunny Savita: Hmm.

2377
05:34:52.290 --> 05:35:07.669
Sanjay: What could be the what could be the? Because if we see the open AI normally, if you see the open AI that is working. But when we are going with the azure open? AI, I'm not. I'm checked. Actually, the key. Also, key is properly working.

2378
05:35:08.160 --> 05:35:08.910
Sunny Savita: Oh!

2379
05:35:08.910 --> 05:35:12.260
Sanjay: The Azure Openai, whatever the format and all.

2380
05:35:12.260 --> 05:35:29.870
Sunny Savita: Let's see, whenever you want to debug this kind of solution. Now in the whenever you are running with a true AI, right? So there itself. You'll find out the debug kind of option just through market. True debug to something like that. Okay, so you will be able to find out what is being passed from one agent to another agent or manually. Also, you can log this thing.

2381
05:35:29.870 --> 05:35:43.800
Sunny Savita: So whenever the agentic process happened, there are multiple iteration in between. Okay, if you want to like like the log, all this iteration we can do in a multiple way. We can like, configure the log manual log, or else we can enable the debugging process and all with that.

2382
05:35:43.800 --> 05:35:48.709
Sanjay: Yeah, that is actually normally one agencies there, we used to do the verbals.

2383
05:35:48.840 --> 05:36:11.349
Sanjay: which is basically to log, actually to showcase that where it is getting stuck. But my! When I run the 1st actually agents, which is Miss Men, the master agents. So it is getting stuck at the thinking it is generating. Actually, the crew is running. The crew function and starters is executing the task. Okay, and is going to the thinking mode. That's where it is getting stopped.

2384
05:36:11.540 --> 05:36:14.629
Sanjay: and after that it is getting Llm. Field.

2385
05:36:15.030 --> 05:36:15.800
Sanjay: So.

2386
05:36:15.800 --> 05:36:22.060
Sunny Savita: Maybe it is overloading with a given task, overwhelming with a given like prompt and all, everything

2387
05:36:22.470 --> 05:36:39.100
Sunny Savita: might be the that certain chances. So until, unless we are not looking into that issue, it would be like difficult or debug this kind of thing because it's a more application. Oriented. Okay, just imagine yourself at my position. If you'll ask you the same thing, then what you will say, tell me.

2388
05:36:39.340 --> 05:36:40.290
Sanjay: Hmm, hmm.

2389
05:36:40.290 --> 05:37:01.070
Sunny Savita: Right? So it is a more application, driven thing. Why, if it is not, if it is going in a thinking mode, I can understand, there are multiple recursion which is happening. Okay, Llm is not able to figure out the correct way to resolving the those query and all. And okay. And it is not able to generate a correct output based on that multiple recursion is happening. And then it is going to be generate error. Okay, so

2390
05:37:01.400 --> 05:37:04.720
Sunny Savita: one thing I can suggest you which model you are using.

2391
05:37:05.650 --> 05:37:07.480
Sanjay: It is azure opening. 4. Oh.

2392
05:37:07.820 --> 05:37:14.560
Sunny Savita: Poro. 4 0 is a good model. Okay. Poro will work. Will work. Well. Okay, with it is having a good reasoning capacity.

2393
05:37:15.460 --> 05:37:16.050
Sunny Savita: Don't.

2394
05:37:16.370 --> 05:37:22.519
Sunny Savita: But we'll have to like check, or if you can show me some internal detail of it, then maybe I can give you some suggestion. Okay.

2395
05:37:22.710 --> 05:37:27.400
Sanjay: So probably. How can I connect with you and know showcase.

2396
05:37:27.400 --> 05:37:32.549
Sunny Savita: Here itself. You can show me the application in the next class. Okay? So we can discuss onto it.

2397
05:37:33.790 --> 05:37:41.679
Sanjay: Okay? Yeah. So is it like one to one? Or is it like, you have those case here.

2398
05:37:43.210 --> 05:37:45.429
Sunny Savita: Doubt, session, itself, doubt, session itself.

2399
05:37:45.430 --> 05:37:54.940
Sanjay: Out sessions. Oh, I I have actually now itself, but I don't have it is in the other laptop, actually, not in my personal, because so it is.

2400
05:37:55.435 --> 05:38:00.799
Sanjay: That those project actual office project. No, I I didn't actually work on the personal.

2401
05:38:00.800 --> 05:38:23.040
Sunny Savita: So just do one thing, just keep some working component in your personal laptop. Okay, working remote means the the main heart of the entire application the 2 way authentic and all just mop that somewhere. Okay, in your personal laptop. So that will be as a separate project with you. Okay, later on. You can like, whenever you are going to be mentioning, resume and going to be explained to someone you can that can take a help of it.

2402
05:38:23.040 --> 05:38:32.309
Sunny Savita: And you can show me that as well. Okay, so for the entire, you can, you can work on that working component of the mock up part, and later on you can show you want them.

2403
05:38:32.310 --> 05:38:51.500
Sanjay: Yeah. One case, actually, I was thinking, like, you know, how can we? Know? That was actually kind of a business function? Suppose we are defining how it is defining, we are defining the task. And we're in normally in the crew, what we are doing, we are creating actually, the role, actually, what is the role and other things

2404
05:38:51.808 --> 05:39:05.390
Sanjay: the role goal and the other things. So now, if we are so basically, we are focusing on 2 things. One is the orchestration part meaning 1. 1 agent has to communicate with the other, and second is the rack part. Actually.

2405
05:39:05.390 --> 05:39:27.960
Sanjay: So when you mix the complete rack part will tell about each. Orchestration is happening between one business function to other business functions, and that is talking between each other, and the rack part will tell about the each business functions has its own volume of databases, but that means volume of task or documents.

2406
05:39:28.100 --> 05:39:53.879
Sanjay: So when it is trying to search. Actually, when the user is querying, it is going to that. Actually, first, st you know, business functions and trying to search the relevant. Actually no query and trying to correlate to the next business function which has a different stack of documents. Okay, it will try to extrapolate from that, and they will talk within each other, and it will give the response. So that is what? So? So I what the idea was

2407
05:39:53.880 --> 05:40:02.330
Sanjay: to 1st orchestrate being the orchestration into clarity. How it is working! Then put a rag on top of that is that my approach is fine.

2408
05:40:05.260 --> 05:40:05.760
Sunny Savita: Both.

2409
05:40:06.257 --> 05:40:08.249
Sunny Savita: I lost you basically.

2410
05:40:08.250 --> 05:40:08.820
Sanjay: No, no.

2411
05:40:08.820 --> 05:40:29.350
Sunny Savita: See, we'll discuss once. Okay, just create one flow chart and let's mock up the component. Okay, you can see. One more person I yesterday discuss right? One project. Prahas. Right? So if you remember, he created that workflow, the entire workflow of their solution, whatever he is trying to create. Okay? So in the same way, basically, you can do that.

2412
05:40:30.360 --> 05:40:32.910
Sunny Savita: And on top of it we can think something. Got it.

2413
05:40:32.910 --> 05:40:35.389
Sanjay: Okay, okay, yeah, okay, fine.

2414
05:40:35.640 --> 05:40:39.215
Sanjay: So any any click, any

2415
05:40:40.060 --> 05:40:44.099
Sanjay: actually from your your side, you, you have developed any such

2416
05:40:44.410 --> 05:40:50.940
Sanjay: here or your Youtube videos or Chris, videos. Actually, if anything is there.

2417
05:40:50.940 --> 05:40:52.520
Sunny Savita: Regarding what through yearly.

2418
05:40:52.520 --> 05:40:53.590
Sanjay: Ha! Ha! Ha! Ha!

2419
05:40:53.590 --> 05:40:56.420
Sunny Savita: Over the crystal channel. We'll find out regarding Korea.

2420
05:40:56.420 --> 05:41:04.390
Sanjay: Yeah, I oh, yeah, I found, actually. But my case is little complex. Actually. So that is the reason.

2421
05:41:04.390 --> 05:41:07.439
Sunny Savita: Real time. Solution is always complex, sir. So

2422
05:41:08.420 --> 05:41:13.139
Sunny Savita: and all, you will just get a overview or the basic understanding of it. Okay.

2423
05:41:13.140 --> 05:41:13.890
Sanjay: Yeah.

2424
05:41:14.540 --> 05:41:24.499
Sanjay: correct. Correct. No issue. We'll we'll I will try to know emulate, actually that code base. And according to all. And then we can discuss, yeah.

2425
05:41:24.790 --> 05:41:25.990
Sunny Savita: Sure, sure, sure. Thank you.

2426
05:41:25.990 --> 05:41:26.550
Sanjay: Thank you.

2427
05:41:37.530 --> 05:41:44.199
Sunny Savita: Okay, guys. So I think I can close the session now. Thank you very much for joining the session. We'll meet you in the next session. Bye.

